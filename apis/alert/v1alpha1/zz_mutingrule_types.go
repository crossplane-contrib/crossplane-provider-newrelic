/*
Copyright 2024 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionInitParameters struct {

	// The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
	// The individual MutingRuleConditions within the group.
	Conditions []ConditionsInitParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The operator used to combine all the MutingRuleConditions within the group. Valid values are AND, OR.
	// The operator used to combine all the MutingRuleConditions within the group.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`
}

type ConditionObservation struct {

	// The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
	// The individual MutingRuleConditions within the group.
	Conditions []ConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// The operator used to combine all the MutingRuleConditions within the group. Valid values are AND, OR.
	// The operator used to combine all the MutingRuleConditions within the group.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`
}

type ConditionParameters struct {

	// The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.
	// The individual MutingRuleConditions within the group.
	// +kubebuilder:validation:Optional
	Conditions []ConditionsParameters `json:"conditions" tf:"conditions,omitempty"`

	// The operator used to combine all the MutingRuleConditions within the group. Valid values are AND, OR.
	// The operator used to combine all the MutingRuleConditions within the group.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`
}

type ConditionsInitParameters struct {

	// The attribute on an incident. Valid values are   accountId, conditionId, conditionName, conditionRunbookUrl, conditionType, entity.guid, nrqlEventType, nrqlQuery, policyId, policyName, product, tags.<NAME>, targetId, targetName
	// The attribute on an incident.
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// The operator used to compare the attribute's value with the supplied value(s). Valid values are ANY, CONTAINS, ENDS_WITH, EQUALS, IN, IS_BLANK, IS_NOT_BLANK, NOT_CONTAINS, NOT_ENDS_WITH, NOT_EQUALS, NOT_IN, NOT_STARTS_WITH, STARTS_WITH
	// The operator used to compare the attribute's value with the supplied value(s).
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The value(s) to compare against the attribute's value.
	// The value(s) to compare against the attribute's value.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ConditionsObservation struct {

	// The attribute on an incident. Valid values are   accountId, conditionId, conditionName, conditionRunbookUrl, conditionType, entity.guid, nrqlEventType, nrqlQuery, policyId, policyName, product, tags.<NAME>, targetId, targetName
	// The attribute on an incident.
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// The operator used to compare the attribute's value with the supplied value(s). Valid values are ANY, CONTAINS, ENDS_WITH, EQUALS, IN, IS_BLANK, IS_NOT_BLANK, NOT_CONTAINS, NOT_ENDS_WITH, NOT_EQUALS, NOT_IN, NOT_STARTS_WITH, STARTS_WITH
	// The operator used to compare the attribute's value with the supplied value(s).
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The value(s) to compare against the attribute's value.
	// The value(s) to compare against the attribute's value.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ConditionsParameters struct {

	// The attribute on an incident. Valid values are   accountId, conditionId, conditionName, conditionRunbookUrl, conditionType, entity.guid, nrqlEventType, nrqlQuery, policyId, policyName, product, tags.<NAME>, targetId, targetName
	// The attribute on an incident.
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// The operator used to compare the attribute's value with the supplied value(s). Valid values are ANY, CONTAINS, ENDS_WITH, EQUALS, IN, IS_BLANK, IS_NOT_BLANK, NOT_CONTAINS, NOT_ENDS_WITH, NOT_EQUALS, NOT_IN, NOT_STARTS_WITH, STARTS_WITH
	// The operator used to compare the attribute's value with the supplied value(s).
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// The value(s) to compare against the attribute's value.
	// The value(s) to compare against the attribute's value.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type MutingRuleInitParameters struct {

	// The account id of the MutingRule.
	// The account id of the MutingRule..
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The condition that defines which incidents to target. See Nested condition blocks below for details.
	// The condition that defines which incidents to target.
	Condition []ConditionInitParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// The description of the MutingRule.
	// The description of the MutingRule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether the MutingRule is enabled.
	// Whether the MutingRule is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The name of the MutingRule.
	// The name of the MutingRule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specify a schedule for enabling the MutingRule. See Schedule below for details
	// The time window when the MutingRule should actively mute incidents.
	Schedule []ScheduleInitParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type MutingRuleObservation struct {

	// The account id of the MutingRule.
	// The account id of the MutingRule..
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The condition that defines which incidents to target. See Nested condition blocks below for details.
	// The condition that defines which incidents to target.
	Condition []ConditionObservation `json:"condition,omitempty" tf:"condition,omitempty"`

	// The description of the MutingRule.
	// The description of the MutingRule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether the MutingRule is enabled.
	// Whether the MutingRule is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the MutingRule.
	// The name of the MutingRule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specify a schedule for enabling the MutingRule. See Schedule below for details
	// The time window when the MutingRule should actively mute incidents.
	Schedule []ScheduleObservation `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type MutingRuleParameters struct {

	// The account id of the MutingRule.
	// The account id of the MutingRule..
	// +kubebuilder:validation:Optional
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The condition that defines which incidents to target. See Nested condition blocks below for details.
	// The condition that defines which incidents to target.
	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// The description of the MutingRule.
	// The description of the MutingRule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether the MutingRule is enabled.
	// Whether the MutingRule is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The name of the MutingRule.
	// The name of the MutingRule.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Specify a schedule for enabling the MutingRule. See Schedule below for details
	// The time window when the MutingRule should actively mute incidents.
	// +kubebuilder:validation:Optional
	Schedule []ScheduleParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type ScheduleInitParameters struct {

	// 07-10T15:00:00'. Conflicts with repeat_count
	// The datetime stamp when the MutingRule schedule should stop repeating.
	EndRepeat *string `json:"endRepeat,omitempty" tf:"end_repeat,omitempty"`

	// 07-15T14:30:00'
	// The datetime stamp representing when the MutingRule should end.
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
	// The frequency the MutingRule schedule repeats. One of [DAILY, WEEKLY, MONTHLY]
	Repeat *string `json:"repeat,omitempty" tf:"repeat,omitempty"`

	// The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with end_repeat
	// The number of times the MutingRule schedule should repeat.
	RepeatCount *float64 `json:"repeatCount,omitempty" tf:"repeat_count,omitempty"`

	// 07-08T14:30:00'
	// The datetime stamp representing when the MutingRule should start.
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// The time zone that applies to the MutingRule schedule.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
	// The day(s) of the week that a MutingRule should repeat when the repeat field is set to WEEKLY.
	// +listType=set
	WeeklyRepeatDays []*string `json:"weeklyRepeatDays,omitempty" tf:"weekly_repeat_days,omitempty"`
}

type ScheduleObservation struct {

	// 07-10T15:00:00'. Conflicts with repeat_count
	// The datetime stamp when the MutingRule schedule should stop repeating.
	EndRepeat *string `json:"endRepeat,omitempty" tf:"end_repeat,omitempty"`

	// 07-15T14:30:00'
	// The datetime stamp representing when the MutingRule should end.
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
	// The frequency the MutingRule schedule repeats. One of [DAILY, WEEKLY, MONTHLY]
	Repeat *string `json:"repeat,omitempty" tf:"repeat,omitempty"`

	// The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with end_repeat
	// The number of times the MutingRule schedule should repeat.
	RepeatCount *float64 `json:"repeatCount,omitempty" tf:"repeat_count,omitempty"`

	// 07-08T14:30:00'
	// The datetime stamp representing when the MutingRule should start.
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// The time zone that applies to the MutingRule schedule.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
	// The day(s) of the week that a MutingRule should repeat when the repeat field is set to WEEKLY.
	// +listType=set
	WeeklyRepeatDays []*string `json:"weeklyRepeatDays,omitempty" tf:"weekly_repeat_days,omitempty"`
}

type ScheduleParameters struct {

	// 07-10T15:00:00'. Conflicts with repeat_count
	// The datetime stamp when the MutingRule schedule should stop repeating.
	// +kubebuilder:validation:Optional
	EndRepeat *string `json:"endRepeat,omitempty" tf:"end_repeat,omitempty"`

	// 07-15T14:30:00'
	// The datetime stamp representing when the MutingRule should end.
	// +kubebuilder:validation:Optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
	// The frequency the MutingRule schedule repeats. One of [DAILY, WEEKLY, MONTHLY]
	// +kubebuilder:validation:Optional
	Repeat *string `json:"repeat,omitempty" tf:"repeat,omitempty"`

	// The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with end_repeat
	// The number of times the MutingRule schedule should repeat.
	// +kubebuilder:validation:Optional
	RepeatCount *float64 `json:"repeatCount,omitempty" tf:"repeat_count,omitempty"`

	// 07-08T14:30:00'
	// The datetime stamp representing when the MutingRule should start.
	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// The time zone that applies to the MutingRule schedule.
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone" tf:"time_zone,omitempty"`

	// The day(s) of the week that a muting rule should repeat when the repeat field is set to 'WEEKLY'. Example: ['MONDAY', 'WEDNESDAY']
	// The day(s) of the week that a MutingRule should repeat when the repeat field is set to WEEKLY.
	// +kubebuilder:validation:Optional
	// +listType=set
	WeeklyRepeatDays []*string `json:"weeklyRepeatDays,omitempty" tf:"weekly_repeat_days,omitempty"`
}

// MutingRuleSpec defines the desired state of MutingRule
type MutingRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MutingRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MutingRuleInitParameters `json:"initProvider,omitempty"`
}

// MutingRuleStatus defines the observed state of MutingRule.
type MutingRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MutingRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MutingRule is the Schema for the MutingRules API. Create a muting rule for New Relic Alerts incidents.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,newrelic}
type MutingRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.condition) || (has(self.initProvider) && has(self.initProvider.condition))",message="spec.forProvider.condition is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   MutingRuleSpec   `json:"spec"`
	Status MutingRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MutingRuleList contains a list of MutingRules
type MutingRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MutingRule `json:"items"`
}

// Repository type metadata.
var (
	MutingRule_Kind             = "MutingRule"
	MutingRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MutingRule_Kind}.String()
	MutingRule_KindAPIVersion   = MutingRule_Kind + "." + CRDGroupVersion.String()
	MutingRule_GroupVersionKind = CRDGroupVersion.WithKind(MutingRule_Kind)
)

func init() {
	SchemeBuilder.Register(&MutingRule{}, &MutingRuleList{})
}

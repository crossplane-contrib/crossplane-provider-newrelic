/*
Copyright 2024 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Channel.
func (mg *Channel) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DestinationID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DestinationIDRef,
		Selector:     mg.Spec.ForProvider.DestinationIDSelector,
		To: reference.To{
			List:    &DestinationList{},
			Managed: &Destination{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DestinationID")
	}
	mg.Spec.ForProvider.DestinationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DestinationIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DestinationID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.DestinationIDRef,
		Selector:     mg.Spec.InitProvider.DestinationIDSelector,
		To: reference.To{
			List:    &DestinationList{},
			Managed: &Destination{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DestinationID")
	}
	mg.Spec.InitProvider.DestinationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DestinationIDRef = rsp.ResolvedReference

	return nil
}

/*
Copyright 2024 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertConditionInitParameters struct {

	// The New Relic account ID of the account you wish to create the condition. Defaults to the account ID set in your environment variable NEW_RELIC_ACCOUNT_ID.
	// The New Relic account ID for managing your NRQL alert conditions.
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// How long we wait for data that belongs in each aggregation window. Depending on your data, a longer delay may increase accuracy but delay notifications. Use aggregation_delay with the event_flow and cadence methods. The maximum delay is 1200 seconds (20 minutes) when using event_flow and 3600 seconds (60 minutes) when using cadence. In both cases, the minimum delay is 0 seconds and the default is 120 seconds. aggregation_delay cannot be set with nrql.evaluation_offset.
	// How long we wait for data that belongs in each aggregation window. Depending on your data, a longer delay may increase accuracy but delay notifications. Use aggregationDelay with the EVENT_FLOW and CADENCE aggregation methods.
	AggregationDelay *string `json:"aggregationDelay,omitempty" tf:"aggregation_delay,omitempty"`

	// Determines when we consider an aggregation window to be complete so that we can evaluate the signal for incidents. Possible values are cadence, event_flow or event_timer. Default is event_flow. aggregation_method cannot be set with nrql.evaluation_offset.
	// The method that determines when we consider an aggregation window to be complete so that we can evaluate the signal for incidents. Default is EVENT_FLOW.
	AggregationMethod *string `json:"aggregationMethod,omitempty" tf:"aggregation_method,omitempty"`

	// How long we wait after each data point arrives to make sure we've processed the whole batch. Use aggregation_timer with the event_timer method. The timer value can range from 0 seconds to 1200 seconds (20 minutes); the default is 60 seconds. aggregation_timer cannot be set with nrql.evaluation_offset.
	// How long we wait after each data point arrives to make sure we've processed the whole batch. Use aggregationTimer with the EVENT_TIMER aggregation method.
	AggregationTimer *string `json:"aggregationTimer,omitempty" tf:"aggregation_timer,omitempty"`

	// The duration of the time window used to evaluate the NRQL query, in seconds. The value must be at least 30 seconds, and no more than 21600 seconds (6 hours). Default is 60 seconds.
	// The duration of the time window used to evaluate the NRQL query, in seconds.
	AggregationWindow *float64 `json:"aggregationWindow,omitempty" tf:"aggregation_window,omitempty"`

	// The baseline direction of a baseline NRQL alert condition. Valid values are: lower_only, upper_and_lower, upper_only (case insensitive).
	// The baseline direction of a baseline NRQL alert condition. Valid values are: 'LOWER_ONLY', 'UPPER_AND_LOWER', 'UPPER_ONLY' (case insensitive).
	BaselineDirection *string `json:"baselineDirection,omitempty" tf:"baseline_direction,omitempty"`

	// Whether to close all open incidents when the signal expires.
	// Whether to close all open incidents when the signal expires.
	CloseViolationsOnExpiration *bool `json:"closeViolationsOnExpiration,omitempty" tf:"close_violations_on_expiration,omitempty"`

	// A list containing the critical threshold values. At least one critical or warning threshold must be defined. See Terms below for details.
	// A condition term with priority set to critical.
	Critical []CriticalInitParameters `json:"critical,omitempty" tf:"critical,omitempty"`

	// The description of the NRQL alert condition.
	// The description of the NRQL alert condition.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether to enable the alert condition. Valid values are true and false. Defaults to true.
	// Whether or not to enable the alert condition.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// How long we wait until the signal starts evaluating. The maximum delay is 7200 seconds (120 minutes).
	// How long we wait until the signal starts evaluating. The maximum delay is 7200 seconds (120 minutes)
	EvaluationDelay *float64 `json:"evaluationDelay,omitempty" tf:"evaluation_delay,omitempty"`

	// The amount of time (in seconds) to wait before considering the signal expired. The value must be at least 30 seconds, and no more than 172800 seconds (48 hours).
	// The amount of time (in seconds) to wait before considering the signal expired.  Must be in the range of 30 to 172800 (inclusive)
	ExpirationDuration *float64 `json:"expirationDuration,omitempty" tf:"expiration_duration,omitempty"`

	// Which strategy to use when filling gaps in the signal. Possible values are none, last_value or static. If static, the fill_value field will be used for filling gaps in the signal.
	// Which strategy to use when filling gaps in the signal. If static, the 'fill value' will be used for filling gaps in the signal. Valid values are: 'NONE', 'LAST_VALUE', or 'STATIC' (case insensitive).
	FillOption *string `json:"fillOption,omitempty" tf:"fill_option,omitempty"`

	// This value will be used for filling gaps in the signal.
	// If using the 'static' fill option, this value will be used for filling gaps in the signal.
	FillValue *float64 `json:"fillValue,omitempty" tf:"fill_value,omitempty"`

	// The title of the condition.
	// The title of the condition.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A NRQL query. See NRQL below for details.
	// A NRQL query.
	Nrql []NrqlInitParameters `json:"nrql,omitempty" tf:"nrql,omitempty"`

	// Whether to create a new incident to capture that the signal expired.
	// Whether to create a new incident to capture that the signal expired.
	OpenViolationOnExpiration *bool `json:"openViolationOnExpiration,omitempty" tf:"open_violation_on_expiration,omitempty"`

	// The ID of the policy where this condition should be used.
	// The ID of the policy where this condition should be used.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/crossplane-provider-newrelic/apis/alert/v1alpha1.Policy
	PolicyID *float64 `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Reference to a Policy in alert to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDRef *v1.Reference `json:"policyIdRef,omitempty" tf:"-"`

	// Selector for a Policy in alert to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDSelector *v1.Selector `json:"policyIdSelector,omitempty" tf:"-"`

	// Runbook URL to display in notifications.
	// Runbook URL to display in notifications.
	RunbookURL *string `json:"runbookUrl,omitempty" tf:"runbook_url,omitempty"`

	// Gathers data in overlapping time windows to smooth the chart line, making it easier to spot trends. The slide_by value is specified in seconds and must be smaller than and a factor of the aggregation_window.
	// The duration of overlapping time windows used to smooth the chart line, in seconds. Must be a factor of `aggregation_window` and less than the aggregation window. If `aggregation_window` is less than or equal to 3600 seconds, it should be greater or equal to 30 seconds. If `aggregation_window` is greater than 3600 seconds but less than 7200 seconds, it should be greater or equal to `aggregation_window / 120`.  If `aggregation_window` is greater than 7200 seconds, it should be greater or equal to `aggregation_window / 24
	SlideBy *float64 `json:"slideBy,omitempty" tf:"slide_by,omitempty"`

	// The type of the condition. Valid values are static or baseline. Defaults to static.
	// The type of NRQL alert condition to create. Valid values are: 'static', 'baseline'.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Sets a time limit, in seconds, that will automatically force-close a long-lasting incident after the time limit you select. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days) (inclusive).
	// *Note: One of violation_time_limit or violation_time_limit_seconds must be set, but not both.
	// Sets a time limit, in seconds, that will automatically force-close a long-lasting incident after the time limit you select.  Must be in the range of 300 to 2592000 (inclusive)
	ViolationTimeLimitSeconds *float64 `json:"violationTimeLimitSeconds,omitempty" tf:"violation_time_limit_seconds,omitempty"`

	// A list containing the warning threshold values. At least one critical or warning threshold must be defined. See Terms below for details.
	// A condition term with priority set to warning.
	Warning []WarningInitParameters `json:"warning,omitempty" tf:"warning,omitempty"`
}

type AlertConditionObservation struct {

	// The New Relic account ID of the account you wish to create the condition. Defaults to the account ID set in your environment variable NEW_RELIC_ACCOUNT_ID.
	// The New Relic account ID for managing your NRQL alert conditions.
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// How long we wait for data that belongs in each aggregation window. Depending on your data, a longer delay may increase accuracy but delay notifications. Use aggregation_delay with the event_flow and cadence methods. The maximum delay is 1200 seconds (20 minutes) when using event_flow and 3600 seconds (60 minutes) when using cadence. In both cases, the minimum delay is 0 seconds and the default is 120 seconds. aggregation_delay cannot be set with nrql.evaluation_offset.
	// How long we wait for data that belongs in each aggregation window. Depending on your data, a longer delay may increase accuracy but delay notifications. Use aggregationDelay with the EVENT_FLOW and CADENCE aggregation methods.
	AggregationDelay *string `json:"aggregationDelay,omitempty" tf:"aggregation_delay,omitempty"`

	// Determines when we consider an aggregation window to be complete so that we can evaluate the signal for incidents. Possible values are cadence, event_flow or event_timer. Default is event_flow. aggregation_method cannot be set with nrql.evaluation_offset.
	// The method that determines when we consider an aggregation window to be complete so that we can evaluate the signal for incidents. Default is EVENT_FLOW.
	AggregationMethod *string `json:"aggregationMethod,omitempty" tf:"aggregation_method,omitempty"`

	// How long we wait after each data point arrives to make sure we've processed the whole batch. Use aggregation_timer with the event_timer method. The timer value can range from 0 seconds to 1200 seconds (20 minutes); the default is 60 seconds. aggregation_timer cannot be set with nrql.evaluation_offset.
	// How long we wait after each data point arrives to make sure we've processed the whole batch. Use aggregationTimer with the EVENT_TIMER aggregation method.
	AggregationTimer *string `json:"aggregationTimer,omitempty" tf:"aggregation_timer,omitempty"`

	// The duration of the time window used to evaluate the NRQL query, in seconds. The value must be at least 30 seconds, and no more than 21600 seconds (6 hours). Default is 60 seconds.
	// The duration of the time window used to evaluate the NRQL query, in seconds.
	AggregationWindow *float64 `json:"aggregationWindow,omitempty" tf:"aggregation_window,omitempty"`

	// The baseline direction of a baseline NRQL alert condition. Valid values are: lower_only, upper_and_lower, upper_only (case insensitive).
	// The baseline direction of a baseline NRQL alert condition. Valid values are: 'LOWER_ONLY', 'UPPER_AND_LOWER', 'UPPER_ONLY' (case insensitive).
	BaselineDirection *string `json:"baselineDirection,omitempty" tf:"baseline_direction,omitempty"`

	// Whether to close all open incidents when the signal expires.
	// Whether to close all open incidents when the signal expires.
	CloseViolationsOnExpiration *bool `json:"closeViolationsOnExpiration,omitempty" tf:"close_violations_on_expiration,omitempty"`

	// A list containing the critical threshold values. At least one critical or warning threshold must be defined. See Terms below for details.
	// A condition term with priority set to critical.
	Critical []CriticalObservation `json:"critical,omitempty" tf:"critical,omitempty"`

	// The description of the NRQL alert condition.
	// The description of the NRQL alert condition.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether to enable the alert condition. Valid values are true and false. Defaults to true.
	// Whether or not to enable the alert condition.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The unique entity identifier of the NRQL Condition in New Relic.
	// The unique entity identifier of the NRQL Condition in New Relic.
	EntityGUID *string `json:"entityGuid,omitempty" tf:"entity_guid,omitempty"`

	// How long we wait until the signal starts evaluating. The maximum delay is 7200 seconds (120 minutes).
	// How long we wait until the signal starts evaluating. The maximum delay is 7200 seconds (120 minutes)
	EvaluationDelay *float64 `json:"evaluationDelay,omitempty" tf:"evaluation_delay,omitempty"`

	// The amount of time (in seconds) to wait before considering the signal expired. The value must be at least 30 seconds, and no more than 172800 seconds (48 hours).
	// The amount of time (in seconds) to wait before considering the signal expired.  Must be in the range of 30 to 172800 (inclusive)
	ExpirationDuration *float64 `json:"expirationDuration,omitempty" tf:"expiration_duration,omitempty"`

	// Which strategy to use when filling gaps in the signal. Possible values are none, last_value or static. If static, the fill_value field will be used for filling gaps in the signal.
	// Which strategy to use when filling gaps in the signal. If static, the 'fill value' will be used for filling gaps in the signal. Valid values are: 'NONE', 'LAST_VALUE', or 'STATIC' (case insensitive).
	FillOption *string `json:"fillOption,omitempty" tf:"fill_option,omitempty"`

	// This value will be used for filling gaps in the signal.
	// If using the 'static' fill option, this value will be used for filling gaps in the signal.
	FillValue *float64 `json:"fillValue,omitempty" tf:"fill_value,omitempty"`

	// The ID of the NRQL alert condition. This is a composite ID with the format <policy_id>:<condition_id> - e.g. 538291:6789035.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The title of the condition.
	// The title of the condition.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A NRQL query. See NRQL below for details.
	// A NRQL query.
	Nrql []NrqlObservation `json:"nrql,omitempty" tf:"nrql,omitempty"`

	// Whether to create a new incident to capture that the signal expired.
	// Whether to create a new incident to capture that the signal expired.
	OpenViolationOnExpiration *bool `json:"openViolationOnExpiration,omitempty" tf:"open_violation_on_expiration,omitempty"`

	// The ID of the policy where this condition should be used.
	// The ID of the policy where this condition should be used.
	PolicyID *float64 `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Runbook URL to display in notifications.
	// Runbook URL to display in notifications.
	RunbookURL *string `json:"runbookUrl,omitempty" tf:"runbook_url,omitempty"`

	// Gathers data in overlapping time windows to smooth the chart line, making it easier to spot trends. The slide_by value is specified in seconds and must be smaller than and a factor of the aggregation_window.
	// The duration of overlapping time windows used to smooth the chart line, in seconds. Must be a factor of `aggregation_window` and less than the aggregation window. If `aggregation_window` is less than or equal to 3600 seconds, it should be greater or equal to 30 seconds. If `aggregation_window` is greater than 3600 seconds but less than 7200 seconds, it should be greater or equal to `aggregation_window / 120`.  If `aggregation_window` is greater than 7200 seconds, it should be greater or equal to `aggregation_window / 24
	SlideBy *float64 `json:"slideBy,omitempty" tf:"slide_by,omitempty"`

	// The type of the condition. Valid values are static or baseline. Defaults to static.
	// The type of NRQL alert condition to create. Valid values are: 'static', 'baseline'.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// DEPRECATED: Use violation_time_limit_seconds instead. Sets a time limit, in hours, that will automatically force-close a long-lasting incident after the time limit you select. Possible values are ONE_HOUR, TWO_HOURS, FOUR_HOURS, EIGHT_HOURS, TWELVE_HOURS, TWENTY_FOUR_HOURS, THIRTY_DAYS (case insensitive).
	// *Note: One of violation_time_limit or violation_time_limit_seconds must be set, but not both.
	// Sets a time limit, in hours, that will automatically force-close a long-lasting incident after the time limit you select. Possible values are 'ONE_HOUR', 'TWO_HOURS', 'FOUR_HOURS', 'EIGHT_HOURS', 'TWELVE_HOURS', 'TWENTY_FOUR_HOURS', 'THIRTY_DAYS' (case insensitive).
	ViolationTimeLimit *string `json:"violationTimeLimit,omitempty" tf:"violation_time_limit,omitempty"`

	// Sets a time limit, in seconds, that will automatically force-close a long-lasting incident after the time limit you select. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days) (inclusive).
	// *Note: One of violation_time_limit or violation_time_limit_seconds must be set, but not both.
	// Sets a time limit, in seconds, that will automatically force-close a long-lasting incident after the time limit you select.  Must be in the range of 300 to 2592000 (inclusive)
	ViolationTimeLimitSeconds *float64 `json:"violationTimeLimitSeconds,omitempty" tf:"violation_time_limit_seconds,omitempty"`

	// A list containing the warning threshold values. At least one critical or warning threshold must be defined. See Terms below for details.
	// A condition term with priority set to warning.
	Warning []WarningObservation `json:"warning,omitempty" tf:"warning,omitempty"`
}

type AlertConditionParameters struct {

	// The New Relic account ID of the account you wish to create the condition. Defaults to the account ID set in your environment variable NEW_RELIC_ACCOUNT_ID.
	// The New Relic account ID for managing your NRQL alert conditions.
	// +kubebuilder:validation:Optional
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// How long we wait for data that belongs in each aggregation window. Depending on your data, a longer delay may increase accuracy but delay notifications. Use aggregation_delay with the event_flow and cadence methods. The maximum delay is 1200 seconds (20 minutes) when using event_flow and 3600 seconds (60 minutes) when using cadence. In both cases, the minimum delay is 0 seconds and the default is 120 seconds. aggregation_delay cannot be set with nrql.evaluation_offset.
	// How long we wait for data that belongs in each aggregation window. Depending on your data, a longer delay may increase accuracy but delay notifications. Use aggregationDelay with the EVENT_FLOW and CADENCE aggregation methods.
	// +kubebuilder:validation:Optional
	AggregationDelay *string `json:"aggregationDelay,omitempty" tf:"aggregation_delay,omitempty"`

	// Determines when we consider an aggregation window to be complete so that we can evaluate the signal for incidents. Possible values are cadence, event_flow or event_timer. Default is event_flow. aggregation_method cannot be set with nrql.evaluation_offset.
	// The method that determines when we consider an aggregation window to be complete so that we can evaluate the signal for incidents. Default is EVENT_FLOW.
	// +kubebuilder:validation:Optional
	AggregationMethod *string `json:"aggregationMethod,omitempty" tf:"aggregation_method,omitempty"`

	// How long we wait after each data point arrives to make sure we've processed the whole batch. Use aggregation_timer with the event_timer method. The timer value can range from 0 seconds to 1200 seconds (20 minutes); the default is 60 seconds. aggregation_timer cannot be set with nrql.evaluation_offset.
	// How long we wait after each data point arrives to make sure we've processed the whole batch. Use aggregationTimer with the EVENT_TIMER aggregation method.
	// +kubebuilder:validation:Optional
	AggregationTimer *string `json:"aggregationTimer,omitempty" tf:"aggregation_timer,omitempty"`

	// The duration of the time window used to evaluate the NRQL query, in seconds. The value must be at least 30 seconds, and no more than 21600 seconds (6 hours). Default is 60 seconds.
	// The duration of the time window used to evaluate the NRQL query, in seconds.
	// +kubebuilder:validation:Optional
	AggregationWindow *float64 `json:"aggregationWindow,omitempty" tf:"aggregation_window,omitempty"`

	// The baseline direction of a baseline NRQL alert condition. Valid values are: lower_only, upper_and_lower, upper_only (case insensitive).
	// The baseline direction of a baseline NRQL alert condition. Valid values are: 'LOWER_ONLY', 'UPPER_AND_LOWER', 'UPPER_ONLY' (case insensitive).
	// +kubebuilder:validation:Optional
	BaselineDirection *string `json:"baselineDirection,omitempty" tf:"baseline_direction,omitempty"`

	// Whether to close all open incidents when the signal expires.
	// Whether to close all open incidents when the signal expires.
	// +kubebuilder:validation:Optional
	CloseViolationsOnExpiration *bool `json:"closeViolationsOnExpiration,omitempty" tf:"close_violations_on_expiration,omitempty"`

	// A list containing the critical threshold values. At least one critical or warning threshold must be defined. See Terms below for details.
	// A condition term with priority set to critical.
	// +kubebuilder:validation:Optional
	Critical []CriticalParameters `json:"critical,omitempty" tf:"critical,omitempty"`

	// The description of the NRQL alert condition.
	// The description of the NRQL alert condition.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Whether to enable the alert condition. Valid values are true and false. Defaults to true.
	// Whether or not to enable the alert condition.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// How long we wait until the signal starts evaluating. The maximum delay is 7200 seconds (120 minutes).
	// How long we wait until the signal starts evaluating. The maximum delay is 7200 seconds (120 minutes)
	// +kubebuilder:validation:Optional
	EvaluationDelay *float64 `json:"evaluationDelay,omitempty" tf:"evaluation_delay,omitempty"`

	// The amount of time (in seconds) to wait before considering the signal expired. The value must be at least 30 seconds, and no more than 172800 seconds (48 hours).
	// The amount of time (in seconds) to wait before considering the signal expired.  Must be in the range of 30 to 172800 (inclusive)
	// +kubebuilder:validation:Optional
	ExpirationDuration *float64 `json:"expirationDuration,omitempty" tf:"expiration_duration,omitempty"`

	// Which strategy to use when filling gaps in the signal. Possible values are none, last_value or static. If static, the fill_value field will be used for filling gaps in the signal.
	// Which strategy to use when filling gaps in the signal. If static, the 'fill value' will be used for filling gaps in the signal. Valid values are: 'NONE', 'LAST_VALUE', or 'STATIC' (case insensitive).
	// +kubebuilder:validation:Optional
	FillOption *string `json:"fillOption,omitempty" tf:"fill_option,omitempty"`

	// This value will be used for filling gaps in the signal.
	// If using the 'static' fill option, this value will be used for filling gaps in the signal.
	// +kubebuilder:validation:Optional
	FillValue *float64 `json:"fillValue,omitempty" tf:"fill_value,omitempty"`

	// The title of the condition.
	// The title of the condition.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A NRQL query. See NRQL below for details.
	// A NRQL query.
	// +kubebuilder:validation:Optional
	Nrql []NrqlParameters `json:"nrql,omitempty" tf:"nrql,omitempty"`

	// Whether to create a new incident to capture that the signal expired.
	// Whether to create a new incident to capture that the signal expired.
	// +kubebuilder:validation:Optional
	OpenViolationOnExpiration *bool `json:"openViolationOnExpiration,omitempty" tf:"open_violation_on_expiration,omitempty"`

	// The ID of the policy where this condition should be used.
	// The ID of the policy where this condition should be used.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/crossplane-provider-newrelic/apis/alert/v1alpha1.Policy
	// +kubebuilder:validation:Optional
	PolicyID *float64 `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Reference to a Policy in alert to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDRef *v1.Reference `json:"policyIdRef,omitempty" tf:"-"`

	// Selector for a Policy in alert to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDSelector *v1.Selector `json:"policyIdSelector,omitempty" tf:"-"`

	// Runbook URL to display in notifications.
	// Runbook URL to display in notifications.
	// +kubebuilder:validation:Optional
	RunbookURL *string `json:"runbookUrl,omitempty" tf:"runbook_url,omitempty"`

	// Gathers data in overlapping time windows to smooth the chart line, making it easier to spot trends. The slide_by value is specified in seconds and must be smaller than and a factor of the aggregation_window.
	// The duration of overlapping time windows used to smooth the chart line, in seconds. Must be a factor of `aggregation_window` and less than the aggregation window. If `aggregation_window` is less than or equal to 3600 seconds, it should be greater or equal to 30 seconds. If `aggregation_window` is greater than 3600 seconds but less than 7200 seconds, it should be greater or equal to `aggregation_window / 120`.  If `aggregation_window` is greater than 7200 seconds, it should be greater or equal to `aggregation_window / 24
	// +kubebuilder:validation:Optional
	SlideBy *float64 `json:"slideBy,omitempty" tf:"slide_by,omitempty"`

	// The type of the condition. Valid values are static or baseline. Defaults to static.
	// The type of NRQL alert condition to create. Valid values are: 'static', 'baseline'.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Sets a time limit, in seconds, that will automatically force-close a long-lasting incident after the time limit you select. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days) (inclusive).
	// *Note: One of violation_time_limit or violation_time_limit_seconds must be set, but not both.
	// Sets a time limit, in seconds, that will automatically force-close a long-lasting incident after the time limit you select.  Must be in the range of 300 to 2592000 (inclusive)
	// +kubebuilder:validation:Optional
	ViolationTimeLimitSeconds *float64 `json:"violationTimeLimitSeconds,omitempty" tf:"violation_time_limit_seconds,omitempty"`

	// A list containing the warning threshold values. At least one critical or warning threshold must be defined. See Terms below for details.
	// A condition term with priority set to warning.
	// +kubebuilder:validation:Optional
	Warning []WarningParameters `json:"warning,omitempty" tf:"warning,omitempty"`
}

type CriticalInitParameters struct {

	// DEPRECATED: Use threshold_duration instead. The duration of time, in minutes, that the threshold must violate for in order to create an incident. Must be within 1-120 (inclusive).
	// In minutes, must be in the range of 1 to 120 (inclusive).
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// Valid values are above, above_or_equals, below, below_or_equals, equals, or not_equals (case insensitive). Defaults to equals. Note that when using a type of baseline, the only valid option here is above.
	// One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The value which will trigger an incident.
	// For baseline NRQL alert conditions, the value must be in the range [1, 1000]. The value is the number of standard deviations from the baseline that the metric must exceed in order to create an incident.
	// For baseline conditions must be in range [1, 1000].
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the aggregation_window (which has a default of 60 seconds).
	// For baseline NRQL alert conditions, the value must be within 120-86400 seconds (inclusive).
	// For static NRQL alert conditions, the value must be within 60-86400 seconds (inclusive).
	// The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
	ThresholdDuration *float64 `json:"thresholdDuration,omitempty" tf:"threshold_duration,omitempty"`

	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: all or at_least_once (case insensitive).
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
	ThresholdOccurrences *string `json:"thresholdOccurrences,omitempty" tf:"threshold_occurrences,omitempty"`

	// DEPRECATED: Use threshold_occurrences instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: all or any.
	// Valid values are: 'all' or 'any'
	TimeFunction *string `json:"timeFunction,omitempty" tf:"time_function,omitempty"`
}

type CriticalObservation struct {

	// DEPRECATED: Use threshold_duration instead. The duration of time, in minutes, that the threshold must violate for in order to create an incident. Must be within 1-120 (inclusive).
	// In minutes, must be in the range of 1 to 120 (inclusive).
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// Valid values are above, above_or_equals, below, below_or_equals, equals, or not_equals (case insensitive). Defaults to equals. Note that when using a type of baseline, the only valid option here is above.
	// One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The value which will trigger an incident.
	// For baseline NRQL alert conditions, the value must be in the range [1, 1000]. The value is the number of standard deviations from the baseline that the metric must exceed in order to create an incident.
	// For baseline conditions must be in range [1, 1000].
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the aggregation_window (which has a default of 60 seconds).
	// For baseline NRQL alert conditions, the value must be within 120-86400 seconds (inclusive).
	// For static NRQL alert conditions, the value must be within 60-86400 seconds (inclusive).
	// The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
	ThresholdDuration *float64 `json:"thresholdDuration,omitempty" tf:"threshold_duration,omitempty"`

	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: all or at_least_once (case insensitive).
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
	ThresholdOccurrences *string `json:"thresholdOccurrences,omitempty" tf:"threshold_occurrences,omitempty"`

	// DEPRECATED: Use threshold_occurrences instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: all or any.
	// Valid values are: 'all' or 'any'
	TimeFunction *string `json:"timeFunction,omitempty" tf:"time_function,omitempty"`
}

type CriticalParameters struct {

	// DEPRECATED: Use threshold_duration instead. The duration of time, in minutes, that the threshold must violate for in order to create an incident. Must be within 1-120 (inclusive).
	// In minutes, must be in the range of 1 to 120 (inclusive).
	// +kubebuilder:validation:Optional
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// Valid values are above, above_or_equals, below, below_or_equals, equals, or not_equals (case insensitive). Defaults to equals. Note that when using a type of baseline, the only valid option here is above.
	// One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The value which will trigger an incident.
	// For baseline NRQL alert conditions, the value must be in the range [1, 1000]. The value is the number of standard deviations from the baseline that the metric must exceed in order to create an incident.
	// For baseline conditions must be in range [1, 1000].
	// +kubebuilder:validation:Optional
	Threshold *float64 `json:"threshold" tf:"threshold,omitempty"`

	// The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the aggregation_window (which has a default of 60 seconds).
	// For baseline NRQL alert conditions, the value must be within 120-86400 seconds (inclusive).
	// For static NRQL alert conditions, the value must be within 60-86400 seconds (inclusive).
	// The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
	// +kubebuilder:validation:Optional
	ThresholdDuration *float64 `json:"thresholdDuration,omitempty" tf:"threshold_duration,omitempty"`

	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: all or at_least_once (case insensitive).
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
	// +kubebuilder:validation:Optional
	ThresholdOccurrences *string `json:"thresholdOccurrences,omitempty" tf:"threshold_occurrences,omitempty"`

	// DEPRECATED: Use threshold_occurrences instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: all or any.
	// Valid values are: 'all' or 'any'
	// +kubebuilder:validation:Optional
	TimeFunction *string `json:"timeFunction,omitempty" tf:"time_function,omitempty"`
}

type NrqlInitParameters struct {

	// DEPRECATED: Use aggregation_method instead. Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated based on their aggregation_window size. The start time depends on this value. It's recommended to set this to 3 windows. An offset of less than 3 windows will trigger incidents sooner, but you may see more false positives and negatives due to data latency. With evaluation_offset set to 3 windows and an aggregation_window of 60 seconds, the NRQL time window applied to your query will be: SINCE 3 minutes ago UNTIL 2 minutes ago. evaluation_offset cannot be set with aggregation_method, aggregation_delay, or aggregation_timer.
	// NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `evaluation_offset`.
	EvaluationOffset *float64 `json:"evaluationOffset,omitempty" tf:"evaluation_offset,omitempty"`

	// The NRQL query to execute for the condition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// DEPRECATED: Use aggregation_method instead. The value to be used in the SINCE <X> minutes ago clause for the NRQL query. Must be between 1-20 (inclusive).
	// NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `since_value`.
	SinceValue *string `json:"sinceValue,omitempty" tf:"since_value,omitempty"`
}

type NrqlObservation struct {

	// DEPRECATED: Use aggregation_method instead. Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated based on their aggregation_window size. The start time depends on this value. It's recommended to set this to 3 windows. An offset of less than 3 windows will trigger incidents sooner, but you may see more false positives and negatives due to data latency. With evaluation_offset set to 3 windows and an aggregation_window of 60 seconds, the NRQL time window applied to your query will be: SINCE 3 minutes ago UNTIL 2 minutes ago. evaluation_offset cannot be set with aggregation_method, aggregation_delay, or aggregation_timer.
	// NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `evaluation_offset`.
	EvaluationOffset *float64 `json:"evaluationOffset,omitempty" tf:"evaluation_offset,omitempty"`

	// The NRQL query to execute for the condition.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// DEPRECATED: Use aggregation_method instead. The value to be used in the SINCE <X> minutes ago clause for the NRQL query. Must be between 1-20 (inclusive).
	// NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `since_value`.
	SinceValue *string `json:"sinceValue,omitempty" tf:"since_value,omitempty"`
}

type NrqlParameters struct {

	// DEPRECATED: Use aggregation_method instead. Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated based on their aggregation_window size. The start time depends on this value. It's recommended to set this to 3 windows. An offset of less than 3 windows will trigger incidents sooner, but you may see more false positives and negatives due to data latency. With evaluation_offset set to 3 windows and an aggregation_window of 60 seconds, the NRQL time window applied to your query will be: SINCE 3 minutes ago UNTIL 2 minutes ago. evaluation_offset cannot be set with aggregation_method, aggregation_delay, or aggregation_timer.
	// NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `evaluation_offset`.
	// +kubebuilder:validation:Optional
	EvaluationOffset *float64 `json:"evaluationOffset,omitempty" tf:"evaluation_offset,omitempty"`

	// The NRQL query to execute for the condition.
	// +kubebuilder:validation:Optional
	Query *string `json:"query" tf:"query,omitempty"`

	// DEPRECATED: Use aggregation_method instead. The value to be used in the SINCE <X> minutes ago clause for the NRQL query. Must be between 1-20 (inclusive).
	// NRQL queries are evaluated in one-minute time windows. The start time depends on the value you provide in the NRQL condition's `since_value`.
	// +kubebuilder:validation:Optional
	SinceValue *string `json:"sinceValue,omitempty" tf:"since_value,omitempty"`
}

type WarningInitParameters struct {

	// DEPRECATED: Use threshold_duration instead. The duration of time, in minutes, that the threshold must violate for in order to create an incident. Must be within 1-120 (inclusive).
	// In minutes, must be in the range of 1 to 120 (inclusive).
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// Valid values are above, above_or_equals, below, below_or_equals, equals, or not_equals (case insensitive). Defaults to equals. Note that when using a type of baseline, the only valid option here is above.
	// One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The value which will trigger an incident.
	// For baseline NRQL alert conditions, the value must be in the range [1, 1000]. The value is the number of standard deviations from the baseline that the metric must exceed in order to create an incident.
	// For baseline conditions must be in range [1, 1000].
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the aggregation_window (which has a default of 60 seconds).
	// For baseline NRQL alert conditions, the value must be within 120-86400 seconds (inclusive).
	// For static NRQL alert conditions, the value must be within 60-86400 seconds (inclusive).
	// The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
	ThresholdDuration *float64 `json:"thresholdDuration,omitempty" tf:"threshold_duration,omitempty"`

	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: all or at_least_once (case insensitive).
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
	ThresholdOccurrences *string `json:"thresholdOccurrences,omitempty" tf:"threshold_occurrences,omitempty"`

	// DEPRECATED: Use threshold_occurrences instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: all or any.
	// Valid values are: 'all' or 'any'
	TimeFunction *string `json:"timeFunction,omitempty" tf:"time_function,omitempty"`
}

type WarningObservation struct {

	// DEPRECATED: Use threshold_duration instead. The duration of time, in minutes, that the threshold must violate for in order to create an incident. Must be within 1-120 (inclusive).
	// In minutes, must be in the range of 1 to 120 (inclusive).
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// Valid values are above, above_or_equals, below, below_or_equals, equals, or not_equals (case insensitive). Defaults to equals. Note that when using a type of baseline, the only valid option here is above.
	// One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The value which will trigger an incident.
	// For baseline NRQL alert conditions, the value must be in the range [1, 1000]. The value is the number of standard deviations from the baseline that the metric must exceed in order to create an incident.
	// For baseline conditions must be in range [1, 1000].
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the aggregation_window (which has a default of 60 seconds).
	// For baseline NRQL alert conditions, the value must be within 120-86400 seconds (inclusive).
	// For static NRQL alert conditions, the value must be within 60-86400 seconds (inclusive).
	// The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
	ThresholdDuration *float64 `json:"thresholdDuration,omitempty" tf:"threshold_duration,omitempty"`

	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: all or at_least_once (case insensitive).
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
	ThresholdOccurrences *string `json:"thresholdOccurrences,omitempty" tf:"threshold_occurrences,omitempty"`

	// DEPRECATED: Use threshold_occurrences instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: all or any.
	// Valid values are: 'all' or 'any'
	TimeFunction *string `json:"timeFunction,omitempty" tf:"time_function,omitempty"`
}

type WarningParameters struct {

	// DEPRECATED: Use threshold_duration instead. The duration of time, in minutes, that the threshold must violate for in order to create an incident. Must be within 1-120 (inclusive).
	// In minutes, must be in the range of 1 to 120 (inclusive).
	// +kubebuilder:validation:Optional
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// Valid values are above, above_or_equals, below, below_or_equals, equals, or not_equals (case insensitive). Defaults to equals. Note that when using a type of baseline, the only valid option here is above.
	// One of (above, above_or_equals, below, below_or_equals, equals, not_equals). Defaults to 'equals'.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The value which will trigger an incident.
	// For baseline NRQL alert conditions, the value must be in the range [1, 1000]. The value is the number of standard deviations from the baseline that the metric must exceed in order to create an incident.
	// For baseline conditions must be in range [1, 1000].
	// +kubebuilder:validation:Optional
	Threshold *float64 `json:"threshold" tf:"threshold,omitempty"`

	// The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the aggregation_window (which has a default of 60 seconds).
	// For baseline NRQL alert conditions, the value must be within 120-86400 seconds (inclusive).
	// For static NRQL alert conditions, the value must be within 60-86400 seconds (inclusive).
	// The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the 'aggregation_window' (which has a default of 60 seconds). Value must be within 120-86400 seconds for baseline conditions, and within 60-86400 seconds for static conditions
	// +kubebuilder:validation:Optional
	ThresholdDuration *float64 `json:"thresholdDuration,omitempty" tf:"threshold_duration,omitempty"`

	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: all or at_least_once (case insensitive).
	// The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: 'ALL' or 'AT_LEAST_ONCE' (case insensitive).
	// +kubebuilder:validation:Optional
	ThresholdOccurrences *string `json:"thresholdOccurrences,omitempty" tf:"threshold_occurrences,omitempty"`

	// DEPRECATED: Use threshold_occurrences instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: all or any.
	// Valid values are: 'all' or 'any'
	// +kubebuilder:validation:Optional
	TimeFunction *string `json:"timeFunction,omitempty" tf:"time_function,omitempty"`
}

// AlertConditionSpec defines the desired state of AlertCondition
type AlertConditionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlertConditionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AlertConditionInitParameters `json:"initProvider,omitempty"`
}

// AlertConditionStatus defines the observed state of AlertCondition.
type AlertConditionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlertConditionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AlertCondition is the Schema for the AlertConditions API. Create and manage a NRQL alert condition for a policy in New Relic.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,newrelic}
type AlertCondition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nrql) || (has(self.initProvider) && has(self.initProvider.nrql))",message="spec.forProvider.nrql is a required parameter"
	Spec   AlertConditionSpec   `json:"spec"`
	Status AlertConditionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlertConditionList contains a list of AlertConditions
type AlertConditionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AlertCondition `json:"items"`
}

// Repository type metadata.
var (
	AlertCondition_Kind             = "AlertCondition"
	AlertCondition_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AlertCondition_Kind}.String()
	AlertCondition_KindAPIVersion   = AlertCondition_Kind + "." + CRDGroupVersion.String()
	AlertCondition_GroupVersionKind = CRDGroupVersion.WithKind(AlertCondition_Kind)
)

func init() {
	SchemeBuilder.Register(&AlertCondition{}, &AlertConditionList{})
}

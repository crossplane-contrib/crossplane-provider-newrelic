// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2024 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ParsingRuleInitParameters struct {

	// The account id associated with the obfuscation rule.
	// The account id associated with the obfuscation expression.
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// Whether the rule should be applied or not to incoming data.
	// Whether or not this rule is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The Grok of what to parse.
	// The Grok of what to parse.
	Grok *string `json:"grok,omitempty" tf:"grok,omitempty"`

	// The Lucene to match events to the parsing rule.
	// The Lucene to match events to the parsing rule.
	Lucene *string `json:"lucene,omitempty" tf:"lucene,omitempty"`

	// Whether the Grok pattern matched.
	// Whether the Grok pattern matched.
	Matched *bool `json:"matched,omitempty" tf:"matched,omitempty"`

	// Name of rule.
	// A description of what this parsing rule represents.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The NRQL to match events to the parsing rule.
	// The NRQL to match events to the parsing rule.
	Nrql *string `json:"nrql,omitempty" tf:"nrql,omitempty"`
}

type ParsingRuleObservation struct {

	// The account id associated with the obfuscation rule.
	// The account id associated with the obfuscation expression.
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// Whether or not this rule is deleted.
	Deleted *bool `json:"deleted,omitempty" tf:"deleted,omitempty"`

	// Whether the rule should be applied or not to incoming data.
	// Whether or not this rule is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The Grok of what to parse.
	// The Grok of what to parse.
	Grok *string `json:"grok,omitempty" tf:"grok,omitempty"`

	// The id of the log parsing rule.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The Lucene to match events to the parsing rule.
	// The Lucene to match events to the parsing rule.
	Lucene *string `json:"lucene,omitempty" tf:"lucene,omitempty"`

	// Whether the Grok pattern matched.
	// Whether the Grok pattern matched.
	Matched *bool `json:"matched,omitempty" tf:"matched,omitempty"`

	// Name of rule.
	// A description of what this parsing rule represents.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The NRQL to match events to the parsing rule.
	// The NRQL to match events to the parsing rule.
	Nrql *string `json:"nrql,omitempty" tf:"nrql,omitempty"`
}

type ParsingRuleParameters struct {

	// The account id associated with the obfuscation rule.
	// The account id associated with the obfuscation expression.
	// +kubebuilder:validation:Optional
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The parsing rule will apply to value of this attribute. If field is not provided, value will default to message.
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// Whether the rule should be applied or not to incoming data.
	// Whether or not this rule is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The Grok of what to parse.
	// The Grok of what to parse.
	// +kubebuilder:validation:Optional
	Grok *string `json:"grok,omitempty" tf:"grok,omitempty"`

	// The Lucene to match events to the parsing rule.
	// The Lucene to match events to the parsing rule.
	// +kubebuilder:validation:Optional
	Lucene *string `json:"lucene,omitempty" tf:"lucene,omitempty"`

	// Whether the Grok pattern matched.
	// Whether the Grok pattern matched.
	// +kubebuilder:validation:Optional
	Matched *bool `json:"matched,omitempty" tf:"matched,omitempty"`

	// Name of rule.
	// A description of what this parsing rule represents.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The NRQL to match events to the parsing rule.
	// The NRQL to match events to the parsing rule.
	// +kubebuilder:validation:Optional
	Nrql *string `json:"nrql,omitempty" tf:"nrql,omitempty"`
}

// ParsingRuleSpec defines the desired state of ParsingRule
type ParsingRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ParsingRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ParsingRuleInitParameters `json:"initProvider,omitempty"`
}

// ParsingRuleStatus defines the observed state of ParsingRule.
type ParsingRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ParsingRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ParsingRule is the Schema for the ParsingRules API. Create and manage Log Parsing Rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,newrelic}
type ParsingRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.grok) || (has(self.initProvider) && has(self.initProvider.grok))",message="spec.forProvider.grok is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.lucene) || (has(self.initProvider) && has(self.initProvider.lucene))",message="spec.forProvider.lucene is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nrql) || (has(self.initProvider) && has(self.initProvider.nrql))",message="spec.forProvider.nrql is a required parameter"
	Spec   ParsingRuleSpec   `json:"spec"`
	Status ParsingRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ParsingRuleList contains a list of ParsingRules
type ParsingRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ParsingRule `json:"items"`
}

// Repository type metadata.
var (
	ParsingRule_Kind             = "ParsingRule"
	ParsingRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ParsingRule_Kind}.String()
	ParsingRule_KindAPIVersion   = ParsingRule_Kind + "." + CRDGroupVersion.String()
	ParsingRule_GroupVersionKind = CRDGroupVersion.WithKind(ParsingRule_Kind)
)

func init() {
	SchemeBuilder.Register(&ParsingRule{}, &ParsingRuleList{})
}

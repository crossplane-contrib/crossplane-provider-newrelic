/*
Copyright 2024 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationInitParameters struct {

	// An NRQL query to run
	// enrichment's NRQL query
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type ConfigurationObservation struct {

	// An NRQL query to run
	// enrichment's NRQL query
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type ConfigurationParameters struct {

	// An NRQL query to run
	// enrichment's NRQL query
	// +kubebuilder:validation:Optional
	Query *string `json:"query" tf:"query,omitempty"`
}

type DestinationInitParameters struct {

	// Id of a notification_channel to use for notifications. Please note that you have to use a
	// notification channel, not an alert_channel.
	// (Required) Destination's channel id.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/crossplane-provider-newrelic/apis/alert/v1alpha1.Channel
	ChannelID *string `json:"channelId,omitempty" tf:"channel_id,omitempty"`

	// Reference to a Channel in alert to populate channelId.
	// +kubebuilder:validation:Optional
	ChannelIDRef *v1.Reference `json:"channelIdRef,omitempty" tf:"-"`

	// Selector for a Channel in alert to populate channelId.
	// +kubebuilder:validation:Optional
	ChannelIDSelector *v1.Selector `json:"channelIdSelector,omitempty" tf:"-"`

	// Issue events to notify on. The value is a list of possible issue events. See Notification Triggers below for details.
	// List of triggers to notify about in this destination configuration.
	NotificationTriggers []*string `json:"notificationTriggers,omitempty" tf:"notification_triggers,omitempty"`

	// Update original notification message (Slack channels only).
	// Update original notification message (Slack channels only)
	UpdateOriginalMessage *bool `json:"updateOriginalMessage,omitempty" tf:"update_original_message,omitempty"`
}

type DestinationObservation struct {

	// Id of a notification_channel to use for notifications. Please note that you have to use a
	// notification channel, not an alert_channel.
	// (Required) Destination's channel id.
	ChannelID *string `json:"channelId,omitempty" tf:"channel_id,omitempty"`

	// The name of the workflow.
	// (Required) Destination's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Issue events to notify on. The value is a list of possible issue events. See Notification Triggers below for details.
	// List of triggers to notify about in this destination configuration.
	NotificationTriggers []*string `json:"notificationTriggers,omitempty" tf:"notification_triggers,omitempty"`

	// Type of the filter. Please just set this field to FILTER. The field is likely to be deprecated/removed in the near future.
	// (Required) The type of the destination. One of: (EMAIL, EVENT_BRIDGE, PAGERDUTY_ACCOUNT_INTEGRATION, PAGERDUTY_SERVICE_INTEGRATION, SERVICE_NOW, SERVICE_NOW_APP, WEBHOOK, MOBILE_PUSH, SLACK, JIRA).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Update original notification message (Slack channels only).
	// Update original notification message (Slack channels only)
	UpdateOriginalMessage *bool `json:"updateOriginalMessage,omitempty" tf:"update_original_message,omitempty"`
}

type DestinationParameters struct {

	// Id of a notification_channel to use for notifications. Please note that you have to use a
	// notification channel, not an alert_channel.
	// (Required) Destination's channel id.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/crossplane-provider-newrelic/apis/alert/v1alpha1.Channel
	// +kubebuilder:validation:Optional
	ChannelID *string `json:"channelId,omitempty" tf:"channel_id,omitempty"`

	// Reference to a Channel in alert to populate channelId.
	// +kubebuilder:validation:Optional
	ChannelIDRef *v1.Reference `json:"channelIdRef,omitempty" tf:"-"`

	// Selector for a Channel in alert to populate channelId.
	// +kubebuilder:validation:Optional
	ChannelIDSelector *v1.Selector `json:"channelIdSelector,omitempty" tf:"-"`

	// Issue events to notify on. The value is a list of possible issue events. See Notification Triggers below for details.
	// List of triggers to notify about in this destination configuration.
	// +kubebuilder:validation:Optional
	NotificationTriggers []*string `json:"notificationTriggers,omitempty" tf:"notification_triggers,omitempty"`

	// Update original notification message (Slack channels only).
	// Update original notification message (Slack channels only)
	// +kubebuilder:validation:Optional
	UpdateOriginalMessage *bool `json:"updateOriginalMessage,omitempty" tf:"update_original_message,omitempty"`
}

type EnrichmentsInitParameters struct {

	// a wrapper block
	// (Required) Nrql type Enrichments.
	Nrql []NrqlInitParameters `json:"nrql,omitempty" tf:"nrql,omitempty"`
}

type EnrichmentsObservation struct {

	// a wrapper block
	// (Required) Nrql type Enrichments.
	Nrql []NrqlObservation `json:"nrql,omitempty" tf:"nrql,omitempty"`
}

type EnrichmentsParameters struct {

	// a wrapper block
	// (Required) Nrql type Enrichments.
	// +kubebuilder:validation:Optional
	Nrql []NrqlParameters `json:"nrql" tf:"nrql,omitempty"`
}

type IssuesFilterInitParameters struct {

	// The name of the filter. It can't be empty.
	// (Required) Filter's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A condition an issue event should satisfy to be processed by the workflow
	Predicate []PredicateInitParameters `json:"predicate,omitempty" tf:"predicate,omitempty"`

	// Type of the filter. Please just set this field to FILTER. The field is likely to be deprecated/removed in the near future.
	// (Required) The type of the filter. One of: (FILTER, VIEW).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IssuesFilterObservation struct {

	// The ID of the workflow.
	// filter id.
	FilterID *string `json:"filterId,omitempty" tf:"filter_id,omitempty"`

	// The name of the filter. It can't be empty.
	// (Required) Filter's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A condition an issue event should satisfy to be processed by the workflow
	Predicate []PredicateObservation `json:"predicate,omitempty" tf:"predicate,omitempty"`

	// Type of the filter. Please just set this field to FILTER. The field is likely to be deprecated/removed in the near future.
	// (Required) The type of the filter. One of: (FILTER, VIEW).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IssuesFilterParameters struct {

	// The name of the filter. It can't be empty.
	// (Required) Filter's name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// A condition an issue event should satisfy to be processed by the workflow
	// +kubebuilder:validation:Optional
	Predicate []PredicateParameters `json:"predicate,omitempty" tf:"predicate,omitempty"`

	// Type of the filter. Please just set this field to FILTER. The field is likely to be deprecated/removed in the near future.
	// (Required) The type of the filter. One of: (FILTER, VIEW).
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NrqlInitParameters struct {

	// Another wrapper block
	// A set of key-value pairs to represent a enrichment configuration.
	Configuration []ConfigurationInitParameters `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// The name of the workflow.
	// (Required) Enrichment's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type NrqlObservation struct {

	// Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.
	// The account id of the enrichment.
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Another wrapper block
	// A set of key-value pairs to represent a enrichment configuration.
	Configuration []ConfigurationObservation `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// The ID of the workflow.
	// Enrichment's id.
	EnrichmentID *string `json:"enrichmentId,omitempty" tf:"enrichment_id,omitempty"`

	// The name of the workflow.
	// (Required) Enrichment's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Type of the filter. Please just set this field to FILTER. The field is likely to be deprecated/removed in the near future.
	// The type of the enrichment. One of: (NRQL).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NrqlParameters struct {

	// Another wrapper block
	// A set of key-value pairs to represent a enrichment configuration.
	// +kubebuilder:validation:Optional
	Configuration []ConfigurationParameters `json:"configuration" tf:"configuration,omitempty"`

	// The name of the workflow.
	// (Required) Enrichment's name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type PredicateInitParameters struct {

	// Issue event attribute to check
	// (Required) predicate's attribute.
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// An operator to use to compare the attribute with the provided values, see supported operators below
	// The type of the operator. One of: (CONTAINS, DOES_NOT_CONTAIN, DOES_NOT_EQUAL, DOES_NOT_EXACTLY_MATCH, ENDS_WITH, EQUAL, EXACTLY_MATCHES, GREATER_OR_EQUAL, GREATER_THAN, IS, IS_NOT, LESS_OR_EQUAL, LESS_THAN, STARTS_WITH).
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The attribute must match any of the values in this list
	// List of predicate values.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type PredicateObservation struct {

	// Issue event attribute to check
	// (Required) predicate's attribute.
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// An operator to use to compare the attribute with the provided values, see supported operators below
	// The type of the operator. One of: (CONTAINS, DOES_NOT_CONTAIN, DOES_NOT_EQUAL, DOES_NOT_EXACTLY_MATCH, ENDS_WITH, EQUAL, EXACTLY_MATCHES, GREATER_OR_EQUAL, GREATER_THAN, IS, IS_NOT, LESS_OR_EQUAL, LESS_THAN, STARTS_WITH).
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// The attribute must match any of the values in this list
	// List of predicate values.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type PredicateParameters struct {

	// Issue event attribute to check
	// (Required) predicate's attribute.
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// An operator to use to compare the attribute with the provided values, see supported operators below
	// The type of the operator. One of: (CONTAINS, DOES_NOT_CONTAIN, DOES_NOT_EQUAL, DOES_NOT_EXACTLY_MATCH, ENDS_WITH, EQUAL, EXACTLY_MATCHES, GREATER_OR_EQUAL, GREATER_THAN, IS, IS_NOT, LESS_OR_EQUAL, LESS_THAN, STARTS_WITH).
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// The attribute must match any of the values in this list
	// List of predicate values.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type WorkflowInitParameters struct {

	// Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.
	// The account id of the workflow.
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Notification configuration. See Nested destination blocks below for details.
	// Workflow's destination configuration.
	Destination []DestinationInitParameters `json:"destination,omitempty" tf:"destination,omitempty"`

	// DEPRECATED Whether destinations are enabled. Please use enabled instead:
	// these two are different flags, but they are functionally identical. Defaults to true.
	// Indicates whether the destinations are enabled.
	DestinationsEnabled *bool `json:"destinationsEnabled,omitempty" tf:"destinations_enabled,omitempty"`

	// Whether workflow is enabled. Defaults to true.
	// Indicates whether the workflow is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Workflow's enrichments. See Nested enrichments blocks below for details.
	// Enrichments can give additional context on alert notifications by adding NRQL query results to them.
	Enrichments []EnrichmentsInitParameters `json:"enrichments,omitempty" tf:"enrichments,omitempty"`

	// Whether enrichments are enabled. Defaults to true.
	// Indicates whether the enrichments are enabled.
	EnrichmentsEnabled *bool `json:"enrichmentsEnabled,omitempty" tf:"enrichments_enabled,omitempty"`

	// A filter used to identify issues handled by this workflow. See Nested issues_filter blocks below for details.
	IssuesFilter []IssuesFilterInitParameters `json:"issuesFilter,omitempty" tf:"issues_filter,omitempty"`

	// How to handle muted issues. See Muting Rules below for details.
	// The type of the muting rule handling. One of: (NOTIFY_ALL_ISSUES, DONT_NOTIFY_FULLY_MUTED_ISSUES, DONT_NOTIFY_FULLY_OR_PARTIALLY_MUTED_ISSUES).
	MutingRulesHandling *string `json:"mutingRulesHandling,omitempty" tf:"muting_rules_handling,omitempty"`

	// The name of the workflow.
	// (Required) The name of the workflow.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type WorkflowObservation struct {

	// Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.
	// The account id of the workflow.
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Notification configuration. See Nested destination blocks below for details.
	// Workflow's destination configuration.
	Destination []DestinationObservation `json:"destination,omitempty" tf:"destination,omitempty"`

	// DEPRECATED Whether destinations are enabled. Please use enabled instead:
	// these two are different flags, but they are functionally identical. Defaults to true.
	// Indicates whether the destinations are enabled.
	DestinationsEnabled *bool `json:"destinationsEnabled,omitempty" tf:"destinations_enabled,omitempty"`

	// Whether workflow is enabled. Defaults to true.
	// Indicates whether the workflow is enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Workflow's enrichments. See Nested enrichments blocks below for details.
	// Enrichments can give additional context on alert notifications by adding NRQL query results to them.
	Enrichments []EnrichmentsObservation `json:"enrichments,omitempty" tf:"enrichments,omitempty"`

	// Whether enrichments are enabled. Defaults to true.
	// Indicates whether the enrichments are enabled.
	EnrichmentsEnabled *bool `json:"enrichmentsEnabled,omitempty" tf:"enrichments_enabled,omitempty"`

	// The ID of the workflow.
	// Workflow entity GUID
	GUID *string `json:"guid,omitempty" tf:"guid,omitempty"`

	// The ID of the workflow.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A filter used to identify issues handled by this workflow. See Nested issues_filter blocks below for details.
	IssuesFilter []IssuesFilterObservation `json:"issuesFilter,omitempty" tf:"issues_filter,omitempty"`

	// The last time notification was sent for this workflow.
	LastRun *string `json:"lastRun,omitempty" tf:"last_run,omitempty"`

	// How to handle muted issues. See Muting Rules below for details.
	// The type of the muting rule handling. One of: (NOTIFY_ALL_ISSUES, DONT_NOTIFY_FULLY_MUTED_ISSUES, DONT_NOTIFY_FULLY_OR_PARTIALLY_MUTED_ISSUES).
	MutingRulesHandling *string `json:"mutingRulesHandling,omitempty" tf:"muting_rules_handling,omitempty"`

	// The name of the workflow.
	// (Required) The name of the workflow.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the workflow.
	// The id of the workflow.
	WorkflowID *string `json:"workflowId,omitempty" tf:"workflow_id,omitempty"`
}

type WorkflowParameters struct {

	// Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.
	// The account id of the workflow.
	// +kubebuilder:validation:Optional
	AccountID *float64 `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Notification configuration. See Nested destination blocks below for details.
	// Workflow's destination configuration.
	// +kubebuilder:validation:Optional
	Destination []DestinationParameters `json:"destination,omitempty" tf:"destination,omitempty"`

	// DEPRECATED Whether destinations are enabled. Please use enabled instead:
	// these two are different flags, but they are functionally identical. Defaults to true.
	// Indicates whether the destinations are enabled.
	// +kubebuilder:validation:Optional
	DestinationsEnabled *bool `json:"destinationsEnabled,omitempty" tf:"destinations_enabled,omitempty"`

	// Whether workflow is enabled. Defaults to true.
	// Indicates whether the workflow is enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Workflow's enrichments. See Nested enrichments blocks below for details.
	// Enrichments can give additional context on alert notifications by adding NRQL query results to them.
	// +kubebuilder:validation:Optional
	Enrichments []EnrichmentsParameters `json:"enrichments,omitempty" tf:"enrichments,omitempty"`

	// Whether enrichments are enabled. Defaults to true.
	// Indicates whether the enrichments are enabled.
	// +kubebuilder:validation:Optional
	EnrichmentsEnabled *bool `json:"enrichmentsEnabled,omitempty" tf:"enrichments_enabled,omitempty"`

	// A filter used to identify issues handled by this workflow. See Nested issues_filter blocks below for details.
	// +kubebuilder:validation:Optional
	IssuesFilter []IssuesFilterParameters `json:"issuesFilter,omitempty" tf:"issues_filter,omitempty"`

	// How to handle muted issues. See Muting Rules below for details.
	// The type of the muting rule handling. One of: (NOTIFY_ALL_ISSUES, DONT_NOTIFY_FULLY_MUTED_ISSUES, DONT_NOTIFY_FULLY_OR_PARTIALLY_MUTED_ISSUES).
	// +kubebuilder:validation:Optional
	MutingRulesHandling *string `json:"mutingRulesHandling,omitempty" tf:"muting_rules_handling,omitempty"`

	// The name of the workflow.
	// (Required) The name of the workflow.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// WorkflowSpec defines the desired state of Workflow
type WorkflowSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WorkflowParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WorkflowInitParameters `json:"initProvider,omitempty"`
}

// WorkflowStatus defines the observed state of Workflow.
type WorkflowStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WorkflowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Workflow is the Schema for the Workflows API. Create and manage a workflow in New Relic.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,newrelic}
type Workflow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destination) || (has(self.initProvider) && has(self.initProvider.destination))",message="spec.forProvider.destination is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.issuesFilter) || (has(self.initProvider) && has(self.initProvider.issuesFilter))",message="spec.forProvider.issuesFilter is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mutingRulesHandling) || (has(self.initProvider) && has(self.initProvider.mutingRulesHandling))",message="spec.forProvider.mutingRulesHandling is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   WorkflowSpec   `json:"spec"`
	Status WorkflowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkflowList contains a list of Workflows
type WorkflowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Workflow `json:"items"`
}

// Repository type metadata.
var (
	Workflow_Kind             = "Workflow"
	Workflow_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Workflow_Kind}.String()
	Workflow_KindAPIVersion   = Workflow_Kind + "." + CRDGroupVersion.String()
	Workflow_GroupVersionKind = CRDGroupVersion.WithKind(Workflow_Kind)
)

func init() {
	SchemeBuilder.Register(&Workflow{}, &WorkflowList{})
}

/*
Copyright 2024 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha1 "github.com/crossplane-contrib/crossplane-provider-newrelic/apis/alert/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Workflow.
func (mg *Workflow) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Destination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Destination[i3].ChannelID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.Destination[i3].ChannelIDRef,
			Selector:     mg.Spec.ForProvider.Destination[i3].ChannelIDSelector,
			To: reference.To{
				List:    &v1alpha1.ChannelList{},
				Managed: &v1alpha1.Channel{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Destination[i3].ChannelID")
		}
		mg.Spec.ForProvider.Destination[i3].ChannelID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Destination[i3].ChannelIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Destination); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Destination[i3].ChannelID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.Destination[i3].ChannelIDRef,
			Selector:     mg.Spec.InitProvider.Destination[i3].ChannelIDSelector,
			To: reference.To{
				List:    &v1alpha1.ChannelList{},
				Managed: &v1alpha1.Channel{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.Destination[i3].ChannelID")
		}
		mg.Spec.InitProvider.Destination[i3].ChannelID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.Destination[i3].ChannelIDRef = rsp.ResolvedReference

	}

	return nil
}

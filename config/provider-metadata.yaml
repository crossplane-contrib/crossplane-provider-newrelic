name: newrelic/newrelic
resources:
    newrelic_account_management:
        subCategory: ""
        description: Create and manage  sub accounts in New Relic.
        name: newrelic_account_management
        title: newrelic_account_management
        examples:
            - name: foo
              manifest: |-
                {
                  "name": "Test Account Name",
                  "region": "us01"
                }
        argumentDocs:
            id: '- The ID of the account created.'
            name: '- (Required) The name of the Account.'
            region: '- (Required) The region code of the account.  One of: us01, eu01.'
        importStatements: []
    newrelic_alert_channel:
        subCategory: ""
        description: Create and manage a notification channel for alerts in New Relic.
        name: newrelic_alert_channel
        title: newrelic_alert_channel
        examples:
            - name: foo
              manifest: |-
                {
                  "config": [
                    {
                      "include_json_attachment": "true",
                      "recipients": "foo@example.com"
                    }
                  ],
                  "name": "foo",
                  "type": "email"
                }
            - name: foo
              manifest: |-
                {
                  "config": [
                    {
                      "channel": "example-alerts-channel",
                      "url": "https://hooks.slack.com/services/XXXXXXX/XXXXXXX/XXXXXXXXXX"
                    }
                  ],
                  "name": "slack-example",
                  "type": "slack"
                }
            - name: foo
              manifest: |-
                {
                  "config": [
                    {
                      "api_key": "abc123",
                      "recipients": "user1@domain.com, user2@domain.com",
                      "tags": "tag1, tag2",
                      "teams": "team1, team2"
                    }
                  ],
                  "name": "opsgenie-example",
                  "type": "opsgenie"
                }
            - name: foo
              manifest: |-
                {
                  "config": [
                    {
                      "service_key": "abc123"
                    }
                  ],
                  "name": "pagerduty-example",
                  "type": "pagerduty"
                }
            - name: foo
              manifest: |-
                {
                  "config": [
                    {
                      "key": "abc123",
                      "route_key": "/example"
                    }
                  ],
                  "name": "victorops-example",
                  "type": "victorops"
                }
            - name: foo
              manifest: |-
                {
                  "config": [
                    {
                      "base_url": "http://www.test.com",
                      "headers": {
                        "header1": "${value1}",
                        "header2": "${value2}"
                      },
                      "payload": {
                        "condition_name": "$CONDITION_NAME",
                        "policy_name": "$POLICY_NAME"
                      },
                      "payload_type": "application/json"
                    }
                  ],
                  "name": "webhook-example",
                  "type": "webhook"
                }
            - name: foo
              manifest: |-
                {
                  "config": [
                    {
                      "base_url": "http://www.test.com",
                      "payload_string": "{\n  \"my_custom_values\": {\n    \"condition_name\": \"$CONDITION_NAME\",\n    \"policy_name\": \"$POLICY_NAME\"\n  }\n}\n",
                      "payload_type": "application/json"
                    }
                  ],
                  "name": "webhook-example",
                  "type": "webhook"
                }
        argumentDocs:
            account_id: '- (Optional) Determines the New Relic account where the alert channel will be created. Defaults to the account associated with the API key used.'
            api_key: '- (Required) The API key for integrating with OpsGenie.'
            auth_password: '- (Optional) Specifies an authentication password for use with a channel.  Supported by the webhook channel type.'
            auth_type: '- (Optional) Specifies an authentication method for use with a channel.  Supported by the webhook channel type.  Only HTTP basic authentication is currently supported via the value BASIC.'
            auth_username: '- (Optional) Specifies an authentication username for use with a channel.  Supported by the webhook channel type.'
            base_url: '- (Required) The base URL of the webhook destination.'
            channel: '- (Optional) The Slack channel to send notifications to.'
            config: '- (Optional) A nested block that describes an alert channel configuration.  Only one config block is permitted per alert channel definition.  See Nested config blocks below for details.'
            config.email: ""
            config.opsgenie: ""
            config.pagerduty: ""
            config.slack: ""
            config.victorops: ""
            config.webhook: ""
            headers: '- (Optional) A map of key/value pairs that represents extra HTTP headers to be sent along with the webhook payload.'
            headers_string: '- (Optional) Use instead of headers if the desired payload is more complex than a list of key/value pairs (e.g. a set of headers that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with headers.'
            id: '- The ID of the channel.'
            include_json_attachment: '- (Optional) true or false. Flag for whether or not to attach a JSON document containing information about the associated alert to the email that is sent to recipients.'
            key: '- (Required) The key for integrating with VictorOps.'
            name: '- (Required) The name of the channel.'
            payload: '- (Optional) A map of key/value pairs that represents the webhook payload.  Must provide payload_type if setting this argument.'
            payload_string: '- (Optional) Use instead of payload if the desired payload is more complex than a list of key/value pairs (e.g. a payload that makes use of nested objects).  The value provided should be a valid JSON string with escaped double quotes. Conflicts with payload.'
            payload_type: '- (Optional) Can either be application/json or application/x-www-form-urlencoded. The payload_type argument is required if payload is set.'
            recipients: '- (Required) Comma delimited list of email addresses.'
            region: '- (Required) The data center region to store your data.  Valid values are US and EU.  Default is US.'
            route_key: '- (Required) The route key for integrating with VictorOps.'
            service_key: '- (Required) Specifies the service key for integrating with Pagerduty.'
            tags: '- (Optional) A set of tags for targeting notifications. Multiple values are comma separated.'
            teams: '- (Optional) A set of teams for targeting notifications. Multiple values are comma separated.'
            type: '- (Required) The type of channel.  One of: email, slack, opsgenie, pagerduty, victorops, or webhook.'
            url: '- (Required) Slack Webhook URL.'
        importStatements: []
    newrelic_alert_condition:
        subCategory: ""
        description: Create and manage alert conditions for APM, Browser, and Mobile in New Relic.
        name: newrelic_alert_condition
        title: newrelic_alert_condition
        examples:
            - name: foo
              manifest: |-
                {
                  "condition_scope": "application",
                  "entities": [
                    "${data.newrelic_entity.app.application_id}"
                  ],
                  "metric": "apdex",
                  "name": "foo",
                  "policy_id": "${newrelic_alert_policy.foo.id}",
                  "runbook_url": "https://www.example.com",
                  "term": [
                    {
                      "duration": 5,
                      "operator": "below",
                      "priority": "critical",
                      "threshold": "0.75",
                      "time_function": "all"
                    }
                  ],
                  "type": "apm_app_metric"
                }
              references:
                policy_id: newrelic_alert_policy.foo.id
              dependencies:
                newrelic_alert_policy.foo: |-
                    {
                      "name": "foo"
                    }
            - name: foo
              manifest: |-
                {
                  "condition_scope": "application",
                  "entities": [
                    "${data.newrelic_entity.foo.application_id}"
                  ],
                  "metric": "apdex",
                  "name": "foo condition",
                  "policy_id": "${newrelic_alert_policy.foo.id}",
                  "runbook_url": "https://www.example.com",
                  "term": [
                    {
                      "duration": 5,
                      "operator": "below",
                      "priority": "critical",
                      "threshold": "0.75",
                      "time_function": "all"
                    }
                  ],
                  "type": "apm_app_metric"
                }
              references:
                policy_id: newrelic_alert_policy.foo.id
              dependencies:
                newrelic_alert_policy.foo: |-
                    {
                      "name": "foo policy"
                    }
                newrelic_entity_tags.my_condition_entity_tags: |-
                    {
                      "guid": "${newrelic_alert_condition.foo.entity_guid}",
                      "tag": [
                        {
                          "key": "my-key",
                          "values": [
                            "my-value",
                            "my-other-value"
                          ]
                        },
                        {
                          "key": "my-key-2",
                          "values": [
                            "my-value-2"
                          ]
                        }
                      ]
                    }
        argumentDocs:
            apm_app_metric: ""
            apm_jvm_metric: ""
            apm_kt_metric: ""
            browser_metric: ""
            condition_scope: '- (Required for some types) application or instance.  Choose application for most scenarios.  If you are using the JVM plugin in New Relic, the instance setting allows your condition to trigger for specific app instances.'
            duration: '- (Required) In minutes, must be in the range of 5 to 120, inclusive.'
            enabled: '- (Optional) Whether the condition is enabled or not. Defaults to true.'
            entities: '- (Required) The instance IDs associated with this condition.'
            entity_guid: '- The unique entity identifier of the condition in New Relic.'
            gc_metric: '- (Optional) A valid Garbage Collection metric e.g. GC/G1 Young Generation.'
            id: '- The ID of the alert condition.'
            metric: '- (Required) The metric field accepts parameters based on the type set. One of these metrics based on type:'
            mobile_metric: ""
            name: '- (Required) The title of the condition. Must be between 1 and 64 characters, inclusive.'
            operator: '- (Optional) above, below, or equal.  Defaults to equal.'
            policy_id: '- (Required) The ID of the policy where this condition should be used.'
            priority: '- (Optional) critical or warning.  Defaults to critical. Terms must include at least one critical priority term'
            runbook_url: '- (Optional) Runbook URL to display in notifications.'
            term: '- (Required) A list of terms for this condition. See Terms below for details.'
            threshold: '- (Required) Must be 0 or greater.'
            time_function: '- (Required) all or any.'
            type: '- (Required) The type of condition. One of: apm_app_metric, apm_jvm_metric, apm_kt_metric, browser_metric, mobile_metric'
            user_defined_metric: '- (Optional) A custom metric to be evaluated.'
            user_defined_value_function: '- (Optional) One of: average, min, max, total, sample_size, rate or percent.'
            violation_close_timer: '- (Optional) Automatically close instance-based incidents, including JVM health metric incidents, after the number of hours specified. Must be between 1 and 720 hours. Must be specified in the following two cases, to prevent drift:'
        importStatements: []
    newrelic_alert_muting_rule:
        subCategory: ""
        description: Create a muting rule for New Relic Alerts incidents.
        name: newrelic_alert_muting_rule
        title: newrelic_alert_muting_rule'
        examples:
            - name: foo
              manifest: |-
                {
                  "condition": [
                    {
                      "conditions": [
                        {
                          "attribute": "product",
                          "operator": "EQUALS",
                          "values": [
                            "APM"
                          ]
                        },
                        {
                          "attribute": "targetId",
                          "operator": "EQUALS",
                          "values": [
                            "Muted"
                          ]
                        }
                      ],
                      "operator": "AND"
                    }
                  ],
                  "description": "muting rule test.",
                  "enabled": true,
                  "name": "Example Muting Rule",
                  "schedule": [
                    {
                      "end_time": "2021-01-28T16:30:00",
                      "repeat": "WEEKLY",
                      "repeat_count": 42,
                      "start_time": "2021-01-28T15:30:00",
                      "time_zone": "America/Los_Angeles",
                      "weekly_repeat_days": [
                        "MONDAY",
                        "WEDNESDAY",
                        "FRIDAY"
                      ]
                    }
                  ]
                }
        argumentDocs:
            account_id: '- (Optional) The account id of the MutingRule.'
            attribute: '- (Required) The attribute on an incident. Valid values are   accountId, conditionId, conditionName, conditionRunbookUrl, conditionType, entity.guid, nrqlEventType, nrqlQuery, policyId, policyName, product, tags.<NAME>, targetId, targetName'
            condition: '- (Required) The condition that defines which incidents to target. See Nested condition blocks below for details.'
            condition.conditions: '- (Optional) The individual MutingRuleConditions within the group. See Nested conditions blocks below for details.'
            condition.operator: '- (Required) The operator used to combine all the MutingRuleConditions within the group. Valid values are AND, OR.'
            description: '- The description of the MutingRule.'
            enabled: '- (Required) Whether the MutingRule is enabled.'
            end_repeat: '(Optional) The datetime stamp when the muting rule schedule stops repeating. This is in local ISO 8601 format without an offset. Example: ''2020-07-10T15:00:00''. Conflicts with repeat_count'
            end_time: '(Optional) The datetime stamp that represents when the muting rule ends. This is in local ISO 8601 format without an offset. Example: ''2020-07-15T14:30:00'''
            name: '- The name of the MutingRule.'
            operator: '- (Required) The operator used to compare the attribute''s value with the supplied value(s). Valid values are ANY, CONTAINS, ENDS_WITH, EQUALS, IN, IS_BLANK, IS_NOT_BLANK, NOT_CONTAINS, NOT_ENDS_WITH, NOT_EQUALS, NOT_IN, NOT_STARTS_WITH, STARTS_WITH'
            repeat: (Optional) The frequency the muting rule schedule repeats. If it does not repeat, omit this field. Options are DAILY, WEEKLY, MONTHLY
            repeat_count: (Optional) The number of times the muting rule schedule repeats. This includes the original schedule. For example, a repeatCount of 2 will recur one time. Conflicts with end_repeat
            schedule: '- (Optional) Specify a schedule for enabling the MutingRule. See Schedule below for details'
            start_time: '(Optional) The datetime stamp that represents when the muting rule starts. This is in local ISO 8601 format without an offset. Example: ''2020-07-08T14:30:00'''
            timeZone: '(Required) The time zone that applies to the muting rule schedule. Example: ''America/Los_Angeles''. See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones'
            values: '- (Required) The value(s) to compare against the attribute''s value.'
            weekly_repeat_days: '(Optional) The day(s) of the week that a muting rule should repeat when the repeat field is set to ''WEEKLY''. Example: [''MONDAY'', ''WEDNESDAY'']'
        importStatements: []
    newrelic_alert_policy:
        subCategory: ""
        description: Create and manage alert policies in New Relic.
        name: newrelic_alert_policy
        title: newrelic_alert_policy
        examples:
            - name: foo
              manifest: |-
                {
                  "incident_preference": "PER_POLICY",
                  "name": "example"
                }
            - name: policy_with_channels
              manifest: |-
                {
                  "channel_ids": [
                    "${newrelic_alert_channel.slack_channel.id}",
                    "${newrelic_alert_channel.email_channel.id}"
                  ],
                  "incident_preference": "PER_CONDITION",
                  "name": "example-with-channels"
                }
              dependencies:
                newrelic_alert_channel.email_channel: |-
                    {
                      "config": [
                        {
                          "include_json_attachment": "1",
                          "recipients": "example@testing.com"
                        }
                      ],
                      "name": "email-example",
                      "type": "email"
                    }
                newrelic_alert_channel.slack_channel: |-
                    {
                      "config": [
                        {
                          "channel": "example-alerts-channel",
                          "url": "https://hooks.slack.com/services/\u003c*****\u003e/\u003c*****\u003e"
                        }
                      ],
                      "name": "slack-example",
                      "type": "slack"
                    }
            - name: policy_with_channels
              manifest: |-
                {
                  "channel_ids": [
                    "${data.newrelic_alert_channel.slack_channel.id}",
                    "${data.newrelic_alert_channel.email_channel.id}"
                  ],
                  "incident_preference": "PER_CONDITION",
                  "name": "example-with-channels"
                }
        argumentDocs:
            PER_CONDITION: '- This sets the incident grouping preference of the policy to One issue per condition. Refer to this page for more details on this incident grouping preference.'
            PER_CONDITION_AND_TARGET: '- This sets the incident grouping preference of the policy to One issue per condition and signal. Refer to this page for more details on this incident grouping preference.'
            PER_POLICY: '- This sets the incident grouping preference of the policy to One issue per policy. Refer to this page for more details on this incident grouping preference.'
            account_id: '- (Optional) The New Relic account ID to operate on.  This allows the user to override the account_id attribute set on the provider. Defaults to the environment variable NEW_RELIC_ACCOUNT_ID.'
            channel_ids: '- (Optional) DEPRECATED The channel_ids argument is deprecated and will be removed in the next major release of the provider. An array of channel IDs (integers) to assign to the policy. Adding or removing channel IDs from this array will result in a new alert policy resource being created and the old one being destroyed. Also note that channel IDs cannot be imported via terraform import (see Import for info).'
            id: '- The ID of the policy.'
            incident_preference: '- (Optional) The rollup strategy for the policy, which can have one of the following values (the default value is PER_POLICY):'
            name: '- (Required) The name of the policy.'
        importStatements: []
    newrelic_alert_policy_channel:
        subCategory: ""
        description: Map alert policies to alert channels in New Relic.
        name: newrelic_alert_policy_channel
        title: newrelic_alert_policy_channel'
        examples:
            - name: foo
              manifest: |-
                {
                  "channel_ids": [
                    "${newrelic_alert_channel.email_channel.id}",
                    "${newrelic_alert_channel.slack_channel.id}"
                  ],
                  "policy_id": "${data.newrelic_alert_policy.example_policy.id}"
                }
              references:
                policy_id: data.newrelic_alert_policy.example_policy.id
              dependencies:
                newrelic_alert_channel.email_channel: |-
                    {
                      "config": [
                        {
                          "include_json_attachment": "1",
                          "recipients": "foo@example.com"
                        }
                      ],
                      "name": "bar",
                      "type": "email"
                    }
                newrelic_alert_channel.slack_channel: |-
                    {
                      "config": [
                        {
                          "channel": "#example-channel",
                          "url": "http://example-org.slack.com"
                        }
                      ],
                      "name": "slack-channel-example",
                      "type": "slack"
                    }
        argumentDocs:
            account_id: '- (Optional) Determines the New Relic account where the alert policy channel will be created. Defaults to the account associated with the API key used.'
            channel_ids: '- (Required) Array of channel IDs to apply to the specified policy. We recommended sorting channel IDs in ascending order to avoid drift your Terraform state.'
            policy_id: '- (Required) The ID of the policy.'
        importStatements: []
    newrelic_api_access_key':
        subCategory: ""
        description: Create and Manage New Relic API access keys
        name: newrelic_api_access_key'
        title: newrelic_api_access_key'
        argumentDocs:
            account_id: '- (Required) The New Relic account ID of the account you wish to create the API access key.'
            id: '- The ID of the API key.'
            ingest_type: '- (Optional) Required if key_type = INGEST. Valid options are BROWSER or LICENSE, case-sensitive.'
            key: '- The actual API key. This attribute is masked and not be visible in your terminal, CI, etc.'
            key_type: '- (Required) What type of API key to create. Valid options are INGEST or USER, case-sensitive.'
            name: '- (Optional) The name of the key.'
            notes: '- (Optional) Any notes about this ingest key.'
            user_id: '- (Optional) Required if key_type = USER. The New Relic user ID yous wish to create the API access key for in an account.'
        importStatements: []
    newrelic_application_settings:
        subCategory: ""
        description: Manage configuration for an existing application in New Relic.
        name: newrelic_application_settings
        title: newrelic_application_settings
        examples:
            - name: app
              manifest: |-
                {
                  "app_apdex_threshold": "0.7",
                  "enable_real_user_monitoring": false,
                  "end_user_apdex_threshold": "0.8",
                  "name": "my-app"
                }
        argumentDocs:
            app_apdex_threshold: '- (Required) The apdex threshold for the New Relic application.'
            enable_real_user_monitoring: '- (Required) Enable or disable real user monitoring for the New Relic application.'
            end_user_apdex_threshold: '- (Required) The user''s apdex threshold for the New Relic application.'
            id: '- The ID of the application.'
            name: '- (Required) The name of the application in New Relic APM.'
        importStatements: []
    newrelic_browser_application:
        subCategory: ""
        description: Create, update, and delete a standalone New Relic browser application.
        name: newrelic_browser_application
        title: newrelic_browser_application
        examples:
            - name: foo
              manifest: |-
                {
                  "cookies_enabled": true,
                  "distributed_tracing_enabled": true,
                  "loader_type": "SPA",
                  "name": "example-browser-app"
                }
        argumentDocs:
            account_id: '- (Optional) The account ID of the New Relic account you wish to create the browser application in. Defaults to the value of the environment variable NEW_RELIC_ACCOUNT_ID if not specified.'
            application_id: '- The application ID of the browser application (not to be confused with GUID).'
            cookies_enabled: '- (Optional) Configures cookies. Defaults to true, if not specified.'
            distributed_tracing_enabled: '- (Optional) Configures distributed tracing in browser apps. Defaults to true, if not specified.'
            id: '- The GUID of the browser application.'
            js_config: '- The JavaScript configuration of the browser application, encoded into a string.'
            loader_type: '- (Optional) Determines the browser loader configured. Valid values are SPA, PRO, and LITE. The default is SPA. Refer to the browser agent loader documentation for more information on valid loader types.'
            name: '- (Required) The name of the browser application.'
        importStatements: []
    newrelic_cloud_aws_govcloud_integrations:
        subCategory: ""
        description: Integrating an AwsGovCloud account to New Relic.
        name: newrelic_cloud_aws_govcloud_integrations
        title: newrelic_cloud_aws_govcloud_integrations
        examples:
            - name: foo
              manifest: |-
                {
                  "account_id": 3806526,
                  "alb": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "fetch_extended_inventory": true,
                      "fetch_tags": true,
                      "load_balancer_prefixes": [
                        ""
                      ],
                      "metrics_polling_interval": 1000,
                      "tag_key": "",
                      "tag_value": ""
                    }
                  ],
                  "api_gateway": [
                    {
                      "aws_regions": [
                        ""
                      ],
                      "metrics_polling_interval": 1000,
                      "stage_prefixes": [
                        ""
                      ],
                      "tag_key": "",
                      "tag_value": ""
                    }
                  ],
                  "auto_scaling": [
                    {
                      "aws_regions": [
                        ""
                      ],
                      "metrics_polling_interval": 1000
                    }
                  ],
                  "aws_direct_connect": [
                    {
                      "aws_regions": [
                        ""
                      ],
                      "metrics_polling_interval": 1000
                    }
                  ],
                  "aws_states": [
                    {
                      "aws_regions": [
                        ""
                      ],
                      "metrics_polling_interval": 1000
                    }
                  ],
                  "cloudtrail": [
                    {
                      "aws_regions": [
                        ""
                      ],
                      "metrics_polling_interval": 1000
                    }
                  ],
                  "dynamo_db": [
                    {
                      "aws_regions": [
                        ""
                      ],
                      "fetch_extended_inventory": true,
                      "fetch_tags": true,
                      "metrics_polling_interval": 1000,
                      "tag_key": "",
                      "tag_value": ""
                    }
                  ],
                  "ebs": [
                    {
                      "aws_regions": [
                        ""
                      ],
                      "fetch_extended_inventory": true,
                      "metrics_polling_interval": 1000,
                      "tag_key": "",
                      "tag_value": ""
                    }
                  ],
                  "ec2": [
                    {
                      "aws_regions": [
                        ""
                      ],
                      "fetch_ip_addresses": true,
                      "metrics_polling_interval": 1000,
                      "tag_key": "",
                      "tag_value": ""
                    }
                  ],
                  "elastic_search": [
                    {
                      "aws_regions": [
                        ""
                      ],
                      "fetch_nodes": true,
                      "metrics_polling_interval": 1000,
                      "tag_key": "",
                      "tag_value": ""
                    }
                  ],
                  "elb": [
                    {
                      "aws_regions": [
                        ""
                      ],
                      "fetch_extended_inventory": true,
                      "fetch_tags": true,
                      "metrics_polling_interval": 1000
                    }
                  ],
                  "emr": [
                    {
                      "aws_regions": [
                        ""
                      ],
                      "fetch_tags": true,
                      "metrics_polling_interval": 1000,
                      "tag_key": "",
                      "tag_value": ""
                    }
                  ],
                  "iam": [
                    {
                      "metrics_polling_interval": 1000,
                      "tag_key": "",
                      "tag_value": ""
                    }
                  ],
                  "lambda": [
                    {
                      "aws_regions": [
                        ""
                      ],
                      "fetch_tags": true,
                      "metrics_polling_interval": 1000,
                      "tag_key": "",
                      "tag_value": ""
                    }
                  ],
                  "linked_account_id": "${newrelic_cloud_awsGovcloud_link_account.account.id}",
                  "rds": [
                    {
                      "aws_regions": [
                        ""
                      ],
                      "fetch_tags": true,
                      "metrics_polling_interval": 1000,
                      "tag_key": "",
                      "tag_value": ""
                    }
                  ],
                  "red_shift": [
                    {
                      "aws_regions": [
                        ""
                      ],
                      "metrics_polling_interval": 1000,
                      "tag_key": "",
                      "tag_value": ""
                    }
                  ],
                  "route53": [
                    {
                      "fetch_extended_inventory": true,
                      "metrics_polling_interval": 1000
                    }
                  ],
                  "s3": [
                    {
                      "fetch_extended_inventory": true,
                      "fetch_tags": true,
                      "metrics_polling_interval": 1000,
                      "tag_key": "",
                      "tag_value": ""
                    }
                  ],
                  "sns": [
                    {
                      "aws_regions": [
                        ""
                      ],
                      "fetch_extended_inventory": true,
                      "metrics_polling_interval": 1000
                    }
                  ],
                  "sqs": [
                    {
                      "aws_regions": [
                        ""
                      ],
                      "fetch_extended_inventory": true,
                      "fetch_tags": true,
                      "metrics_polling_interval": 1000,
                      "queue_prefixes": [
                        ""
                      ],
                      "tag_key": "",
                      "tag_value": ""
                    }
                  ]
                }
              references:
                linked_account_id: newrelic_cloud_awsGovcloud_link_account.account.id
              dependencies:
                newrelic_cloud_awsGovcloud_link_account.account: |-
                    {
                      "access_key_id": "%[1]s",
                      "aws_account_id": "%[2]s",
                      "metric_collection_mode": "PULL",
                      "name": "%[4]s",
                      "secret_access_key": "%[3]s"
                    }
        argumentDocs:
            account_id: '- (Optional) The New Relic account ID to operate on. This allows the user to override the account_id attribute set on the provider. Defaults to the environment variable NEW_RELIC_ACCOUNT_ID.'
            alb: '- (Optional) Application load balancer AwsGovCloud integration.See Integration blocks below for details.'
            api_gateway: '- (Optional) Api Gateway AwsGovCloud integration.See Integration blocks below for details.'
            auto_scaling: '- (Optional) Autoscaling AwsGovCloud integration.See Integration blocks below for details.'
            aws_direct_connect: '- (Optional) Aws Direct Connect AwsGovCloud integration.See Integration blocks below for details.'
            aws_regions: '- (Optional) Specify each AWS region that includes the resources that you want to monitor.'
            aws_states: '- (Optional) Aws States AwsGovCloud integration.See Integration blocks below for details.'
            cloudtrail: '- (Optional) Cloudtrail AwsGovCloud integration.See Integration blocks below for details.'
            dynamo_db: '- (Optional) Dynamo DB AwsGovCloud integration.See Integration blocks below for details.'
            ebs: '- (Optional) Elastic Beanstalk AwsGovCloud integration.See Integration blocks below for details.'
            ec2: '- (Optional) EC2 AwsGovCloud integration.See Integration blocks below for details.'
            elastic_search: '- (Optional) Elastic search AwsGovCloud integration.See Integration blocks below for details.'
            elb: '- (Optional) Elb AwsGovCloud integration.See Integration blocks below for details.'
            emr: '- (Optional) Emr AwsGovCloud integration.See Integration blocks below for details.'
            fetch_extended_inventory: '- (Optional) Determine if extra inventory data be collected or not. May affect total data collection time and contribute to the Cloud provider API rate limit.'
            fetch_ip_addresses: '- (Optional) Specify if IP addresses of ec2 instance should be collected'
            fetch_nodes: '- (Optional) Specify if metrics should be collected for nodes. Turning it on will increase the number of API calls made to CloudWatch.'
            fetch_tags: '- (Optional) Specify if tags should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.'
            iam: '- (Optional) IAM AwsGovCloud integration.See Integration blocks below for details.'
            id: '- The ID of the AWSGovCloud linked account.'
            integration.alb: ""
            integration.api Gateway: ""
            integration.auto scaling: ""
            integration.aws states: ""
            integration.cloudtrail: ""
            integration.direct connect: ""
            integration.dynamoDB: ""
            integration.ebs: ""
            integration.ec2: ""
            integration.elastic search: ""
            integration.elb: ""
            integration.emr: ""
            integration.iam: ""
            integration.lambda: ""
            integration.metrics_polling_interval: '- (Optional) The data polling interval in seconds.'
            integration.rds: ""
            integration.redshift: ""
            integration.route53: ""
            integration.s3: ""
            integration.sns: ""
            integration.sqs: ""
            lambda: '- (Optional) Lambda AwsGovCloud integration.See Integration blocks below for details.'
            linked_account_id: '- (Required) The access key of the AwsGovCloud.'
            load_balancer_prefixes: '- (Optional) Specify each name or prefix for the LBs that you want to monitor. Filter values are case-sensitive.'
            queue_prefixes: '- (Optional) Specify each name or prefix for the Queues that you want to monitor. Filter values are case-sensitive.'
            rds: '- (Optional) RDS AwsGovCloud integration.See Integration blocks below for details.'
            red_shift: '- (Optional) Redshift AwsGovCloud integration.See Integration blocks below for details.'
            route53: '- (Optional) Route53 AwsGovCloud integration.See Integration blocks below for details.'
            sns: '- (Optional) SNS AwsGovCloud integration.See Integration blocks below for details.'
            sqs: '- (Optional) SQS AwsGovCloud integration.See Integration blocks below for details.'
            stage_prefixes: '- (Optional) Specify each name or prefix for the Stages that you want to monitor. Filter values are case-sensitive.'
            tag_key: '- (Optional) Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.'
            tag_value: '- (Optional) Specify a Tag value associated with the resources that you want to monitor. Filter values are case-sensitive.'
        importStatements: []
    newrelic_cloud_aws_govcloud_link_account:
        subCategory: ""
        description: Link an AwsGovCloud account to New Relic.
        name: newrelic_cloud_aws_govcloud_link_account
        title: newrelic_cloud_aws_govcloud_link_account
        examples:
            - name: foo
              manifest: |-
                {
                  "access_key_id": "access-key-id of aws govcloud account",
                  "account_id": "The New Relic account ID where you want to link the AWS GovCloud account",
                  "aws_account_id": "aws govcloud account id",
                  "metric_collection_mode": "PULL",
                  "name": "account name",
                  "secret_access_key": "secret access key of the aws govcloud account"
                }
        argumentDocs:
            access_key_id: '- (Required) The access key of the AwsGovCloud.'
            account_id: '- (Optional) The New Relic account ID to operate on. This allows the user to override the account_id attribute set on the provider. Defaults to the environment variable NEW_RELIC_ACCOUNT_ID.'
            aws_account_id: '- (Required) The AwsGovCloud account ID.'
            id: '- The ID of the AWSGovCloud linked account.'
            metric_collection_mode: '- (Optional) How metrics will be collected. Use PUSH for a metric stream or PULL to integrate with individual services.'
            name: '- (Required) - The linked account name'
            secret_access_key: '- (Required) The secret key of the AwsGovCloud.'
        importStatements: []
    newrelic_cloud_aws_integrations:
        subCategory: ""
        description: Integrate AWS services with New Relic.
        name: newrelic_cloud_aws_integrations
        title: newrelic_cloud_aws_integrations
        examples:
            - name: bar
              manifest: |-
                {
                  "alb": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "fetch_extended_inventory": true,
                      "fetch_tags": true,
                      "load_balancer_prefixes": [
                        "load balancer prefix"
                      ],
                      "metrics_polling_interval": 300,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "api_gateway": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300,
                      "stage_prefixes": [
                        "stage prefix"
                      ],
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "auto_scaling": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_app_sync": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_athena": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_cognito": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_connect": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_direct_connect": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_fsx": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_glue": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_kinesis_analytics": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_media_convert": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_media_package_vod": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_mq": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_msk": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_neptune": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_qldb": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_route53resolver": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_states": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_transit_gateway": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_waf": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "aws_wafv2": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "billing": [
                    {
                      "metrics_polling_interval": 3600
                    }
                  ],
                  "cloudfront": [
                    {
                      "fetch_lambdas_at_edge": true,
                      "fetch_tags": true,
                      "metrics_polling_interval": 300,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "cloudtrail": [
                    {
                      "aws_regions": [
                        "us-east-1",
                        "us-east-2"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "doc_db": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "dynamodb": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "fetch_extended_inventory": true,
                      "fetch_tags": true,
                      "metrics_polling_interval": 300,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "ebs": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "fetch_extended_inventory": true,
                      "metrics_polling_interval": 900,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "ec2": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "duplicate_ec2_tags": true,
                      "fetch_ip_addresses": true,
                      "metrics_polling_interval": 300,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "ecs": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "fetch_tags": true,
                      "metrics_polling_interval": 300,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "efs": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "fetch_tags": true,
                      "metrics_polling_interval": 300,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "elasticache": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "fetch_tags": true,
                      "metrics_polling_interval": 300,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "elasticbeanstalk": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "fetch_extended_inventory": true,
                      "fetch_tags": true,
                      "metrics_polling_interval": 300,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "elasticsearch": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "fetch_nodes": true,
                      "metrics_polling_interval": 300,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "elb": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "fetch_extended_inventory": true,
                      "fetch_tags": true,
                      "metrics_polling_interval": 300
                    }
                  ],
                  "emr": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "fetch_tags": true,
                      "metrics_polling_interval": 300,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "health": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "iam": [
                    {
                      "metrics_polling_interval": 300,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "iot": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "kinesis": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "fetch_shards": true,
                      "fetch_tags": true,
                      "metrics_polling_interval": 900,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "kinesis_firehose": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "lambda": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "fetch_tags": true,
                      "metrics_polling_interval": 300,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "linked_account_id": "${newrelic_cloud_aws_link_account.foo.id}",
                  "rds": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "fetch_tags": true,
                      "metrics_polling_interval": 300,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "redshift": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "route53": [
                    {
                      "fetch_extended_inventory": true,
                      "metrics_polling_interval": 300
                    }
                  ],
                  "s3": [
                    {
                      "metrics_polling_interval": 3600
                    }
                  ],
                  "ses": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ],
                  "sns": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "fetch_extended_inventory": true,
                      "metrics_polling_interval": 300
                    }
                  ],
                  "sqs": [
                    {
                      "aws_regions": [
                        "us-east-1"
                      ],
                      "fetch_extended_inventory": true,
                      "fetch_tags": true,
                      "metrics_polling_interval": 300,
                      "queue_prefixes": [
                        "queue prefix"
                      ],
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "trusted_advisor": [
                    {
                      "metrics_polling_interval": 3600
                    }
                  ],
                  "vpc": [
                    {
                      "aws_regions": [
                        "us-east-1",
                        "us-east-2"
                      ],
                      "fetch_nat_gateway": true,
                      "fetch_vpn": false,
                      "metrics_polling_interval": 900,
                      "tag_key": "tag key",
                      "tag_value": "tag value"
                    }
                  ],
                  "x_ray": [
                    {
                      "aws_regions": [
                        "us-east-1",
                        "us-east-2"
                      ],
                      "metrics_polling_interval": 300
                    }
                  ]
                }
              references:
                linked_account_id: newrelic_cloud_aws_link_account.foo.id
              dependencies:
                newrelic_cloud_aws_link_account.foo: |-
                    {
                      "arn": "${aws_iam_role.newrelic_aws_role.arn}",
                      "metric_collection_mode": "PULL",
                      "name": "foo"
                    }
        argumentDocs:
            account_id: '- (Optional) The New Relic account ID to operate on.  This allows the user to override the account_id attribute set on the provider. Defaults to the environment variable NEW_RELIC_ACCOUNT_ID.'
            aws_regions: '- (Optional) Specify each AWS region that includes the resources that you want to monitor.'
            id: '- The ID of the AWS linked account.'
            integration.auto_scaling: ',aws_app_sync,aws_athena,aws_cognito,aws_connect,aws_direct_connect,aws_fsx,aws_glue,aws_kinesis_analytics,aws_media_convert,aws_media_package_vod,aws_mq,aws_msk,aws_neptune,aws_qldb,aws_route53resolver,aws_states,aws_transit_gateway,aws_waf,aws_wafv2,iot,kinesis_firehose and ses.'
            integration.metrics_polling_interval: '- (Optional) The data polling interval in seconds.'
            linked_account_id: '- (Required) The ID of the linked AWS account in New Relic.'
            metrics_polling_interval.alb: '- (Optional) AWS ALB. See Integration blocks below for details.'
            metrics_polling_interval.api_gateway: '- (Optional) AWS API Gateway. See Integration blocks below for details.'
            metrics_polling_interval.auto_scaling: '- (Optional) AWS Auto Scaling. See Integration blocks below for details.'
            metrics_polling_interval.aws_app_sync: '- (Optional) AWS AppSync. See Integration blocks below for details.'
            metrics_polling_interval.aws_athena: '- (Optional) AWS Athena. See Integration blocks below for details.'
            metrics_polling_interval.aws_cognito: '- (Optional) AWS Cognito. See Integration blocks below for details.'
            metrics_polling_interval.aws_connect: '- (Optional) AWS Connect. See Integration blocks below for details.'
            metrics_polling_interval.aws_direct_connect: '- (Optional) AWS Direct Connect. See Integration blocks below for details.'
            metrics_polling_interval.aws_fsx: '- (Optional) AWS FSx. See Integration blocks below for details.'
            metrics_polling_interval.aws_glue: '- (Optional) AWS Glue. See Integration blocks below for details.'
            metrics_polling_interval.aws_kinesis_analytics: '- (Optional) AWS Kinesis Data Analytics. See Integration blocks below for details.'
            metrics_polling_interval.aws_media_convert: '- (Optional) AWS Media Convert. See Integration blocks below for details.'
            metrics_polling_interval.aws_media_package_vod: '- (Optional) AWS MediaPackage VOD. See Integration blocks below for details.'
            metrics_polling_interval.aws_mq: '- (Optional) AWS MQ. See Integration blocks below for details.'
            metrics_polling_interval.aws_msk: '- (Optional) Amazon Managed Kafka (MSK). See Integration blocks below for details.'
            metrics_polling_interval.aws_neptune: '- (Optional) AWS Neptune. See Integration blocks below for details.'
            metrics_polling_interval.aws_qldb: '- (Optional) Amazon QLDB. See Integration blocks below for details.'
            metrics_polling_interval.aws_route53resolver: '- (Optional) AWS Route53 Resolver. See Integration blocks below for details.'
            metrics_polling_interval.aws_transit_gateway: '- (Optional) Amazon Transit Gateway. See Integration blocks below for details.'
            metrics_polling_interval.aws_waf: '- (Optional) AWS WAF. See Integration blocks below for details.'
            metrics_polling_interval.aws_wafv2: '- (Optional) AWS WAF V2. See Integration blocks below for details.'
            metrics_polling_interval.billing: '- (Optional) AWS Billing. See Integration blocks below for details.'
            metrics_polling_interval.cloudfront: '- (Optional) AWS CloudFront. See Integration blocks below for details.'
            metrics_polling_interval.cloudtrail: '- (Optional) AWS CloudTrail. See Integration blocks below for details.'
            metrics_polling_interval.doc_db: '- (Optional) AWS DocumentDB. See Integration blocks below for details.'
            metrics_polling_interval.dynamodb: '- (Optional) Amazon DynamoDB. See Integration blocks below for details.'
            metrics_polling_interval.ebs: '- (Optional) Amazon EBS. See Integration blocks below for details.'
            metrics_polling_interval.ec2: '- (Optional) Amazon EC2. See Integration blocks below for details.'
            metrics_polling_interval.ecs: '- (Optional) Amazon ECS. See Integration blocks below for details.'
            metrics_polling_interval.efs: '- (Optional) Amazon EFS. See Integration blocks below for details.'
            metrics_polling_interval.elasticache: '- (Optional) AWS ElastiCache. See Integration blocks below for details.'
            metrics_polling_interval.elasticbeanstalk: '- (Optional) AWS Elastic Beanstalk. See Integration blocks below for details.'
            metrics_polling_interval.elasticsearch: '- (Optional) AWS ElasticSearch. See Integration blocks below for details.'
            metrics_polling_interval.elb: '- (Optional) AWS ELB (Classic). See Integration blocks below for details.'
            metrics_polling_interval.emr: '- (Optional) AWS EMR. See Integration blocks below for details.'
            metrics_polling_interval.health: '- (Optional) AWS Health. See Integration blocks below for details.'
            metrics_polling_interval.iam: '- (Optional) AWS IAM. See Integration blocks below for details.'
            metrics_polling_interval.iot: '- (Optional) AWS IoT. See Integration blocks below for details.'
            metrics_polling_interval.kinesis: '- (Optional) AWS Kinesis. See Integration blocks below for details.'
            metrics_polling_interval.kinesis_firehose: '- (Optional) Amazon Kinesis Data Firehose. See Integration blocks below for details.'
            metrics_polling_interval.lambda: '- (Optional) AWS Lambda. See Integration blocks below for details.'
            metrics_polling_interval.rds: '- (Optional) Amazon RDS. See Integration blocks below for details.'
            metrics_polling_interval.redshift: '- (Optional) Amazon Redshift. See Integration blocks below for details.'
            metrics_polling_interval.route53: '- (Optional) Amazon Route 53. See Integration blocks below for details.'
            metrics_polling_interval.s3: '- (Optional) Amazon S3. See Integration blocks below for details.'
            metrics_polling_interval.ses: '- (Optional) Amazon SES. See Integration blocks below for details.'
            metrics_polling_interval.sns: '- (Optional) AWS SNS. See Integration blocks below for details.'
            metrics_polling_interval.sqs: '- (Optional) AWS SQS. See Integration blocks below for details.'
            metrics_polling_interval.trusted_advisor: '- (Optional) AWS Trusted Advisor. See Integration blocks below for details.'
            metrics_polling_interval.x_ray: |-
                - (Optional) AWS X-Ray. See Integration blocks below for details.
                x
        importStatements: []
    newrelic_cloud_aws_link_account:
        subCategory: ""
        description: Link an AWS account to New Relic.
        name: newrelic_cloud_aws_link_account
        title: newrelic_cloud_aws_link_account
        examples:
            - name: foo
              manifest: |-
                {
                  "arn": "arn:aws:service:region:account-id:resource-id",
                  "metric_collection_mode": "PUSH",
                  "name": "account name"
                }
        argumentDocs:
            account_id: '- (Optional) The New Relic account ID to operate on.  This allows the user to override the account_id attribute set on the provider. Defaults to the environment variable NEW_RELIC_ACCOUNT_ID.'
            arn: '- (Required) The Amazon Resource Name (ARN) of the IAM role.'
            id: '- The ID of the AWS linked account.'
            metric_collection_mode: '- (Optional) How metrics will be collected. Use PUSH for a metric stream or PULL to integrate with individual services.'
            name: '- (Required) - The linked account name'
        importStatements: []
    newrelic_cloud_azure_integrations:
        subCategory: ""
        description: Integrate Azure services with New Relic.
        name: newrelic_cloud_azure_integrations
        title: newrelic_cloud_azure_integrations
        examples:
            - name: foo
              manifest: |-
                {
                  "account_id": "The New Relic account ID",
                  "api_management": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "app_gateway": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "app_service": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "containers": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "cosmos_db": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "cost_management": [
                    {
                      "metrics_polling_interval": 3600,
                      "tag_keys": [
                        "tag_keys"
                      ]
                    }
                  ],
                  "data_factory": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "event_hub": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "express_route": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "firewalls": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "front_door": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "functions": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "key_vault": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "linked_account_id": "${newrelic_cloud_azure_link_account.foo.id}",
                  "load_balancer": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "logic_apps": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "machine_learning": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "maria_db": [
                    {
                      "metrics_polling_interval": 3600,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "monitor": [
                    {
                      "enabled": true,
                      "exclude_tags": [
                        "env:staging",
                        "env:testing"
                      ],
                      "include_tags": [
                        "env:production"
                      ],
                      "metrics_polling_interval": 60,
                      "resource_groups": [
                        "resource_groups"
                      ],
                      "resource_types": [
                        "microsoft.datashare/accounts"
                      ]
                    }
                  ],
                  "mysql": [
                    {
                      "metrics_polling_interval": 3600,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "mysql_flexible": [
                    {
                      "metrics_polling_interval": 3600,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "postgresql": [
                    {
                      "metrics_polling_interval": 3600,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "postgresql_flexible": [
                    {
                      "metrics_polling_interval": 3600,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "power_bi_dedicated": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "redis_cache": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "service_bus": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "sql": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "sql_managed": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "storage": [
                    {
                      "metrics_polling_interval": 1800,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "virtual_machine": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "virtual_networks": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "vms": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ],
                  "vpn_gateway": [
                    {
                      "metrics_polling_interval": 300,
                      "resource_groups": [
                        "resource_groups"
                      ]
                    }
                  ]
                }
              references:
                linked_account_id: newrelic_cloud_azure_link_account.foo.id
              dependencies:
                newrelic_cloud_azure_link_account.foo: |-
                    {
                      "account_id": "The New Relic account ID where you want to link the Azure account",
                      "application_id": "ID of the application",
                      "client_secret": "Secret value of client's Azure account",
                      "name": "Name of the linked account",
                      "subscription_id": "Subscription ID of Azure",
                      "tenant_id": "Tenant ID of the Azure"
                    }
        argumentDocs:
            account_id: '- (Optional) The New Relic account ID to operate on.  This allows the user to override the account_id attribute set on the provider. Defaults to the environment variable NEW_RELIC_ACCOUNT_ID.'
            enabled: '- (Optional) A boolean value, that specifies if the integration needs to be active. Defaults to ''true'' if not specified.'
            exclude_tags: '- (Optional) A list of resource tags associated with the resources that need to be excluded from monitoring.'
            id: '- The ID of the linked Azure account in New Relic.'
            include_tags: '- (Optional) A list of resource tags associated with the resources that need to be monitored, in a "key:value" format. If this is not specified, all resources will be monitored.'
            integration.metrics_polling_interval: '- (Optional) The data polling interval in seconds.'
            integration.resource_groups: '- (Optional) Specify each Resource group associated with the resources that you want to monitor. Filter values are case-sensitive'
            linked_account_id: '- (Required) The ID of the linked Azure account in New Relic.'
            metrics_polling_interval.api_management: '- (Optional) Azure API Management. See Integration blocks below for details.'
            metrics_polling_interval.app_gateway: '- (Optional) Azure App Gateway. See Integration blocks below for details.'
            metrics_polling_interval.app_service: '- (Optional) Azure App Service. See Integration blocks below for details.'
            metrics_polling_interval.containers: '- (Optional) Azure Containers. See Integration blocks below for details.'
            metrics_polling_interval.cosmos_db: '- (Optional) Azure CosmosDB. See Integration blocks below for details.'
            metrics_polling_interval.cost_management: '- (Optional) Azure Cost Management. See Integration blocks below for details.'
            metrics_polling_interval.data_factory: '- (Optional) Azure Data Factory. See Integration blocks below for details.'
            metrics_polling_interval.event_hub: '- (Optional) Azure Event Hub. See Integration blocks below for details.'
            metrics_polling_interval.express_route: '- (Optional) Azure Express Route. See Integration blocks below for details.'
            metrics_polling_interval.firewalls: '- (Optional) Azure Firewalls. See Integration blocks below for details.'
            metrics_polling_interval.front_door: '- (Optional) Azure Front Door. See Integration blocks below for details.'
            metrics_polling_interval.functions: '- (Optional) Azure Functions. See Integration blocks below for details.'
            metrics_polling_interval.key_vault: '- (Optional) Azure Key Vault. See Integration blocks below for details.'
            metrics_polling_interval.load_balancer: '- (Optional) Azure Load Balancer. See Integration blocks below for details.'
            metrics_polling_interval.logic_apps: '- (Optional) Azure Logic Apps. See Integration blocks below for details.'
            metrics_polling_interval.machine_learning: '- (Optional) Azure Machine Learning. See Integration blocks below for details.'
            metrics_polling_interval.maria_db: '- (Optional) Azure MariaDB. See Integration blocks below for details.'
            metrics_polling_interval.monitor: '- (Optional) Azure Monitor. See Integration blocks below for details.'
            metrics_polling_interval.mysql: '- (Optional) Azure MySQL. See Integration blocks below for details.'
            metrics_polling_interval.mysql_flexible: '- (Optional) Azure MySQL Flexible Server. See Integration blocks below for details.'
            metrics_polling_interval.postgresql: '- (Optional) Azure PostgreSQL. See Integration blocks below for details.'
            metrics_polling_interval.postgresql_flexible: '- (Optional) Azure PostgreSQL Flexible Server. See Integration blocks below for details.'
            metrics_polling_interval.power_bi_dedicated: '- (Optional) Azure Power BI Dedicated. See Integration blocks below for details.'
            metrics_polling_interval.redis_cache: '- (Optional) Azure Redis Cache. See Integration blocks below for details.'
            metrics_polling_interval.service_bus: '- (Optional) Azure Service Bus. See Integration blocks below for details.'
            metrics_polling_interval.sql: '- (Optional) Azure SQL. See Integration blocks below for details.'
            metrics_polling_interval.sql_managed: '- (Optional) Azure SQL Managed. See Integration blocks below for details.'
            metrics_polling_interval.storage: '- (Optional) for Azure Storage. See Integration blocks below for details.'
            metrics_polling_interval.virtual_machine: '- (Optional) Azure Virtual machine. See Integration blocks below for details.'
            metrics_polling_interval.virtual_networks: '- (Optional) for Azure Virtual networks. See Integration blocks below for details.'
            metrics_polling_interval.vms: '- (Optional) Azure VMs. See Integration blocks below for details.'
            metrics_polling_interval.vpn_gateway: '- (Optional) Azure VPN Gateway. See Integration blocks below for details.'
            resource_types: '- (Optional) A list of Azure resource types that need to be monitored.'
            tag_keys: '- (Optional) Specify a Tag key associated with the resources that you want to monitor. Filter values are case-sensitive.'
        importStatements: []
    newrelic_cloud_azure_link_account:
        subCategory: ""
        description: Link an Azure account to New Relic.
        name: newrelic_cloud_azure_link_account
        title: newrelic_cloud_azure_link_account
        examples:
            - name: foo
              manifest: |-
                {
                  "account_id": "The New Relic account ID where you want to link the Azure account",
                  "application_id": "ID of the application",
                  "client_secret": "Secret value of client's Azure account",
                  "name": "Name of the linked account",
                  "subscription_id": "Subscription ID of Azure",
                  "tenant_id": "Tenant ID of the Azure"
                }
        argumentDocs:
            account_id: '- (Required) - Account ID of the New Relic.'
            application_id: '- (Required) - Application ID of the App.'
            client_secret: '- (Required) - Secret Value of the client.'
            id: '- The ID of the linked Azure account in New Relic.'
            name: '- (Required) - The name of the application in New Relic APM.'
            subscription_id: '- (Required) - Subscription ID of the Azure cloud account.'
            tenant_id: '- (Required) - Tenant ID of the Azure cloud account.'
        importStatements: []
    newrelic_cloud_gcp_integrations:
        subCategory: ""
        description: Integrate GCP services with New Relic.
        name: newrelic_cloud_gcp_integrations
        title: newrelic_cloud_gcp_integrations
        examples:
            - name: foo1
              manifest: |-
                {
                  "app_engine": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "big_query": [
                    {
                      "fetch_tags": true,
                      "metrics_polling_interval": 300
                    }
                  ],
                  "big_table": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "composer": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "data_flow": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "data_proc": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "data_store": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "fire_base_database": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "fire_base_hosting": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "fire_base_storage": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "fire_store": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "functions": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "interconnect": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "kubernetes": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "linked_account_id": "${newrelic_cloud_gcp_link_account.foo.id}",
                  "load_balancing": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "mem_cache": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "pub_sub": [
                    {
                      "fetch_tags": true,
                      "metrics_polling_interval": 300
                    }
                  ],
                  "redis": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "router": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "run": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "spanner": [
                    {
                      "fetch_tags": true,
                      "metrics_polling_interval": 300
                    }
                  ],
                  "sql": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "storage": [
                    {
                      "fetch_tags": true,
                      "metrics_polling_interval": 300
                    }
                  ],
                  "virtual_machines": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ],
                  "vpc_access": [
                    {
                      "metrics_polling_interval": 300
                    }
                  ]
                }
              references:
                linked_account_id: newrelic_cloud_gcp_link_account.foo.id
              dependencies:
                newrelic_cloud_gcp_link_account.foo: |-
                    {
                      "name": "example",
                      "project_id": "\u003cYour GCP project ID\u003e"
                    }
        argumentDocs:
            account_id: '- (Optional) The New Relic account ID to operate on.  This allows the user to override the account_id attribute set on the provider. Defaults to the environment variable NEW_RELIC_ACCOUNT_ID.'
            fetch_tags: '- (Optional) Specify if labels and the extended inventory should be collected. May affect total data collection time and contribute to the Cloud provider API rate limit.'
            id: '- The ID of the GCP linked account.'
            integration.metrics_polling_interval: '- (Optional) The data polling interval in seconds.'
            integration.storage: ""
            linked_account_id: '- (Required) The ID of the linked GCP account in New Relic.'
            metrics_polling_interval.alloy_db: '- (Optional) Alloy DB integration. See Integration blocks below for details.'
            metrics_polling_interval.app_engine: '- (Optional) App Engine integration. See Integration blocks below for details.'
            metrics_polling_interval.big_query: '- (Optional) Biq Query integration. See Integration blocks below for details.'
            metrics_polling_interval.big_table: '- (Optional) Big Table. See Integration blocks below for details.'
            metrics_polling_interval.composer: '- (Optional) Composer integration. See Integration blocks below for details.'
            metrics_polling_interval.data_flow: '- (Optional) Data Flow integration. See Integration blocks below for details.'
            metrics_polling_interval.data_proc: '- (Optional) Data Proc integration. See Integration blocks below for details.'
            metrics_polling_interval.data_store: '- (Optional) Data Store integration. See Integration blocks below for details.'
            metrics_polling_interval.fire_base_database: '- (Optional) Fire Base Database integration. See Integration blocks below for details.'
            metrics_polling_interval.fire_base_hosting: '- (Optional) Fire Base Hosting integration. See Integration blocks below for details.'
            metrics_polling_interval.fire_base_storage: '- (Optional) Fire Base Storage integration. See Integration blocks below for details.'
            metrics_polling_interval.fire_store: '- (Optional) Fire Store integration. See Integration blocks below for details.'
            metrics_polling_interval.functions: '- (Optional) Functions integration. See Integration blocks below for details.'
            metrics_polling_interval.interconnect: '- (Optional) Interconnect integration. See Integration blocks below for details.'
            metrics_polling_interval.kubernetes: '- (Optional) Kubernetes integration. See Integration blocks below for details.'
            metrics_polling_interval.load_balancing: '- (Optional) Load Balancing integration. See Integration blocks below for details.'
            metrics_polling_interval.mem_cache: '- (Optional) Mem cache integration. See Integration blocks below for details.'
            metrics_polling_interval.pub_sub: '- (Optional) Pub/Sub integration. See Integration blocks below for details.'
            metrics_polling_interval.redis: '- (Optional) Redis integration. See Integration blocks below for details.'
            metrics_polling_interval.router: '- (Optional) Router integration. See Integration blocks below for details.'
            metrics_polling_interval.run: '- (Optional) Run integration. See Integration blocks below for details.'
            metrics_polling_interval.spanner: '- (Optional) Spanner integration. See Integration blocks below for details.'
            metrics_polling_interval.sql: '- (Optional) SQL integration. See Integration blocks below for details.'
            metrics_polling_interval.storage: '- (Optional) Storage integration. See Integration blocks below for details.'
            metrics_polling_interval.virtual_machines: '- (Optional) Virtual machines integration. See Integration blocks below for details.'
            metrics_polling_interval.vpc_access: '- (Optional) VPC Access integration. See Integration blocks below for details.'
        importStatements: []
    newrelic_cloud_gcp_link_account:
        subCategory: ""
        description: Link a GCP account to New Relic.
        name: newrelic_cloud_gcp_link_account
        title: newrelic_cloud_gcp_link_account
        examples:
            - name: foo
              manifest: |-
                {
                  "account_id": "account id of newrelic account",
                  "name": "account name",
                  "project_id": "id of the Project"
                }
        argumentDocs:
            account_id: '- (Optional) - Account ID of the New Relic account.'
            id: '- The id of the GCP linked account.'
            name: '- (Required) - The name of the GCP account in New Relic.'
            project_id: '- (Required) - Project ID of the GCP account.'
        importStatements: []
    newrelic_data_partition_rule:
        subCategory: ""
        description: Create and manage Data partition rule.
        name: newrelic_data_partition_rule
        title: newrelic_data_partition_rule
        examples:
            - name: foo
              manifest: |-
                {
                  "description": "description",
                  "enabled": true,
                  "nrql": "logtype='node'",
                  "retention_policy": "STANDARD",
                  "target_data_partition": "Log_name"
                }
        argumentDocs:
            account_id: '- (Optional) The account id associated with the data partition rule.'
            deleted: '- Whether or not this data partition rule is deleted. Deleting a data partition rule does not delete the already persisted data. This data will be retained for a given period of time specified in the retention policy field.'
            description: '- (Optional) The description of the data partition rule.'
            enabled: '- (Required) Whether or not this data partition rule is enabled.'
            id: '- The id of the data partition rule.'
            nrql: '- (Required) The NRQL to match events for this data partition rule. Logs matching this criteria will be routed to the specified data partition.'
            retention_policy: '- (Required) The retention policy of the data partition data. Valid values are SECONDARY and STANDARD.'
            target_data_partition: '- (Required) The name of the data partition where logs will be allocated once the rule is enabled.'
        importStatements: []
    newrelic_entity_tags:
        subCategory: ""
        description: Create and manage tags for a New Relic One entity.
        name: newrelic_entity_tags
        title: newrelic_entity_tags
        examples:
            - name: foo
              manifest: |-
                {
                  "guid": "${data.newrelic_entity.foo.guid}",
                  "tag": [
                    {
                      "key": "my-key",
                      "values": [
                        "my-value",
                        "my-other-value"
                      ]
                    },
                    {
                      "key": "my-key-2",
                      "values": [
                        "my-value-2"
                      ]
                    }
                  ]
                }
              references:
                guid: data.newrelic_entity.foo.guid
            - name: foo
              manifest: |-
                {
                  "dynamic": {
                    "tag": [
                      {
                        "content": [
                          {
                            "key": "${tag.key}",
                            "values": [
                              "${tag.value}"
                            ]
                          }
                        ],
                        "for_each": "${local.custom_tags}"
                      }
                    ]
                  },
                  "for_each": "${local.apps}",
                  "guid": "${data.newrelic_entity.foo[each.key].guid}"
                }
              references:
                dynamic.content.key: tag.key
                dynamic.for_each: local.custom_tags
                for_each: local.apps
        argumentDocs:
            guid: '- (Required) The guid of the entity to tag.'
            tag: '- (Optional) A nested block that describes an entity tag. See Nested tag blocks below for details.'
            tag.key: '- (Required) The tag key.'
            tag.values: '- (Required) The tag values.'
        importStatements: []
    newrelic_events_to_metrics_rule:
        subCategory: ""
        description: Create and manage tags for a New Relic Events to Metrics rule.
        name: newrelic_events_to_metrics_rule
        title: newrelic_events_to_metrics_rule
        examples:
            - name: foo
              manifest: |-
                {
                  "account_id": 12345,
                  "description": "Example description",
                  "name": "Example events to metrics rule",
                  "nrql": "SELECT uniqueCount(account_id) AS ``Transaction.account_id`` FROM Transaction FACET appName, name"
                }
        argumentDocs:
            account_id: '- (Required) Account with the event and where the metrics will be put.'
            description: '- (Optional) Provides additional information about the rule.'
            enabled: '- (Optional) True means this rule is enabled. False means the rule is currently not creating metrics.'
            name: '- (Required) The name of the rule. This must be unique within an account.'
            nrql: '- (Required) Explains how to create metrics from events.'
            rule_id: '- The id, uniquely identifying the rule.'
        importStatements: []
    newrelic_group:
        subCategory: ""
        description: Create and manage groups in New Relic.
        name: newrelic_group
        title: newrelic_group'
        examples:
            - name: foo
              manifest: |-
                {
                  "authentication_domain_id": "${data.newrelic_authentication_domain.foo.id}",
                  "name": "Test Group",
                  "user_ids": [
                    "0001112222",
                    "2221110000"
                  ]
                }
              references:
                authentication_domain_id: data.newrelic_authentication_domain.foo.id
            - name: foo
              manifest: |-
                {
                  "authentication_domain_id": "${data.newrelic_authentication_domain.foo.id}",
                  "name": "Test Group",
                  "user_ids": [
                    "${newrelic_user.foo.id}",
                    "${newrelic_user.bar.id}"
                  ]
                }
              references:
                authentication_domain_id: data.newrelic_authentication_domain.foo.id
              dependencies:
                newrelic_user.bar: |-
                    {
                      "authentication_domain_id": "${data.newrelic_authentication_domain.foo.id}",
                      "email_id": "test_user_two@test.com",
                      "name": "Test User Two",
                      "user_type": "BASIC_USER_TIER"
                    }
                newrelic_user.foo: |-
                    {
                      "authentication_domain_id": "${data.newrelic_authentication_domain.foo.id}",
                      "email_id": "test_user_one@test.com",
                      "name": "Test User One",
                      "user_type": "CORE_USER_TIER"
                    }
            - name: foo
              manifest: |-
                {
                  "authentication_domain_id": "${data.newrelic_authentication_domain.foo.id}",
                  "name": "Test Group",
                  "user_ids": [
                    "${data.newrelic_user.foo.id}",
                    "${data.newrelic_user.bar.id}"
                  ]
                }
              references:
                authentication_domain_id: data.newrelic_authentication_domain.foo.id
        argumentDocs:
            authentication_domain_id: '- (Required) The ID of the authentication domain to which the group to be created would belong.'
            id: '- The ID of the created group.'
            name: '- (Required) The name of the group to be created.'
            user_ids: '- (Optional) A list of IDs of users to be included in the group to be created.'
        importStatements:
            - $ terraform import newrelic_group.foo <group_id>
    newrelic_infra_alert_condition:
        subCategory: ""
        description: Create and manage an Infrastructure alert condition for a policy in New Relic.
        name: newrelic_infra_alert_condition
        title: newrelic_infra_alert_condition
        examples:
            - name: high_disk_usage
              manifest: |-
                {
                  "comparison": "above",
                  "critical": [
                    {
                      "duration": 25,
                      "time_function": "all",
                      "value": 90
                    }
                  ],
                  "description": "Warning if disk usage goes above 80% and critical alert if goes above 90%",
                  "event": "StorageSample",
                  "name": "High disk usage",
                  "policy_id": "${newrelic_alert_policy.foo.id}",
                  "select": "diskUsedPercent",
                  "type": "infra_metric",
                  "warning": [
                    {
                      "duration": 10,
                      "time_function": "all",
                      "value": 80
                    }
                  ],
                  "where": "(hostname LIKE '%frontend%')"
                }
              references:
                policy_id: newrelic_alert_policy.foo.id
              dependencies:
                newrelic_alert_policy.foo: |-
                    {
                      "name": "foo"
                    }
            - name: high_db_conn_count
              manifest: |-
                {
                  "comparison": "above",
                  "critical": [
                    {
                      "duration": 25,
                      "time_function": "all",
                      "value": 90
                    }
                  ],
                  "description": "Critical alert when the number of database connections goes above 90",
                  "event": "DatastoreSample",
                  "integration_provider": "RdsDbInstance",
                  "name": "High database connection count",
                  "policy_id": "${newrelic_alert_policy.foo.id}",
                  "select": "provider.databaseConnections.Average",
                  "type": "infra_metric",
                  "where": "(hostname LIKE '%db%')"
                }
              references:
                policy_id: newrelic_alert_policy.foo.id
              dependencies:
                newrelic_alert_policy.foo: |-
                    {
                      "name": "foo"
                    }
            - name: process_not_running
              manifest: |-
                {
                  "comparison": "equal",
                  "critical": [
                    {
                      "duration": 5,
                      "value": 0
                    }
                  ],
                  "description": "Critical alert when ruby isn't running",
                  "name": "Process not running (/usr/bin/ruby)",
                  "policy_id": "${newrelic_alert_policy.foo.id}",
                  "process_where": "commandName = '/usr/bin/ruby'",
                  "type": "infra_process_running",
                  "where": "hostname = 'web01'"
                }
              references:
                policy_id: newrelic_alert_policy.foo.id
              dependencies:
                newrelic_alert_policy.foo: |-
                    {
                      "name": "foo"
                    }
            - name: host_not_reporting
              manifest: |-
                {
                  "critical": [
                    {
                      "duration": 5
                    }
                  ],
                  "description": "Critical alert when the host is not reporting",
                  "name": "Host not reporting",
                  "policy_id": "${newrelic_alert_policy.foo.id}",
                  "type": "infra_host_not_reporting",
                  "where": "(hostname LIKE '%frontend%')"
                }
              references:
                policy_id: newrelic_alert_policy.foo.id
              dependencies:
                newrelic_alert_policy.foo: |-
                    {
                      "name": "foo"
                    }
            - name: foo
              manifest: |-
                {
                  "comparison": "above",
                  "critical": [
                    {
                      "duration": 25,
                      "time_function": "all",
                      "value": 90
                    }
                  ],
                  "description": "Warning if disk usage goes above 80% and critical alert if goes above 90%",
                  "event": "StorageSample",
                  "name": "foo infra condition",
                  "policy_id": "${newrelic_alert_policy.foo.id}",
                  "select": "diskUsedPercent",
                  "type": "infra_metric",
                  "warning": [
                    {
                      "duration": 10,
                      "time_function": "all",
                      "value": 80
                    }
                  ],
                  "where": "(hostname LIKE '%frontend%')"
                }
              references:
                policy_id: newrelic_alert_policy.foo.id
              dependencies:
                newrelic_alert_policy.foo: |-
                    {
                      "name": "foo policy"
                    }
                newrelic_entity_tags.my_condition_entity_tags: |-
                    {
                      "guid": "${newrelic_infra_alert_condition.foo.entity_guid}",
                      "tag": [
                        {
                          "key": "my-key",
                          "values": [
                            "my-value",
                            "my-other-value"
                          ]
                        },
                        {
                          "key": "my-key-2",
                          "values": [
                            "my-value-2"
                          ]
                        }
                      ]
                    }
        argumentDocs:
            comparison: '- (Required) The operator used to evaluate the threshold value.  Valid values are above, below, and equal.  Supported by the infra_metric and infra_process_running condition types.'
            created_at: '- The timestamp the alert condition was created.'
            critical: '- (Required) Identifies the threshold parameters for opening a critical alert incident. See Thresholds below for details.'
            description: '- (Optional) The description of the Infrastructure alert condition.'
            duration: '- (Required) Identifies the number of minutes the threshold must be passed or met for the alert to trigger. Threshold durations must be between 1 and 60 minutes (inclusive).'
            enabled: '- (Optional) Whether the condition is turned on or off.  Valid values are true and false.  Defaults to true.'
            entity_guid: '- The unique entity identifier of the condition in New Relic.'
            event: '- (Required) The metric event; for example, SystemSample or StorageSample.  Supported by the infra_metric condition type.'
            id: '- The ID of the Infrastructure alert condition.'
            integration_provider: '- (Optional) For alerts on integrations, use this instead of event.  Supported by the infra_metric condition type.'
            name: '- (Required) The Infrastructure alert condition''s name.'
            policy_id: '- (Required) The ID of the alert policy where this condition should be used.'
            process_where: '- (Optional) Any filters applied to processes; for example: commandName = ''java''.  Required by the infra_process_running condition type.'
            runbook_url: '- (Optional) Runbook URL to display in notifications.'
            select: '- (Required) The attribute name to identify the metric being targeted; for example, cpuPercent, diskFreePercent, or memoryResidentSizeBytes.  The underlying API will automatically populate this value for Infrastructure integrations (for example diskFreePercent), so make sure to explicitly include this value to avoid diff issues.  Supported by the infra_metric condition type.'
            time_function: '- (Optional) Indicates if the condition needs to be sustained or to just break the threshold once; all or any. Supported by the infra_metric alert condition type.'
            type: '- (Required) The type of Infrastructure alert condition.  Valid values are  infra_process_running, infra_metric, and infra_host_not_reporting.'
            updated_at: '- The timestamp the alert condition was last updated.'
            value: '- (Optional) Threshold value, computed against the comparison operator. Supported by infra_metric and infra_process_running alert condition types.'
            violation_close_timer: '- (Optional) Determines how much time will pass (in hours) before an incident is automatically closed. Valid values are 1 2 4 8 12 24 48 72. Defaults to 24. If 0 is provided, default of 24 is used and will have configuration drift during the apply phase until a valid value is provided.'
            warning: '- (Optional) Identifies the threshold parameters for opening a warning alert incident. See Thresholds below for details.'
            where: '- (Optional) If applicable, this identifies any Infrastructure host filters used; for example: hostname LIKE ''%cassandra%''.'
        importStatements: []
    newrelic_insights_event:
        subCategory: ""
        description: Create one or more Insights events.
        name: newrelic_insights_event
        title: newrelic_insights_event
        examples:
            - name: foo
              manifest: |-
                {
                  "event": [
                    {
                      "attribute": [
                        {
                          "key": "a_string_attribute",
                          "value": "a string"
                        },
                        {
                          "key": "an_integer_attribute",
                          "type": "int",
                          "value": 42
                        },
                        {
                          "key": "a_float_attribute",
                          "type": "float",
                          "value": 101.1
                        }
                      ],
                      "timestamp": 1232471100,
                      "type": "MyEvent"
                    }
                  ]
                }
        argumentDocs:
            attribute: '- (Required) An attribute to include in your event payload. Multiple attribute blocks can be defined for an event. See Attributes below for details.'
            event: '- (Required) An event to insert into Insights. Multiple event blocks can be defined. See Events below for details.'
            key: '- (Required) The name of the attribute.'
            timestamp: '- (Optional) Must be a Unix epoch timestamp. You can define timestamps either in seconds or in milliseconds.'
            type: '- (Required) The event''s name. Can be a combination of alphanumeric characters, underscores, and colons.'
            value: '- (Required) The value of the attribute.'
        importStatements: []
    newrelic_log_parsing_rule:
        subCategory: ""
        description: Create and manage Log Parsing Rule.
        name: newrelic_log_parsing_rule
        title: newrelic_log_parsing_rule
        examples:
            - name: foo
              manifest: |-
                {
                  "attribute": "message",
                  "enabled": true,
                  "grok": "sampleattribute='%{NUMBER:test:int}'",
                  "lucene": "logtype:linux_messages",
                  "name": "log_parse_rule",
                  "nrql": "SELECT * FROM Log WHERE logtype = 'linux_messages'"
                }
            - name: foo
              manifest: |-
                {
                  "attribute": "message",
                  "enabled": true,
                  "grok": "${data.newrelic_test_grok_pattern.grok.grok}",
                  "lucene": "logtype:linux_messages",
                  "matched": "${data.newrelic_test_grok_pattern.grok.test_grok[0].matched}",
                  "name": "log_parse_rule",
                  "nrql": "SELECT * FROM Log WHERE logtype = 'linux_messages'"
                }
              references:
                grok: data.newrelic_test_grok_pattern.grok.grok
                matched: data.newrelic_test_grok_pattern.grok.test_grok[0].matched
        argumentDocs:
            account_id: '- (Optional) The account id associated with the obfuscation rule.'
            enabled: '- (Required) Whether the rule should be applied or not to incoming data.'
            grok: '- (Required) The Grok of what to parse.'
            id: '- The id of the log parsing rule.'
            lucene: '- (Required) The Lucene to match events to the parsing rule.'
            matched: '- (Optional) Whether the Grok pattern matched.'
            name: '- (Required) Name of rule.'
            nrql: '- (Required) The NRQL to match events to the parsing rule.'
        importStatements: []
    newrelic_monitor_downtime:
        subCategory: ""
        description: Create and manage Monitor Downtimes in New Relic.
        name: newrelic_monitor_downtime
        title: newrelic_monitor_downtime
        examples:
            - name: foo
              manifest: |-
                {
                  "end_repeat": [
                    {
                      "on_date": "2023-12-20"
                    }
                  ],
                  "end_time": "2023-12-10T02:45:30",
                  "maintenance_days": [
                    "FRIDAY",
                    "SATURDAY"
                  ],
                  "mode": "WEEKLY",
                  "monitor_guids": [
                    "\u003cGUID-1\u003e",
                    "\u003cGUID-2\u003e"
                  ],
                  "name": "Sample Monitor Downtime",
                  "start_time": "2023-11-30T10:30:00",
                  "time_zone": "Asia/Kolkata"
                }
            - name: sample_one_time_newrelic_monitor_downtime
              manifest: |-
                {
                  "end_time": "2024-01-04T16:24:30",
                  "mode": "ONE_TIME",
                  "monitor_guids": [
                    "\u003cGUID-1\u003e",
                    "\u003cGUID-2\u003e"
                  ],
                  "name": "Sample One Time Monitor Downtime",
                  "start_time": "2023-12-04T10:15:00",
                  "time_zone": "America/Los_Angeles"
                }
            - name: sample_daily_newrelic_monitor_downtime
              manifest: |-
                {
                  "end_repeat": [
                    {
                      "on_date": "2023-12-25"
                    }
                  ],
                  "end_time": "2024-01-04T07:15:00",
                  "mode": "DAILY",
                  "monitor_guids": [
                    "\u003cGUID-1\u003e",
                    "\u003cGUID-2\u003e"
                  ],
                  "name": "Sample Daily Monitor Downtime",
                  "start_time": "2023-12-04T18:15:00",
                  "time_zone": "Asia/Kolkata"
                }
            - name: sample_weekly_newrelic_monitor_downtime
              manifest: |-
                {
                  "end_time": "2024-01-04T23:55:00",
                  "maintenance_days": [
                    "SATURDAY",
                    "SUNDAY"
                  ],
                  "mode": "WEEKLY",
                  "monitor_guids": [
                    "\u003cGUID-1\u003e",
                    "\u003cGUID-2\u003e"
                  ],
                  "name": "Sample Weekly Monitor Downtime",
                  "start_time": "2023-12-04T14:15:00",
                  "time_zone": "US/Hawaii"
                }
            - name: sample_monthly_newrelic_monitor_downtime
              manifest: |-
                {
                  "end_repeat": [
                    {
                      "on_repeat": 6
                    }
                  ],
                  "end_time": "2024-01-04T19:15:00",
                  "frequency": [
                    {
                      "days_of_week": [
                        {
                          "ordinal_day_of_month": "SECOND",
                          "week_day": "SATURDAY"
                        }
                      ]
                    }
                  ],
                  "mode": "MONTHLY",
                  "monitor_guids": [
                    "\u003cGUID-1\u003e",
                    "\u003cGUID-2\u003e"
                  ],
                  "name": "Sample Monthly Monitor Downtime",
                  "start_time": "2023-12-04T07:15:00",
                  "time_zone": "Europe/Dublin"
                }
            - name: sample_monthly_newrelic_monitor_downtime
              manifest: |-
                {
                  "end_repeat": [
                    {
                      "on_repeat": 6
                    }
                  ],
                  "end_time": "2024-01-04T19:15:00",
                  "frequency": [
                    {
                      "days_of_month": [
                        3,
                        6,
                        14,
                        23
                      ]
                    }
                  ],
                  "mode": "MONTHLY",
                  "monitor_guids": [
                    "\u003cGUID-1\u003e",
                    "\u003cGUID-2\u003e"
                  ],
                  "name": "Sample Monthly Monitor Downtime",
                  "start_time": "2023-12-04T07:15:00",
                  "time_zone": "Europe/Dublin"
                }
        argumentDocs:
            account_id: '- (Optional) The account in which the monitor downtime would be created. Defaults to the value of the environment variable NEW_RELIC_ACCOUNT_ID (or the account_id specified in the provider{}), if not specified.'
            days_of_month: '- A list of integers, specifying the days of a month on which the monthly monitor downtime would function, e.g. [3, 6, 14, 23].'
            days_of_week: '- An argument that specifies a day of a week and its occurrence in a month, on which the monthly monitor downtime would function. This argument, further, comprises the following nested arguments -'
            end_repeat: '- Options which may be used to specify when the repeat cycle of the monitor should end. This argument comprises the following nested arguments -'
            end_time: '- (Required) The time at which the monitor downtime would end operating, a timestamp specified in the ISO 8601 format without the offset/timezone - for instance, 2024-01-05T14:27:07.'
            frequency: '- Options which may be used to specify the configuration of a monthly monitor downtime. This argument comprises the following nested arguments -'
            id: '- The ID (GUID) of the monitor downtime.'
            maintenance_days: '- A list of days on which weekly monitor downtimes would function. Valid values which go into this list would be "SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY" and/or "SATURDAY".'
            mode: '- (Required) One of the four modes of operation of monitor downtimes - ONE_TIME, DAILY, MONTHLY or WEEKLY.'
            monitor_guids: '- (Optional) A list of GUIDs of synthetic monitors the monitor downtime would need to be applied to.'
            name: '- (Required) Name of the monitor downtime to be created.'
            on_date: '- The date on which the monitor downtime''s repeat cycle would need to come to an end, a string in DDDD-MM-YY format.'
            on_repeat: '- An integer that specifies the number of occurrences, after which the monitor downtime''s repeat cycle would need to come to an end.'
            ordinal_day_of_month: '- The occurrence of week_day in a month (one of "FIRST", "SECOND", "THIRD", "FOURTH", "LAST").'
            start_time: '- (Required) The time at which the monitor downtime would begin to operate, a timestamp specified in the ISO 8601 format without the offset/timezone - for instance, 2023-12-20T10:48:53.'
            timezone: '- (Required) The timezone in which timestamps start_time and end_time have been specified. Valid timezones which may be specified with this argument can be found in this list, under the column ''TZ identifier''.'
            week_day: '- A day of the week (one of "SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY" or "SATURDAY").'
        importStatements: []
    newrelic_notification_channel:
        subCategory: ""
        description: Create and manage a notification channel for notifications in New Relic.
        name: newrelic_notification_channel
        title: newrelic_notification_channel
        examples:
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "destination_id": "00b6bd1d-ac06-4d3d-bd72-49551e70f7a8",
                  "name": "webhook-example",
                  "product": "IINT",
                  "property": [
                    {
                      "key": "payload",
                      "label": "Payload Template",
                      "value": "name: {{ foo }}"
                    }
                  ],
                  "type": "WEBHOOK"
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "destination_id": "00b6bd1d-ac06-4d3d-bd72-49551e70f7a8",
                  "name": "servicenow-incident-example",
                  "product": "IINT",
                  "property": [
                    {
                      "key": "description",
                      "value": "General description"
                    },
                    {
                      "key": "short_description",
                      "value": "Short description"
                    }
                  ],
                  "type": "SERVICENOW_INCIDENTS"
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "destination_id": "00b6bd1d-ac06-4d3d-bd72-49551e70f7a8",
                  "name": "email-example",
                  "product": "IINT",
                  "property": [
                    {
                      "key": "subject",
                      "value": "New Subject Title"
                    },
                    {
                      "key": "customDetailsEmail",
                      "value": "issue id - {{issueId}}"
                    }
                  ],
                  "type": "EMAIL"
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "destination_id": "00b6bd1d-ac06-4d3d-bd72-49551e70f7a8",
                  "name": "jira-example",
                  "product": "ERROR_TRACKING",
                  "property": [
                    {
                      "key": "project",
                      "value": "10000"
                    },
                    {
                      "key": "issuetype",
                      "value": "10004"
                    },
                    {
                      "key": "description",
                      "value": "Issue ID: {{ issueId }}"
                    },
                    {
                      "key": "summary",
                      "value": "{{ annotations.title.[0] }}"
                    }
                  ],
                  "type": "JIRA_CLASSIC"
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "destination_id": "00b6bd1d-ac06-4d3d-bd72-49551e70f7a8",
                  "name": "pagerduty-account-example",
                  "product": "IINT",
                  "property": [
                    {
                      "key": "summary",
                      "value": "General summary"
                    },
                    {
                      "key": "service",
                      "label": "Service Name",
                      "value": "PTQK3FM"
                    },
                    {
                      "key": "email",
                      "value": "example@email.com"
                    },
                    {
                      "key": "customDetails",
                      "value": "{\n\"id\":{{json issueId}},\n\"IssueURL\":{{json issuePageUrl}},\n\"NewRelic priority\":{{json priority}},\n\"Total Incidents\":{{json totalIncidents}},\n\"Impacted Entities\":\"{{#each entitiesData.names}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n\"Runbook\":\"{{#each accumulations.runbookUrl}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n\"Description\":\"{{#each annotations.description}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n\"isCorrelated\":{{json isCorrelated}},\n\"Alert Policy Names\":\"{{#each accumulations.policyName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n\"Alert Condition Names\":\"{{#each accumulations.conditionName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n\"Workflow Name\":{{json workflowName}}\n}\n"
                    }
                  ],
                  "type": "PAGERDUTY_ACCOUNT_INTEGRATION"
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "destination_id": "00b6bd1d-ac06-4d3d-bd72-49551e70f7a8",
                  "name": "pagerduty-account-example",
                  "product": "IINT",
                  "property": [
                    {
                      "key": "summary",
                      "value": "General summary"
                    },
                    {
                      "key": "customDetails",
                      "value": "{\n\"id\":{{json issueId}},\n\"IssueURL\":{{json issuePageUrl}},\n\"NewRelic priority\":{{json priority}},\n\"Total Incidents\":{{json totalIncidents}},\n\"Impacted Entities\":\"{{#each entitiesData.names}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n\"Runbook\":\"{{#each accumulations.runbookUrl}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n\"Description\":\"{{#each annotations.description}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n\"isCorrelated\":{{json isCorrelated}},\n\"Alert Policy Names\":\"{{#each accumulations.policyName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n\"Alert Condition Names\":\"{{#each accumulations.conditionName}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}\",\n\"Workflow Name\":{{json workflowName}}\n}\n"
                    }
                  ],
                  "type": "PAGERDUTY_SERVICE_INTEGRATION"
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "destination_id": "00b6bd1d-ac06-4d3d-bd72-49551e70f7a8",
                  "name": "mobile-push-example",
                  "product": "IINT",
                  "type": "MOBILE_PUSH"
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "destination_id": "00b6bd1d-ac06-4d3d-bd72-49551e70f7a8",
                  "name": "event-bridge-example",
                  "product": "IINT",
                  "property": [
                    {
                      "key": "eventSource",
                      "value": "aws.partner/mydomain/myaccountid/name"
                    },
                    {
                      "key": "eventContent",
                      "value": "{ id: {{ json issueId }} }"
                    }
                  ],
                  "type": "EVENT_BRIDGE"
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "destination_id": "00b6bd1d-ac06-4d3d-bd72-49551e70f7a8",
                  "name": "slack-example",
                  "product": "IINT",
                  "property": [
                    {
                      "key": "channelId",
                      "value": "123456"
                    },
                    {
                      "key": "customDetailsSlack",
                      "value": "issue id - {{issueId}}"
                    }
                  ],
                  "type": "SLACK"
                }
            - name: webhook-channel
              manifest: |-
                {
                  "account_id": 12345678,
                  "destination_id": "${newrelic_notification_destination.webhook-destination.id}",
                  "name": "channel-webhook",
                  "product": "IINT",
                  "property": [
                    {
                      "key": "payload",
                      "label": "Payload Template",
                      "value": "{name: foo}"
                    }
                  ],
                  "type": "WEBHOOK"
                }
              references:
                destination_id: newrelic_notification_destination.webhook-destination.id
        argumentDocs:
            account_id: '- (Optional) Determines the New Relic account where the notification channel will be created. Defaults to the account associated with the API key used.'
            channelId: '- (Required) Specifies the Slack channel id. This can be found in slack browser via the url. Example - https://app.slack.com/client/<UserId>/<ChannelId>.'
            customDetails: '- (Optional) Free text that replaces the content of the alert.'
            customDetailsEmail: '- (Optional) Free text that represents the email custom details.'
            customDetailsSlack: '- (Optional) A map of key/value pairs that represents the slack custom details. Must be compatible with Slack''s blocks api.'
            description: '- (Optional) Free text that represents a description.'
            destination_id: '- (Required) The id of the destination.'
            email: '- (Required) Specifies the user email for integrating with Pagerduty.'
            headers: '- (Optional) A map of key/value pairs that represents the webhook headers.'
            id: '- The ID of the channel.'
            issuetype: '- (Required) Identifier that specifies the issue type id.'
            name: '- (Required) The name of the channel.'
            payload: '- (Required) A map of key/value pairs that represents the webhook payload.'
            product: '- (Required) The type of product.  One of: DISCUSSIONS, ERROR_TRACKING or IINT (workflows).'
            project: '- (Required) Identifier that specifies jira project id.'
            property: '- A nested block that describes a notification channel property. See Nested property blocks below for details.'
            property.EMAIL: ""
            property.JIRA_CLASSIC: ', JIRA_NEXTGEN'
            property.PAGERDUTY_ACCOUNT_INTEGRATION: ""
            property.PAGERDUTY_SERVICE_INTEGRATION: ""
            property.SERVICENOW_INCIDENTS: ""
            property.SLACK: ""
            property.WEBHOOK: ""
            property.display_value: '- (Optional) The notification property display value.'
            property.key: '- (Required) The notification property key.'
            property.label: '- (Optional) The notification property label.'
            property.value: '- (Required) The notification property value.'
            service: '- (Required) Identifier that specifies the service id to alert to.'
            short_description: '- (Optional) Free text that represents a short description.'
            subject: '- (Optional) Free text that represents the email subject title.'
            summary: '- (Required) Free text that represents the summary.'
            type: '- (Required) The type of channel.  One of: EMAIL, SERVICENOW_INCIDENTS, WEBHOOK, JIRA_CLASSIC, MOBILE_PUSH, EVENT_BRIDGE, SLACK and SLACK_COLLABORATION, PAGERDUTY_ACCOUNT_INTEGRATION or PAGERDUTY_SERVICE_INTEGRATION.'
        importStatements: []
    newrelic_notification_destination:
        subCategory: ""
        description: Create and manage a notification destination for notifications in New Relic.
        name: newrelic_notification_destination
        title: newrelic_notification_destination
        examples:
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "auth_custom_header": [
                    {
                      "key": "API_KEY",
                      "value": "test-api-key"
                    }
                  ],
                  "name": "foo",
                  "property": [
                    {
                      "key": "source",
                      "value": "terraform"
                    }
                  ],
                  "secure_url": [
                    {
                      "prefix": "https://webhook.mywebhook.com/",
                      "secure_suffix": "service_id/123456"
                    }
                  ],
                  "type": "WEBHOOK"
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "auth_basic": [
                    {
                      "password": "password",
                      "user": "username"
                    }
                  ],
                  "name": "servicenow-example",
                  "property": [
                    {
                      "key": "url",
                      "value": "https://service-now.com/"
                    },
                    {
                      "key": "two_way_integration",
                      "value": "true"
                    }
                  ],
                  "type": "SERVICE_NOW"
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "name": "email-example",
                  "property": [
                    {
                      "key": "email",
                      "value": "email@email.com,email2@email.com"
                    }
                  ],
                  "type": "EMAIL"
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "auth_basic": [
                    {
                      "password": "password",
                      "user": "example@email.com"
                    }
                  ],
                  "name": "jira-example",
                  "property": [
                    {
                      "key": "url",
                      "value": "https://example.atlassian.net"
                    }
                  ],
                  "type": "JIRA"
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "auth_token": [
                    {
                      "prefix": "Token token=",
                      "token": "10567a689d984d03c021034b22a789e2"
                    }
                  ],
                  "name": "pagerduty-service-example",
                  "property": [
                    {
                      "key": "",
                      "value": ""
                    }
                  ],
                  "type": "PAGERDUTY_SERVICE_INTEGRATION"
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "auth_token": [
                    {
                      "prefix": "Token token=",
                      "token": "u+E8EU3MhsZwLfZ1ic1A"
                    }
                  ],
                  "name": "pagerduty-account-example",
                  "property": [
                    {
                      "key": "two_way_integration",
                      "value": "true"
                    }
                  ],
                  "type": "PAGERDUTY_ACCOUNT_INTEGRATION"
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "name": "mobile-push-example",
                  "property": [
                    {
                      "key": "userId",
                      "value": "12345678"
                    }
                  ],
                  "type": "MOBILE_PUSH"
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "name": "event-bridge-example",
                  "property": [
                    {
                      "key": "AWSAccountId",
                      "value": "123456789123456"
                    },
                    {
                      "key": "AWSRegion",
                      "value": "us-east-2"
                    }
                  ],
                  "type": "EVENT_BRIDGE"
                }
            - name: foo
              manifest: '{}'
            - name: foo
              manifest: |-
                {
                  "auth_token": [
                    {
                      "prefix": "Bearer"
                    }
                  ],
                  "lifecycle": [
                    {
                      "ignore_changes": "${all}"
                    }
                  ],
                  "name": "*********",
                  "property": [
                    {
                      "key": "teamName",
                      "label": "Team Name",
                      "value": "******"
                    }
                  ],
                  "type": "SLACK"
                }
              references:
                lifecycle.ignore_changes: all
        argumentDocs:
            AWSAccountId: '- (Required) The account id to integrate to.'
            AWSRegion: '- (Required) The AWS region this account is in.'
            account_id: '- (Optional) Determines the New Relic account where the notification destination will be created. Defaults to the account associated with the API key used.'
            auth_basic: '- (Optional) A nested block that describes a basic username and password authentication credentials. Only one auth_basic block is permitted per notification destination definition.  See Nested auth_basic blocks below for details.'
            auth_basic.password: '- (Required) Specifies an authentication password for use with a destination.'
            auth_basic.user: '- (Required) The username of the basic auth.'
            auth_custom_header: '- (Optional) A nested block that describes a custom header authentication credentials. Multiple blocks are permitted per notification destination definition. Nested auth_custom_header blocks below for details.'
            auth_custom_header.key: '- (Required) The key of the header.'
            auth_custom_header.value: '- (Required) The secret value of the header.'
            auth_token: '- (Optional) A nested block that describes a token authentication credentials. Only one auth_token block is permitted per notification destination definition.  See Nested auth_token blocks below for details.'
            auth_token.prefix: '- (Required) The prefix of the token auth.'
            auth_token.token: '- (Required) Specifies the token for integrating.'
            email: '- (Required) A list of email addresses.'
            guid: '- The unique entity identifier of the destination in New Relic.'
            id: '- The ID of the destination.'
            name: '- (Required) The name of the destination.'
            property: '- (Required) A nested block that describes a notification destination property. See Nested property blocks below for details.'
            property.EMAIL: ""
            property.EVENT_BRIDGE: ""
            property.JIRA: ""
            property.MOBILE_PUSH: ""
            property.PAGERDUTY_ACCOUNT_INTEGRATION: ""
            property.SERVICE_NOW: ""
            property.WEBHOOK: ""
            property.display_value: '- (Optional) The notification property display value.'
            property.key: '- (Required) The notification property key.'
            property.label: '- (Optional) The notification property label.'
            property.value: '- (Required) The notification property value.'
            secure_url: '- (Optional) A nested block that describes a URL that contains sensitive data at the path or parameters. Only one secure_url block is permitted per notification destination definition. See Nested secure_url blocks below for details.'
            secure_url.prefix: '- (Required) The prefix of the URL.'
            secure_url.secure_suffix: '- (Required) The suffix of the URL, which contains sensitive data.'
            two_way_integration: '- (Optional) A boolean that represents the two-way integration on/off flag.'
            type: '- (Required) The type of destination.  One of: EMAIL, SERVICE_NOW, WEBHOOK, JIRA, MOBILE_PUSH, EVENT_BRIDGE, PAGERDUTY_ACCOUNT_INTEGRATION or PAGERDUTY_SERVICE_INTEGRATION. The types SLACK and SLACK_COLLABORATION can only be imported, updated and destroyed (cannot be created via terraform).'
            url: '- (Required) The webhook url.'
            userId: '- (Required) The new relic user id.'
        importStatements: []
    newrelic_nrql_alert_condition:
        subCategory: ""
        description: Create and manage a NRQL alert condition for a policy in New Relic.
        name: newrelic_nrql_alert_condition
        title: newrelic_nrql_alert_condition'
        examples:
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "aggregation_delay": 120,
                  "aggregation_method": "event_flow",
                  "aggregation_window": 60,
                  "close_violations_on_expiration": true,
                  "critical": [
                    {
                      "operator": "above",
                      "threshold": 5.5,
                      "threshold_duration": 300,
                      "threshold_occurrences": "ALL"
                    }
                  ],
                  "description": "Alert when transactions are taking too long",
                  "enabled": true,
                  "expiration_duration": 120,
                  "fill_option": "static",
                  "fill_value": 1,
                  "name": "foo",
                  "nrql": [
                    {
                      "query": "SELECT average(duration) FROM Transaction where appName = 'Your App'"
                    }
                  ],
                  "open_violation_on_expiration": true,
                  "policy_id": "${newrelic_alert_policy.foo.id}",
                  "runbook_url": "https://www.example.com",
                  "slide_by": 30,
                  "type": "static",
                  "violation_time_limit_seconds": 3600,
                  "warning": [
                    {
                      "operator": "above",
                      "threshold": 3.5,
                      "threshold_duration": 600,
                      "threshold_occurrences": "ALL"
                    }
                  ]
                }
              references:
                policy_id: newrelic_alert_policy.foo.id
              dependencies:
                newrelic_alert_policy.foo: |-
                    {
                      "name": "foo"
                    }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "aggregation_delay": 120,
                  "aggregation_method": "event_flow",
                  "baseline_direction": "upper_only",
                  "critical": [
                    {
                      "operator": "above",
                      "threshold": 5.5,
                      "threshold_duration": 300,
                      "threshold_occurrences": "all"
                    }
                  ],
                  "description": "Alert when transactions are taking too long",
                  "enabled": true,
                  "name": "foo",
                  "nrql": [
                    {
                      "query": "SELECT percentile(duration, 95) FROM Transaction WHERE appName = 'ExampleAppName'"
                    }
                  ],
                  "policy_id": "${newrelic_alert_policy.foo.id}",
                  "runbook_url": "https://www.example.com",
                  "slide_by": 30,
                  "type": "baseline",
                  "violation_time_limit_seconds": 3600,
                  "warning": [
                    {
                      "operator": "above",
                      "threshold": 3.5,
                      "threshold_duration": 600,
                      "threshold_occurrences": "all"
                    }
                  ]
                }
              references:
                policy_id: newrelic_alert_policy.foo.id
              dependencies:
                newrelic_alert_policy.foo: |-
                    {
                      "name": "foo"
                    }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "aggregation_delay": 120,
                  "aggregation_method": "event_flow",
                  "aggregation_window": 60,
                  "close_violations_on_expiration": true,
                  "critical": [
                    {
                      "operator": "above",
                      "threshold": 5.5,
                      "threshold_duration": 300,
                      "threshold_occurrences": "ALL"
                    }
                  ],
                  "description": "Alert when transactions are taking too long",
                  "enabled": true,
                  "expiration_duration": 120,
                  "fill_option": "static",
                  "fill_value": 1,
                  "name": "foo",
                  "nrql": [
                    {
                      "query": "SELECT average(duration) FROM Transaction where appName = 'Your App'"
                    }
                  ],
                  "open_violation_on_expiration": true,
                  "policy_id": "${newrelic_alert_policy.foo.id}",
                  "runbook_url": "https://www.example.com",
                  "slide_by": 30,
                  "type": "static",
                  "violation_time_limit_seconds": 3600,
                  "warning": [
                    {
                      "operator": "above",
                      "threshold": 3.5,
                      "threshold_duration": 600,
                      "threshold_occurrences": "ALL"
                    }
                  ]
                }
              references:
                policy_id: newrelic_alert_policy.foo.id
              dependencies:
                newrelic_alert_policy.foo: |-
                    {
                      "name": "foo"
                    }
                newrelic_entity_tags.my_condition_entity_tags: |-
                    {
                      "guid": "${newrelic_nrql_alert_condition.foo.entity_guid}",
                      "tag": [
                        {
                          "key": "my-key",
                          "values": [
                            "my-value",
                            "my-other-value"
                          ]
                        },
                        {
                          "key": "my-key-2",
                          "values": [
                            "my-value-2"
                          ]
                        }
                      ]
                    }
            - name: z
              manifest: |-
                {
                  "critical": [
                    {
                      "operator": "above",
                      "threshold": 3,
                      "threshold_duration": 120,
                      "threshold_occurrences": "AT_LEAST_ONCE"
                    }
                  ],
                  "enabled": true,
                  "name": "zleslie-test",
                  "nrql": [
                    {
                      "query": "SELECT count(*) FROM TransactionError WHERE appName like '%Dummy App%' FACET appName"
                    }
                  ],
                  "policy_id": "${newrelic_alert_policy.z.id}",
                  "runbook_url": "https://localhost",
                  "type": "static",
                  "violation_time_limit": "TWENTY_FOUR_HOURS"
                }
              references:
                policy_id: newrelic_alert_policy.z.id
            - name: z
              manifest: |-
                {
                  "enabled": true,
                  "name": "zleslie-test",
                  "nrql": [
                    {
                      "query": "SELECT count(*) FROM TransactionError WHERE appName like '%Dummy App%' FACET appName"
                    }
                  ],
                  "policy_id": "${newrelic_alert_policy.z.id}",
                  "runbook_url": "https://localhost",
                  "term": [
                    {
                      "duration": 5,
                      "operator": "above",
                      "priority": "critical",
                      "threshold": 3,
                      "time_function": "any"
                    }
                  ],
                  "type": "static",
                  "violation_time_limit_seconds": 86400
                }
              references:
                policy_id: newrelic_alert_policy.z.id
        argumentDocs:
            account_id: '- (Optional) The New Relic account ID of the account you wish to create the condition. Defaults to the account ID set in your environment variable NEW_RELIC_ACCOUNT_ID.'
            aggregation_delay: '- (Optional) How long we wait for data that belongs in each aggregation window. Depending on your data, a longer delay may increase accuracy but delay notifications. Use aggregation_delay with the event_flow and cadence methods. The maximum delay is 1200 seconds (20 minutes) when using event_flow and 3600 seconds (60 minutes) when using cadence. In both cases, the minimum delay is 0 seconds and the default is 120 seconds. aggregation_delay cannot be set with nrql.evaluation_offset.'
            aggregation_method: '- (Optional) Determines when we consider an aggregation window to be complete so that we can evaluate the signal for incidents. Possible values are cadence, event_flow or event_timer. Default is event_flow. aggregation_method cannot be set with nrql.evaluation_offset.'
            aggregation_timer: '- (Optional) How long we wait after each data point arrives to make sure we''ve processed the whole batch. Use aggregation_timer with the event_timer method. The timer value can range from 0 seconds to 1200 seconds (20 minutes); the default is 60 seconds. aggregation_timer cannot be set with nrql.evaluation_offset.'
            aggregation_window: '- (Optional) The duration of the time window used to evaluate the NRQL query, in seconds. The value must be at least 30 seconds, and no more than 21600 seconds (6 hours). Default is 60 seconds.'
            baseline_direction: '- (Optional) The baseline direction of a baseline NRQL alert condition. Valid values are: lower_only, upper_and_lower, upper_only (case insensitive).'
            close_violations_on_expiration: '- (Optional) Whether to close all open incidents when the signal expires.'
            critical: '- A list containing the critical threshold values. At least one critical or warning threshold must be defined. See Terms below for details.'
            description: '- (Optional) The description of the NRQL alert condition.'
            enabled: '- (Optional) Whether to enable the alert condition. Valid values are true and false. Defaults to true.'
            entity_guid: '- The unique entity identifier of the NRQL Condition in New Relic.'
            evaluation_delay: '- (Optional) How long we wait until the signal starts evaluating. The maximum delay is 7200 seconds (120 minutes).'
            expiration_duration: '- (Optional) The amount of time (in seconds) to wait before considering the signal expired. The value must be at least 30 seconds, and no more than 172800 seconds (48 hours).'
            fill_option: '- (Optional) Which strategy to use when filling gaps in the signal. Possible values are none, last_value or static. If static, the fill_value field will be used for filling gaps in the signal.'
            fill_value: '- (Optional, required when fill_option is static) This value will be used for filling gaps in the signal.'
            id: '- The ID of the NRQL alert condition. This is a composite ID with the format <policy_id>:<condition_id> - e.g. 538291:6789035.'
            name: '- (Required) The title of the condition.'
            nrql: '- (Required) A NRQL query. See NRQL below for details.'
            nrql.evaluation_offset: '- (Optional) DEPRECATED: Use aggregation_method instead. Represented in minutes and must be within 1-20 minutes (inclusive). NRQL queries are evaluated based on their aggregation_window size. The start time depends on this value. It''s recommended to set this to 3 windows. An offset of less than 3 windows will trigger incidents sooner, but you may see more false positives and negatives due to data latency. With evaluation_offset set to 3 windows and an aggregation_window of 60 seconds, the NRQL time window applied to your query will be: SINCE 3 minutes ago UNTIL 2 minutes ago. evaluation_offset cannot be set with aggregation_method, aggregation_delay, or aggregation_timer.'
            nrql.query: '- (Required) The NRQL query to execute for the condition.'
            nrql.since_value: '- (Optional)  DEPRECATED: Use aggregation_method instead. The value to be used in the SINCE <X> minutes ago clause for the NRQL query. Must be between 1-20 (inclusive).'
            open_violation_on_expiration: '- (Optional) Whether to create a new incident to capture that the signal expired.'
            policy_id: '- (Required) The ID of the policy where this condition should be used.'
            runbook_url: '- (Optional) Runbook URL to display in notifications.'
            slide_by: '- (Optional) Gathers data in overlapping time windows to smooth the chart line, making it easier to spot trends. The slide_by value is specified in seconds and must be smaller than and a factor of the aggregation_window.'
            term: '- (Optional) DEPRECATED Use critical, and warning instead. A list of terms for this condition. See Terms below for details.'
            term.duration: '- (Optional) DEPRECATED: Use threshold_duration instead. The duration of time, in minutes, that the threshold must violate for in order to create an incident. Must be within 1-120 (inclusive).'
            term.operator: '- (Optional) Valid values are above, above_or_equals, below, below_or_equals, equals, or not_equals (case insensitive). Defaults to equals. Note that when using a type of baseline, the only valid option here is above.'
            term.priority: '- (Optional) critical or warning. Defaults to critical.'
            term.threshold: |-
                - (Required) The value which will trigger an incident.
                For baseline NRQL alert conditions, the value must be in the range [1, 1000]. The value is the number of standard deviations from the baseline that the metric must exceed in order to create an incident.
            term.threshold_duration: |-
                - (Optional) The duration, in seconds, that the threshold must violate in order to create an incident. Value must be a multiple of the aggregation_window (which has a default of 60 seconds).
                For baseline NRQL alert conditions, the value must be within 120-86400 seconds (inclusive).
                For static NRQL alert conditions, the value must be within 60-86400 seconds (inclusive).
            term.threshold_occurrences: '- (Optional) The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: all or at_least_once (case insensitive).'
            term.time_function: '- (Optional) DEPRECATED: Use threshold_occurrences instead. The criteria for how many data points must be in violation for the specified threshold duration. Valid values are: all or any.'
            type: '- (Optional) The type of the condition. Valid values are static or baseline. Defaults to static.'
            violation_time_limit: |-
                - (Optional) DEPRECATED: Use violation_time_limit_seconds instead. Sets a time limit, in hours, that will automatically force-close a long-lasting incident after the time limit you select. Possible values are ONE_HOUR, TWO_HOURS, FOUR_HOURS, EIGHT_HOURS, TWELVE_HOURS, TWENTY_FOUR_HOURS, THIRTY_DAYS (case insensitive).
                *Note: One of violation_time_limit or violation_time_limit_seconds must be set, but not both.
            violation_time_limit_seconds: "- (Optional) Sets a time limit, in seconds, that will automatically force-close a long-lasting incident after the time limit you select. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days) (inclusive). \n*Note: One of violation_time_limit or violation_time_limit_seconds must be set, but not both."
            warning: '- A list containing the warning threshold values. At least one critical or warning threshold must be defined. See Terms below for details.'
        importStatements: []
    newrelic_nrql_drop_rule:
        subCategory: ""
        description: Create and manage NRQL Drop Rules.
        name: newrelic_nrql_drop_rule
        title: newrelic_nrql_drop_rule
        examples:
            - name: foo
              manifest: |-
                {
                  "account_id": 12345,
                  "action": "drop_data",
                  "description": "Drops all data for MyCustomEvent that comes from the LoadGeneratingApp in the dev environment, because there is too much and we don’t look at it.",
                  "nrql": "SELECT * FROM MyCustomEvent WHERE appName='LoadGeneratingApp' AND environment='development'"
                }
            - name: bar
              manifest: |-
                {
                  "account_id": 12345,
                  "action": "drop_attributes",
                  "description": "Removes the user name and email fields from MyCustomEvent",
                  "nrql": "SELECT userEmail, userName FROM MyCustomEvent"
                }
            - name: baz
              manifest: |-
                {
                  "account_id": 12345,
                  "action": "drop_attributes_from_metric_aggregates",
                  "description": "Removes containerId from metric aggregates to reduce metric cardinality.",
                  "nrql": "SELECT containerId FROM Metric"
                }
        argumentDocs:
            account_id: '- (Optional) Account where the drop rule will be put. Defaults to the account associated with the API key used.'
            action: '- (Required) An action type specifying how to apply the NRQL string (either drop_data, drop_attributes, or  drop_attributes_from_metric_aggregates).'
            description: '- (Optional) The description of the drop rule.'
            nrql: '- (Required) A NRQL string that specifies what data types to drop.'
            rule_id: '- The id, uniquely identifying the rule.'
        importStatements: []
    newrelic_obfuscation_expression:
        subCategory: ""
        description: Create and manage Obfuscation Expression.
        name: newrelic_obfuscation_expression
        title: newrelic_obfuscation_expression
        examples:
            - name: foo
              manifest: |-
                {
                  "account_id": 12345,
                  "description": "The description",
                  "name": "OExp",
                  "regex": "(regex.*)"
                }
        argumentDocs:
            account_id: '- (Optional) The account id associated with the obfuscation expression.'
            description: '- (Optional) Description of expression.'
            id: '- The id of the obfuscation expression.'
            name: '- (Required) Name of expression.'
            regex: '- (Required) Regex of expression. Must be wrapped in parentheses, e.g. (regex.*).'
        importStatements: []
    newrelic_obfuscation_rule:
        subCategory: ""
        description: Create and manage Obfuscation Rule.
        name: newrelic_obfuscation_rule
        title: newrelic_obfuscation_rule
        examples:
            - name: foo
              manifest: |-
                {
                  "action": [
                    {
                      "attribute": [
                        "message"
                      ],
                      "expression_id": "${newrelic_obfuscation_expression.bar.id}",
                      "method": "MASK"
                    }
                  ],
                  "description": "description of the rule",
                  "enabled": true,
                  "filter": "hostStatus=running",
                  "name": "ruleName"
                }
              references:
                action.expression_id: newrelic_obfuscation_expression.bar.id
              dependencies:
                newrelic_obfuscation_expression.bar: |-
                    {
                      "description": "description of the expression",
                      "name": "expressionName",
                      "regex": "(^http)"
                    }
        argumentDocs:
            account_id: '- (Optional) The account id associated with the obfuscation rule.'
            action: '- (Required) Actions for the rule. The actions will be applied in the order specified by this list.'
            action.attribute: '- (Required) Attribute names for action. An empty list applies the action to all the attributes.'
            action.expression_id: '- (Required) Expression Id for action.'
            action.method: '- (Required) Obfuscation method to use. Methods for replacing obfuscated values are HASH_SHA256 and MASK.'
            description: '- (Optional) Description of rule.'
            enabled: '- (Required) Whether the rule should be applied or not to incoming data.'
            filter: '- (Required) NRQL for determining whether a given log record should have obfuscation actions applied.'
            id: '- The id of the obfuscation rule.'
            name: '- (Required) Name of rule.'
        importStatements: []
    newrelic_one_dashboard:
        subCategory: ""
        description: Create and manage dashboards in New Relic One.
        name: newrelic_one_dashboard
        title: newrelic_one_dashboard
        examples:
            - name: exampledash
              manifest: |-
                {
                  "name": "New Relic Terraform Example",
                  "page": [
                    {
                      "name": "New Relic Terraform Example",
                      "widget_bar": [
                        {
                          "column": 7,
                          "height": 3,
                          "linked_entity_guids": [
                            "abc123"
                          ],
                          "nrql_query": [
                            {
                              "account_id": 12345,
                              "query": "FROM Transaction SELECT average(duration) FACET appName"
                            }
                          ],
                          "row": 1,
                          "title": "Average transaction duration, by application",
                          "width": 6
                        },
                        {
                          "colors": [
                            {
                              "color": "#722727",
                              "series_overrides": [
                                {
                                  "color": "#722322",
                                  "series_name": "Node"
                                },
                                {
                                  "color": "#236f70",
                                  "series_name": "Java"
                                }
                              ]
                            }
                          ],
                          "column": 1,
                          "filter_current_dashboard": true,
                          "height": 3,
                          "nrql_query": [
                            {
                              "account_id": 12345,
                              "query": "FROM Transaction SELECT average(duration) FACET appName"
                            }
                          ],
                          "row": 4,
                          "title": "Average transaction duration, by application",
                          "width": 6
                        }
                      ],
                      "widget_billboard": [
                        {
                          "column": 1,
                          "height": 3,
                          "nrql_query": [
                            {
                              "query": "FROM Transaction SELECT rate(count(*), 1 minute)"
                            }
                          ],
                          "row": 1,
                          "title": "Requests per minute",
                          "width": 6
                        }
                      ],
                      "widget_line": [
                        {
                          "column": 7,
                          "height": 3,
                          "ignore_time_range": false,
                          "is_label_visible": true,
                          "legend_enabled": true,
                          "nrql_query": [
                            {
                              "account_id": 12345,
                              "query": "FROM Transaction select max(duration) as 'max duration' where httpResponseCode = '504' timeseries since 5 minutes ago"
                            },
                            {
                              "query": "FROM Transaction SELECT rate(count(*), 1 minute)"
                            }
                          ],
                          "row": 4,
                          "threshold": [
                            {
                              "from": 1,
                              "name": "Duration Threshold",
                              "severity": "critical",
                              "to": 2
                            },
                            {
                              "from": 0.5,
                              "name": "Duration Threshold Two",
                              "severity": "warning",
                              "to": 0.75
                            }
                          ],
                          "title": "Average transaction duration and the request per minute, by application",
                          "units": [
                            {
                              "series_overrides": [
                                {
                                  "series_name": "max duration",
                                  "unit": "ms"
                                }
                              ],
                              "unit": "ms"
                            }
                          ],
                          "width": 6,
                          "y_axis_left_max": 1,
                          "y_axis_left_min": 0,
                          "y_axis_left_zero": true,
                          "y_axis_right": [
                            {
                              "y_axis_right_max": 300,
                              "y_axis_right_min": 0,
                              "y_axis_right_series": [
                                "A",
                                "B"
                              ],
                              "y_axis_right_zero": true
                            }
                          ]
                        },
                        {
                          "column": 5,
                          "facet_show_other_series": false,
                          "height": 3,
                          "ignore_time_range": false,
                          "legend_enabled": true,
                          "nrql_query": [
                            {
                              "query": "SELECT average(cpuSystemPercent), average(cpuUserPercent), average(cpuIdlePercent), average(cpuIOWaitPercent) FROM SystemSample  SINCE 1 hour ago TIMESERIES\n"
                            }
                          ],
                          "null_values": [
                            {
                              "null_value": "default",
                              "series_overrides": [
                                {
                                  "null_value": "remove",
                                  "series_name": "Avg Cpu User Percent"
                                },
                                {
                                  "null_value": "zero",
                                  "series_name": "Avg Cpu Idle Percent"
                                },
                                {
                                  "null_value": "default",
                                  "series_name": "Avg Cpu IO Wait Percent"
                                },
                                {
                                  "null_value": "preserve",
                                  "series_name": "Avg Cpu System Percent"
                                }
                              ]
                            }
                          ],
                          "row": 1,
                          "title": "Overall CPU % Statistics",
                          "width": 4,
                          "y_axis_left_max": 0,
                          "y_axis_left_min": 0,
                          "y_axis_left_zero": true
                        }
                      ],
                      "widget_markdown": [
                        {
                          "column": 1,
                          "height": 3,
                          "row": 7,
                          "text": "### Helpful Links\n\n* [New Relic One](https://one.newrelic.com)\n* [Developer Portal](https://developer.newrelic.com)",
                          "title": "Dashboard Note",
                          "width": 12
                        }
                      ]
                    }
                  ],
                  "permissions": "public_read_only",
                  "variable": [
                    {
                      "default_values": [
                        "value"
                      ],
                      "is_multi_selection": true,
                      "item": [
                        {
                          "title": "item",
                          "value": "ITEM"
                        }
                      ],
                      "name": "variable",
                      "nrql_query": [
                        {
                          "account_ids": [
                            12345
                          ],
                          "query": "FROM Transaction SELECT average(duration) FACET appName"
                        }
                      ],
                      "replacement_strategy": "default",
                      "title": "title",
                      "type": "nrql"
                    }
                  ]
                }
            - name: multi_page_dashboard
              manifest: |-
                {
                  "name": "My Multi-page dashboard",
                  "page": [
                    {
                      "name": "My Multi-page dashboard",
                      "widget_bar": [
                        {
                          "column": 1,
                          "linked_entity_guids": [
                            "abc123"
                          ],
                          "nrql_query": [
                            {
                              "query": "FROM Transaction SELECT count(*) FACET name"
                            }
                          ],
                          "row": 1,
                          "title": "foo"
                        }
                      ]
                    },
                    {
                      "name": "Multi-query Page",
                      "widget_line": [
                        {
                          "column": 1,
                          "nrql_query": [
                            {
                              "account_id": "${First_Account_ID}",
                              "query": "FROM Metric SELECT rate(count(apm.service.transaction.duration), 1 minute) as 'First Account Throughput' TIMESERIES"
                            },
                            {
                              "account_id": "${Second_Account_ID}",
                              "query": "FROM Metric SELECT rate(count(apm.service.transaction.duration), 1 minute) as 'Second Account Throughput' TIMESERIES"
                            }
                          ],
                          "row": 1,
                          "title": "Comparing throughput cross-account",
                          "width": 12,
                          "y_axis_left_zero": false
                        }
                      ]
                    }
                  ],
                  "permissions": "private"
                }
              references:
                page.widget_line.nrql_query.account_id: Second_Account_ID
        argumentDocs:
            account_id: '- (Optional) Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.'
            color: '- (Optional) Choose a color to customize the color of your charts per series in area, bar, line, pie, and stacked bar charts. Accepted values are RGB, HEX, or HSL code.'
            column_name: '- The name of the column in the table, to which the threshold would need to be applied.'
            critical: '- (Optional) Threshold above which the displayed value will be styled with a red color.'
            description: '- (Optional) Brief text describing the dashboard.'
            filter_current_dashboard: ': (Optional) Use this item to filter the current dashboard.'
            from: '- The value ''from'' which the threshold would need to be applied.'
            guid: '- The unique entity identifier of the dashboard in New Relic.'
            ignore_time_range: '- (Optional) An argument with a boolean value that is supported only by variables of type nrql - when true, the time range specified in the query will override the time picker on dashboards and other pages.'
            is_label_visible: '- (Optional) A boolean value, which when true, sets the label to be visibly displayed within thresholds. In other words, if this attribute is set to true, the label always visible toggle in the Thresholds section in the settings of the widget is enabled.'
            limit: '- (Required) Visualization limit for the widget.'
            linked_entity_guids: ': (Optional) Related entity GUIDs. Currently only supports Dashboard entity GUIDs.'
            name: '- (Required) The title of the dashboard.'
            nrql_query: '- (Required) A nested block that describes a NRQL Query. See Nested nrql_query blocks below for details.'
            nrql_query.account_id: '- (Optional) The New Relic account ID to issue the query against. Defaults to the Account ID where the dashboard was created. When using an account ID you don''t have permissions for the widget will be replaced with a widget showing the data is inaccessible. Terraform will not throw an error, so this widget will only be visible in the UI.'
            nrql_query.query: '- (Required) Valid NRQL query string. See Writing NRQL Queries for help.'
            null_value: '-  Choose an option in displaying null values. Accepted values are default, remove, preserve, or zero.'
            page: '- (Required) A nested block that describes a page. See Nested page blocks below for details.'
            page.description: '- (Optional) Brief text describing the page.'
            page.guid: '- The unique entity identifier of the dashboard page in New Relic.'
            page.name: '- (Required) The name of the page. Note: If there is only one page, this name will be the name of the Dashboard.'
            page.widget_area: '- (Optional) A nested block that describes an Area widget.  See Nested widget blocks below for details.'
            page.widget_bar: '- (Optional) A nested block that describes a Bar widget.  See Nested widget blocks below for details.'
            page.widget_billboard: '- (Optional) A nested block that describes a Billboard widget.  See Nested widget blocks below for details.'
            page.widget_bullet: '- (Optional) A nested block that describes a Bullet widget.  See Nested widget blocks below for details.'
            page.widget_funnel: '- (Optional) A nested block that describes a Funnel widget.  See Nested widget blocks below for details.'
            page.widget_heatmap: '- (Optional) A nested block that describes a Heatmap widget.  See Nested widget blocks below for details.'
            page.widget_histogram: '- (Optional) A nested block that describes a Histogram widget.  See Nested widget blocks below for details.'
            page.widget_json: '- (Optional) A nested block that describes a JSON widget.  See Nested widget blocks below for details.'
            page.widget_line: '- (Optional) A nested block that describes a Line widget.  See Nested widget blocks below for details.'
            page.widget_log_table: '- (Optional) A nested block that describes a Log Table widget.  See Nested widget blocks below for details.'
            page.widget_markdown: '- (Optional) A nested block that describes a Markdown widget.  See Nested widget blocks below for details.'
            page.widget_pie: '- (Optional) A nested block that describes a Pie widget.  See Nested widget blocks below for details.'
            page.widget_stacked_bar: '- (Optional) A nested block that describes a Stacked Bar widget. See Nested widget blocks below for details.'
            page.widget_table: '- (Optional) A nested block that describes a Table widget.  See Nested widget blocks below for details.'
            permalink: '- The URL for viewing the dashboard.'
            permissions: '- (Optional) Determines who can see the dashboard in an account. Valid values are private, public_read_only, or public_read_write.  Defaults to public_read_only.'
            series_overrides: '- (Optional) A Nested block which will take two string attributes null_value and series_name. This nested block is used to customize null values of individual.'
            severity: '- The severity of the threshold, which would affect the visual appearance of the threshold (such as its color) accordingly. The value of this attribute would need to be one of the following - warning, severe, critical, success, unavailable which correspond to the severity labels Warning, Approaching critical, Critical, Good, Neutral in the dropdown that helps specify the severity of thresholds in line widgets in the UI, respectively.'
            text: '- (Required) The markdown source to be rendered in the widget.'
            threshold: '- (Optional) An attribute that helps specify multiple thresholds, each inclusive of a range of values between which the threshold would need to function, the name of the threshold and its severity. Multiple thresholds can be defined in a line widget. The threshold attribute requires specifying the following attributes in a nested block -'
            title: '- (Optional) A human-friendly display string for this value.'
            to: '- The value until which the threshold would need to be applied.'
            unit: '- (Optional) Choose a unit to customize the unit on your Y axis and in each of your series.'
            value: '- (Required) A possible variable value'
            variable: '- (Optional) A nested block that describes a dashboard-local variable. See Nested variable blocks below for details.'
            variable.default_values: '- (Optional) A list of default values for this variable. To select all default values, the appropriate value to be used with this argument would be ["*"].'
            variable.is_multi_selection: '- (Optional) Indicates whether this variable supports multiple selection or not. Only applies to variables of type nrql or enum.'
            variable.item: '- (Optional) List of possible values for variables of type enum. See Nested item blocks below for details.'
            variable.name: '- (Required) The variable identifier.'
            variable.nrql_query: '- (Optional) Configuration for variables of type nrql. See Nested nrql_query blocks for details.'
            variable.options: '- (Optional) Specifies additional options to be added to dashboard variables. Supports the following nested attribute(s) -'
            variable.replacement_strategy: '- (Optional) Indicates the strategy to apply when replacing a variable in a NRQL query. One of default, identifier, number or string.'
            variable.title: '- (Optional) Human-friendly display string for this variable.'
            variable.type: '- (Required) Specifies the data type of the variable and where its possible values may come from. One of enum, nrql or string'
            warning: '- (Optional) Threshold above which the displayed value will be styled with a yellow color.'
            widget.colors: '- (Optional) A nested block that describes colors of your charts per series. See Nested Colors blocks below for details.'
            widget.column: '- (Required) Column position of widget from top left, starting at 1.'
            widget.facet_show_other_series: '- (Optional) Enable or disable the Other group in visualisations. The other group is used if a facet on a query returns more than 2000 items for bar charts, pie charts, and tables. The other group aggregates the rest of the facets. Defaults to false'
            widget.height: '- (Optional) Height of the widget.  Valid values are 1 to 12 inclusive.  Defaults to 3.'
            widget.ignore_time_range: '- (Optional) With this turned on, the time range in this query will override the time picker on dashboards and other pages. Defaults to false.'
            widget.legend_enabled: '- (Optional) With this turned on, the legend will be displayed. Defaults to true.'
            widget.null_values: '- (Optional) A nested block that describes a Null Values. See Nested Null Values blocks below for details.'
            widget.row: '- (Required) Row position of widget from top left, starting at 1.'
            widget.title: '- (Required) A title for the widget.'
            widget.units: '- (Optional) A nested block that describes units on your Y axis. See Nested Units blocks below for details.'
            widget.widget_area: ""
            widget.widget_bar: ""
            widget.widget_billboard: ""
            widget.widget_bullet: ""
            widget.widget_funnel: ""
            widget.widget_heatmap: ""
            widget.widget_histogram: ""
            widget.widget_json: ""
            widget.widget_line: ""
            widget.widget_log_table: ""
            widget.widget_markdown: ':'
            widget.widget_pie: ""
            widget.widget_stacked_bar: ""
            widget.widget_table: ""
            widget.width: '- (Optional) Width of the widget.  Valid values are 1 to 12 inclusive.  Defaults to 4.'
            widget.y_axis_left_min: ', y_axis_left_max - (Optional) Adjust the Y axis to display the data within certain values by setting a minimum and maximum value for the axis for line charts and area charts. If no customization option is selected, dashboards automatically displays the full Y axis from 0 to the top value plus a margin.'
            y_axis_left_zero: '- (Optional) An attribute that specifies if the values on the graph to be rendered need to be fit to scale, or printed within the specified range from y_axis_left_min (or 0 if it is not defined) to y_axis_left_max. Use y_axis_left_zero = true with a combination of y_axis_left_min and y_axis_left_max to render values from 0 or the specified minimum to the maximum, and y_axis_left_zero = false to fit the graph to scale.'
            y_axis_right: '- (Optional) An attribute which helps specify the configuration of the Y-Axis displayed on the right side of the line widget. This is a nested block, which includes the following attributes:'
            y_axis_right_min: ', y_axis_right_max - (Optional) Attributes which help specify a range of minimum and maximum values, which adjust the right Y axis to display the data within the specified minimum and maximum value for the axis.'
            y_axis_right_series: '- (Optional) An attribute which takes a list of strings, specifying a selection of series'' displayed in the line chart to be adjusted against the values of the right Y-axis.'
            y_axis_right_zero: '- (Optional) An attribute that specifies if the values on the graph to be rendered need to be fit to scale, or printed within the specified range from y_axis_right_min (or 0 if it is not defined) to y_axis_right_max. Use y_axis_right_zero = true with a combination of y_axis_right_min and y_axis_right_max to render values from 0 or the specified minimum to the maximum, and y_axis_right_zero = false to fit the graph to scale.'
        importStatements: []
    newrelic_one_dashboard_json:
        subCategory: ""
        description: Create and manage dashboards from a JSON file.
        name: newrelic_one_dashboard_json
        title: newrelic_one_dashboard_json
        examples:
            - name: foo
              manifest: |-
                {
                  "json": "${file(\"dashboard.json\")}"
                }
            - name: bar
              manifest: |-
                {
                  "json": "${templatefile(\"dashboard.json.tftpl\", {\n      account_id = 1234567,\n      applications = [\n        {\n            name = \"Application one\",\n            appName = \"app1\",\n        },\n        {\n            name = \"Application two\",\n            appName = \"app2\",\n        },\n      ],\n   })}"
                }
            - name: foo
              manifest: |-
                {
                  "json": "${templatefile(\"dashboard.json.tftpl\", {\n    account_id = 123456\n  })}"
                }
            - name: dashboard_one
              manifest: |-
                {
                  "json": "${templatefile(\"dashboard.json.tftpl\", {\n    name        = \"Multipage Dashboard One\",\n    description = \"The first sample multipage dashboard in a set of three.\",\n    permissions = \"PUBLIC_READ_WRITE\",\n    pages       = [\"page_one.json\", \"page_two.json\"]\n  })}"
                }
            - name: dashboard_two
              manifest: |-
                {
                  "json": "${templatefile(\"dashboard.json.tftpl\", {\n    name        = \"Multipage Dashboard Two\",\n    description = \"The second sample multipage dashboard in a set of three.\",\n    permissions = \"PUBLIC_READ_WRITE\",\n    pages       = [\"page_two.json\", \"page_three.json\"]\n  })}"
                }
            - name: dashboard_three
              manifest: |-
                {
                  "json": "${templatefile(\"dashboard.json.tftpl\", {\n    name        = \"Multipage Dashboard Three\",\n    description = \"The third sample multipage dashboard in a set of three.\",\n    permissions = \"PUBLIC_READ_WRITE\",\n    pages       = [\"page_one.json\", \"page_two.json\", \"page_three.json\"]\n  })}"
                }
        argumentDocs:
            account_id: '- (Optional) Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.'
            guid: '- The unique entity identifier of the dashboard in New Relic.'
            json: '- (Required) The JSON export of a dashboard. The JSON can be exported from the UI'
            jsondecode: function.
            permalink: '- The URL for viewing the dashboard.'
            updated_at: '- The date and time when the dashboard was last updated.'
        importStatements: []
    newrelic_one_dashboard_raw:
        subCategory: ""
        description: Create and manage dashboards with custom visualizations and/or RawConfiguration in New Relic One.
        name: newrelic_one_dashboard_raw
        title: newrelic_one_dashboard_raw
        examples:
            - name: exampledash
              manifest: |-
                {
                  "name": "New Relic Terraform Example",
                  "page": [
                    {
                      "name": "Page Name",
                      "widget": [
                        {
                          "column": 1,
                          "configuration": "      {\n        \"legend\": {\n          \"enabled\": false\n        },\n        \"nrqlQueries\": [\n          {\n            \"accountId\": ` + accountID + `,\n            \"query\": \"SELECT average(loadAverageOneMinute), average(loadAverageFiveMinute), average(loadAverageFifteenMinute) from SystemSample SINCE 60 minutes ago    TIMESERIES\"\n          }\n        ],\n        \"yAxisLeft\": {\n          \"max\": 100,\n          \"min\": 50,\n          \"zero\": false\n        }\n      }\n",
                          "height": 1,
                          "row": 1,
                          "title": "Custom widget",
                          "visualization_id": "viz.custom",
                          "width": 1
                        },
                        {
                          "column": 2,
                          "configuration": "      {\n        \"nrqlQueries\": [\n          {\n            \"accountId\": ` + accountID + `,\n            \"query\": \"SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400\"\n          }\n        ]\n      }\n",
                          "height": 1,
                          "row": 1,
                          "title": "Server CPU",
                          "visualization_id": "viz.testing",
                          "width": 1
                        },
                        {
                          "column": 3,
                          "configuration": "${jsonencode(\n      {\n        \"facet\": {\n          \"showOtherSeries\": false\n        },\n        \"nrqlQueries\": [\n          {\n            \"accountId\": local.accountID,\n            \"query\": \"SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400\"\n          }\n        ]\n      }\n      )}",
                          "height": 1,
                          "linked_entity_guids": [
                            "MzI5ODAxNnxWSVp8REFTSEJPQVJEfDI2MTcxNDc"
                          ],
                          "row": 1,
                          "title": "Docker Server CPU",
                          "visualization_id": "viz.bar",
                          "width": 1
                        }
                      ]
                    }
                  ]
                }
        argumentDocs:
            account_id: '- (Optional) Determines the New Relic account where the dashboard will be created. Defaults to the account associated with the API key used.'
            description: '- (Optional) Brief text describing the dashboard.'
            guid: '- The unique entity identifier of the dashboard in New Relic.'
            name: '- (Required) The title of the dashboard.'
            page: '- (Required) A nested block that describes a page. See Nested page blocks below for details.'
            page.description: '- (Optional) Brief text describing the page.'
            page.guid: '- The unique entity identifier of the dashboard page in New Relic.'
            page.name: '- (Required) The name of the page. Note: If there is only one page, this name will be the name of the Dashboard.'
            page.widget: '- (Optional) A nested block that describes a widget. See Nested widget blocks below for details.'
            permalink: '- The URL for viewing the dashboard.'
            permissions: '- (Optional) Determines who can see the dashboard in an account. Valid values are private, public_read_only, or public_read_write. Defaults to public_read_only.'
            widget.column: '- (Required) Column position of widget from top left, starting at 1.'
            widget.configuration: '- (Required) The configuration of the widget.'
            widget.height: '- (Optional) Height of the widget. Valid values are 1 to 12 inclusive. Defaults to 3.'
            widget.linked_entity_guids: '- (Optional) Related entity GUIDs.'
            widget.row: '- (Required) Row position of widget from top left, starting at 1.'
            widget.title: '- (Required) A title for the widget.'
            widget.visualization_id: '- (Required) The visualization ID of the widget'
            widget.width: '- (Optional) Width of the widget. Valid values are 1 to 12 inclusive. Defaults to 4.'
        importStatements: []
    newrelic_service_level:
        subCategory: ""
        description: Create and manage a New Relic Service Level.
        name: newrelic_service_level
        title: newrelic_service_level
        examples:
            - name: foo
              manifest: |-
                {
                  "description": "Proportion of requests that are served faster than a threshold.",
                  "events": [
                    {
                      "account_id": 12345678,
                      "good_events": [
                        {
                          "from": "Transaction",
                          "where": "appName = 'Example application' AND (transactionType= 'Web') AND duration \u003c 0.1"
                        }
                      ],
                      "valid_events": [
                        {
                          "from": "Transaction",
                          "where": "appName = 'Example application' AND (transactionType='Web')"
                        }
                      ]
                    }
                  ],
                  "guid": "MXxBUE18QVBQTElDQVRJT058MQ",
                  "name": "Latency",
                  "objective": [
                    {
                      "target": 99,
                      "time_window": [
                        {
                          "rolling": [
                            {
                              "count": 7,
                              "unit": "DAY"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
            - name: my_synthetic_monitor_service_level
              manifest: |-
                {
                  "description": "Proportion of successful synthetic checks.",
                  "events": [
                    {
                      "account_id": 12345678,
                      "good_events": [
                        {
                          "from": "SyntheticCheck",
                          "where": "entityGuid = 'MXxBUE18QVBQTElDQVRJT058MQ' AND result='SUCCESS'"
                        }
                      ],
                      "valid_events": [
                        {
                          "from": "SyntheticCheck",
                          "where": "entityGuid = 'MXxBUE18QVBQTElDQVRJT058MQ'"
                        }
                      ]
                    }
                  ],
                  "guid": "MXxBUE18QVBQTElDQVRJT058MQ",
                  "name": "My synthethic monitor - Success",
                  "objective": [
                    {
                      "target": 99,
                      "time_window": [
                        {
                          "rolling": [
                            {
                              "count": 7,
                              "unit": "DAY"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              dependencies:
                newrelic_entity_tags.my_synthetic_monitor_service_level_tags: |-
                    {
                      "guid": "${newrelic_service_level.my_synthetic_monitor_service_level.sli_guid}",
                      "tag": [
                        {
                          "key": "user_journey",
                          "values": [
                            "authentication",
                            "sso"
                          ]
                        },
                        {
                          "key": "owner",
                          "values": [
                            "identityTeam"
                          ]
                        }
                      ]
                    }
            - name: my_synthetic_monitor_duration_service_level
              manifest: |-
                {
                  "description": "Monitor created to test concurrent request from terraform",
                  "events": [
                    {
                      "account_id": 313870,
                      "good_events": [
                        {
                          "from": "Metric",
                          "select": [
                            {
                              "attribute": "`query.wallClockTime.negative.distribution`",
                              "function": "GET_CDF_COUNT",
                              "threshold": 7
                            }
                          ],
                          "where": "metricName = 'query.wallClockTime.negative.distribution'"
                        }
                      ],
                      "valid_events": [
                        {
                          "from": "Metric",
                          "select": [
                            {
                              "attribute": "`query.wallClockTime.negative.distribution`",
                              "function": "GET_FIELD"
                            }
                          ],
                          "where": "metricName = 'query.wallClockTime.negative.distribution'"
                        }
                      ]
                    }
                  ],
                  "guid": "MXxBUE18QVBQTElDQVRJT058MQ",
                  "name": "Duration distribution is under 7",
                  "objective": [
                    {
                      "target": 49,
                      "time_window": [
                        {
                          "rolling": [
                            {
                              "count": 7,
                              "unit": "DAY"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
        argumentDocs:
            attribute: '- (Optional) The event attribute to use in the SELECT clause.'
            count: '- (Required) Valid values are 1, 7 and 28.'
            description: '- (Optional) The description of the SLI.'
            events: |-
                - (Required) The events that define the NRDB data for the SLI/SLO calculations.
                See Events below for details.
            events.account_id: |-
                - (Required) The ID of the account where the entity (e.g, APM Service, Browser application, Workload, etc.) belongs to,
                and that contains the NRDB data for the SLI/SLO calculations. Note that changing the account ID will force a new resource.
            events.bad_events: '- (Optional) The definition of the bad responses. If you define an SLI from valid and bad events, you must leave the good events argument empty.'
            events.good_events: '- (Optional) The definition of good responses. If you define an SLI from valid and good events, you must leave the bad events argument empty.'
            events.valid_events: '- (Required) The definition of valid requests.'
            from: '- (Required) The event type where NRDB data will be fetched from.'
            function: '- (Required) The function to use in the SELECT clause. Valid values are COUNT, SUM, GET_FIELD, and GET_CDF_COUNT.'
            guid: '- (Required) The GUID of the entity (e.g, APM Service, Browser application, Workload, etc.) that you want to relate this SLI to. Note that changing the GUID will force a new resource.'
            name: '- (Required) A short name for the SLI that will help anyone understand what it is about.'
            objective: |-
                - (Required) The objective of the SLI, only one can be defined.
                See Objective below for details.
            rolling: '- (Required) Rolling window.'
            select: '- (Optional) The NRQL SELECT clause to aggregate events.'
            sli_guid: '- The unique entity identifier of the Service Level Indicator in New Relic.'
            sli_id: '- The unique entity identifier of the Service Level Indicator.'
            target: '- (Required) The target of the objective, valid values between 0 and 100. Up to 5 decimals accepted.'
            threshold: '- (Optional) Limit for values to be counter by GET_CDF_COUNT function.'
            time_window: '- (Required) Time window is the period of the objective.'
            unit: '- (Required) The only supported value is DAY.'
            where: '- (Optional) A filter that specifies all the NRDB events that are considered in this SLI (e.g, those that refer to a particular entity).'
        importStatements: []
    newrelic_synthetics_alert_condition:
        subCategory: ""
        description: Create and manage a Synthetics alert condition for a policy in New Relic.
        name: newrelic_synthetics_alert_condition
        title: newrelic_synthetics_alert_condition
        examples:
            - name: foo
              manifest: |-
                {
                  "monitor_id": "${newrelic_synthetics_monitor.foo.id}",
                  "name": "foo",
                  "policy_id": "${newrelic_alert_policy.foo.id}",
                  "runbook_url": "https://www.example.com"
                }
              references:
                monitor_id: newrelic_synthetics_monitor.foo.id
                policy_id: newrelic_alert_policy.foo.id
            - name: foo
              manifest: |-
                {
                  "monitor_id": "${newrelic_synthetics_monitor.foo.id}",
                  "name": "foo synthetics condition",
                  "policy_id": "${newrelic_alert_policy.foo.id}",
                  "runbook_url": "https://www.example.com"
                }
              references:
                monitor_id: newrelic_synthetics_monitor.foo.id
                policy_id: newrelic_alert_policy.foo.id
              dependencies:
                newrelic_alert_policy.foo: |-
                    {
                      "name": "foo policy"
                    }
                newrelic_entity_tags.my_condition_entity_tags: |-
                    {
                      "guid": "${newrelic_synthetics_alert_condition.foo.entity_guid}",
                      "tag": [
                        {
                          "key": "my-key",
                          "values": [
                            "my-value",
                            "my-other-value"
                          ]
                        },
                        {
                          "key": "my-key-2",
                          "values": [
                            "my-value-2"
                          ]
                        }
                      ]
                    }
                newrelic_synthetics_monitor.foo: |-
                    {
                      "bypass_head_request": true,
                      "custom_header": [
                        {
                          "name": "some_name",
                          "value": "some_value"
                        }
                      ],
                      "locations_public": [
                        "AP_EAST_1"
                      ],
                      "name": "foo monitor",
                      "period": "EVERY_MINUTE",
                      "status": "ENABLED",
                      "tag": [
                        {
                          "key": "some_key",
                          "values": [
                            "some_value"
                          ]
                        }
                      ],
                      "treat_redirect_as_failure": true,
                      "type": "SIMPLE",
                      "uri": "https://www.one.newrelic.com",
                      "validation_string": "success",
                      "verify_ssl": true
                    }
        argumentDocs:
            enabled: '- (Optional) Set whether to enable the alert condition. Defaults to true.'
            entity_guid: '- The unique entity identifier of the condition in New Relic.'
            id: '- The ID of the Synthetics alert condition.'
            monitor_id: '- (Required) The GUID of the Synthetics monitor to be referenced in the alert condition.'
            name: '- (Required) The title of this condition.'
            policy_id: '- (Required) The ID of the policy where this condition should be used.'
            runbook_url: '- (Optional) Runbook URL to display in notifications.'
        importStatements: []
    newrelic_synthetics_broken_links_monitor:
        subCategory: ""
        description: Create and manage a Synthetics Broken Links monitor in New Relic.
        name: newrelic_synthetics_broken_links_monitor
        title: newrelic_synthetics_broken_links_monitor
        examples:
            - name: foo
              manifest: |-
                {
                  "locations_public": [
                    "AP_SOUTH_1"
                  ],
                  "name": "Sample Broken Links Monitor",
                  "period": "EVERY_6_HOURS",
                  "runtime_type": "NODE_API",
                  "runtime_type_version": "16.10",
                  "status": "ENABLED",
                  "tag": [
                    {
                      "key": "some_key",
                      "values": [
                        "some_value"
                      ]
                    }
                  ],
                  "uri": "https://www.one.example.com"
                }
            - name: foo
              manifest: |-
                {
                  "locations_private": [
                    "${newrelic_synthetics_private_location.foo.id}"
                  ],
                  "name": "Sample Broken Links Monitor",
                  "period": "EVERY_6_HOURS",
                  "status": "ENABLED",
                  "tag": [
                    {
                      "key": "some_key",
                      "values": [
                        "some_value"
                      ]
                    }
                  ],
                  "uri": "https://www.one.example.com"
                }
              dependencies:
                newrelic_synthetics_private_location.foo: |-
                    {
                      "description": "Sample Private Location Description",
                      "name": "Sample Private Location",
                      "verified_script_execution": false
                    }
        argumentDocs:
            account_id: '- (Optional) The account in which the Synthetics monitor will be created.'
            id: '- The ID (GUID) of the synthetics broken links monitor.'
            locations_private: '- (Required) The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either locations_public or locations_private is required.'
            locations_public: '- (Required) The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don''t need the AWS_ prefix as the provider uses NerdGraph. At least one of either locations_public or location_private is required.'
            name: '- (Required) The name for the monitor.'
            period: '- (Required) The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.'
            period_in_minutes: '- The interval in minutes at which Synthetic monitor should run.'
            runtime_type: '- (Optional) The runtime that the monitor will use to run jobs.'
            runtime_type_version: '- (Optional) The specific version of the runtime type selected.'
            status: '- (Required) The run state of the monitor. (ENABLED or DISABLED).'
            tag: '- (Optional) The tags that will be associated with the monitor. See Nested tag blocks below for details'
            tag.key: '- (Required) Name of the tag key.'
            tag.values: '- (Required) Values associated with the tag key.'
            uri: '- (Required) The URI the monitor runs against.'
        importStatements: []
    newrelic_synthetics_cert_check_monitor:
        subCategory: ""
        description: Create and manage a Synthetics Cert Check monitor in New Relic.
        name: newrelic_synthetics_cert_check_monitor
        title: newrelic_synthetics_cert_check_monitor
        examples:
            - name: foo
              manifest: |-
                {
                  "certificate_expiration": "10",
                  "domain": "www.example.com",
                  "locations_public": [
                    "AP_SOUTH_1"
                  ],
                  "name": "Sample Cert Check Monitor",
                  "period": "EVERY_6_HOURS",
                  "runtime_type": "NODE_API",
                  "runtime_type_version": "16.10",
                  "status": "ENABLED",
                  "tag": [
                    {
                      "key": "some_key",
                      "values": [
                        "some_value"
                      ]
                    }
                  ]
                }
            - name: foo
              manifest: |-
                {
                  "certificate_expiration": "10",
                  "domain": "www.one.example.com",
                  "locations_private": [
                    "${newrelic_synthetics_private_location.foo.id}"
                  ],
                  "name": "Sample Cert Check Monitor",
                  "period": "EVERY_6_HOURS",
                  "status": "ENABLED",
                  "tag": [
                    {
                      "key": "some_key",
                      "values": [
                        "some_value"
                      ]
                    }
                  ]
                }
              dependencies:
                newrelic_synthetics_private_location.foo: |-
                    {
                      "description": "Sample Private Location Description",
                      "name": "Sample Private Location",
                      "verified_script_execution": false
                    }
        argumentDocs:
            account_id: '- (Optional) The account in which the Synthetics monitor will be created.'
            certificate_expiration: '- (Required) The desired number of remaining days until the certificate expires to trigger a monitor failure.'
            domain: '- (Required) The domain of the host that will have its certificate checked.'
            id: '- The ID (GUID) of the certificate check synthetics monitor.'
            locations_private: '- (Required) The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either locations_public or locations_private is required.'
            locations_public: '- (Required) The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don''t need the AWS_ prefix as the provider uses NerdGraph. At least one of either locations_public or location_private is required.'
            name: '- (Required) The name for the monitor.'
            period: '- (Required) The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.'
            period_in_minutes: '- The interval in minutes at which Synthetic monitor should run.'
            runtime_type: '- (Optional) The runtime that the monitor will use to run jobs.'
            runtime_type_version: '- (Optional) The specific version of the runtime type selected.'
            status: '- (Required) The run state of the monitor. (ENABLED or DISABLED).'
            tag: '- (Optional) The tags that will be associated with the monitor. See Nested tag blocks below for details'
            tag.key: '- (Required) Name of the tag key.'
            tag.values: '- (Required) Values associated with the tag key.'
        importStatements: []
    newrelic_synthetics_monitor:
        subCategory: ""
        description: Create and manage a Synthetics monitor in New Relic.
        name: newrelic_synthetics_monitor
        title: newrelic_synthetics_monitor
        examples:
            - name: monitor
              manifest: |-
                {
                  "bypass_head_request": true,
                  "custom_header": [
                    {
                      "name": "some_name",
                      "value": "some_value"
                    }
                  ],
                  "locations_public": [
                    "AP_SOUTH_1"
                  ],
                  "name": "monitor",
                  "period": "EVERY_MINUTE",
                  "status": "ENABLED",
                  "tag": [
                    {
                      "key": "some_key",
                      "values": [
                        "some_value"
                      ]
                    }
                  ],
                  "treat_redirect_as_failure": true,
                  "type": "SIMPLE",
                  "uri": "https://www.one.newrelic.com",
                  "validation_string": "success",
                  "verify_ssl": true
                }
            - name: monitor
              manifest: |-
                {
                  "custom_header": [
                    {
                      "name": "some_name",
                      "value": "some_value"
                    }
                  ],
                  "enable_screenshot_on_failure_and_script": true,
                  "locations_public": [
                    "AP_SOUTH_1"
                  ],
                  "name": "monitor",
                  "period": "EVERY_MINUTE",
                  "status": "ENABLED",
                  "tag": [
                    {
                      "key": "some_key",
                      "values": [
                        "some_value"
                      ]
                    }
                  ],
                  "type": "BROWSER",
                  "uri": "https://www.one.newrelic.com",
                  "validation_string": "success",
                  "verify_ssl": true
                }
            - name: synthetic-simple-browser
              manifest: |-
                {
                  "lifecycle": [
                    {
                      "ignore_changes": [
                        "${script_language}",
                        "${runtime_type}",
                        "${runtime_type_version}"
                      ]
                    }
                  ],
                  "locations_public": [
                    "AP_NORTHEAST_1"
                  ],
                  "name": "test simple browser",
                  "period": "EVERY_MINUTE",
                  "status": "ENABLED",
                  "type": "BROWSER",
                  "uri": "https://www.one.newrelic.com"
                }
            - name: monitor
              manifest: |-
                {
                  "bypass_head_request": true,
                  "custom_header": [
                    {
                      "name": "some_name",
                      "value": "some_value"
                    }
                  ],
                  "locations_private": [
                    "${newrelic_synthetics_private_location.location.id}"
                  ],
                  "name": "monitor",
                  "period": "EVERY_MINUTE",
                  "status": "ENABLED",
                  "tag": [
                    {
                      "key": "some_key",
                      "values": [
                        "some_value"
                      ]
                    }
                  ],
                  "treat_redirect_as_failure": true,
                  "type": "SIMPLE",
                  "uri": "https://www.one.newrelic.com",
                  "validation_string": "success",
                  "verify_ssl": true
                }
              dependencies:
                newrelic_synthetics_private_location.location: |-
                    {
                      "description": "Example private location",
                      "name": "private_location",
                      "verified_script_execution": false
                    }
            - name: monitor
              manifest: |-
                {
                  "custom_header": [
                    {
                      "name": "some_name",
                      "value": "some_value"
                    }
                  ],
                  "enable_screenshot_on_failure_and_script": true,
                  "locations_private": [
                    "${newrelic_synthetics_private_location.location.id}"
                  ],
                  "name": "monitor",
                  "period": "EVERY_MINUTE",
                  "runtime_type": "CHROME_BROWSER",
                  "runtime_type_version": "100",
                  "script_language": "JAVASCRIPT",
                  "status": "ENABLED",
                  "tag": [
                    {
                      "key": "some_key",
                      "values": [
                        "some_value"
                      ]
                    }
                  ],
                  "type": "BROWSER",
                  "uri": "https://www.one.newrelic.com",
                  "validation_string": "success",
                  "verify_ssl": true
                }
              dependencies:
                newrelic_synthetics_private_location.location: |-
                    {
                      "description": "Example private location",
                      "name": "private-location",
                      "verified_script_execution": false
                    }
        argumentDocs:
            account_id: '- (Optional) The account in which the Synthetics monitor will be created.'
            bypass_head_request: '- (Optional) Monitor should skip default HEAD request and instead use GET verb in check.'
            custom_header: '- (Optional) Custom headers to use in monitor job. See Nested custom_header blocks below for details.'
            custom_header.name: '- (Required) Header name.'
            custom_header.value: '- (Required) Header Value.'
            device_orientation: '- (Optional) Device emulation orientation field. Valid values are LANDSCAPE and PORTRAIT.'
            device_type: '- (Optional) Device emulation type field. Valid values are MOBILE and TABLET.'
            enable_screenshot_on_failure_and_script: '- (Optional) Capture a screenshot during job execution.'
            id: '- The ID (GUID) of the Synthetics monitor that the script is attached to.'
            locations_private: '- (Required) The location the monitor will run from. Accepts a list of private location GUIDs. At least one of either locations_public or locations_private is required.'
            locations_public: '- (Required) The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don''t need the AWS_ prefix as the provider uses NerdGraph. At least one of either locations_public or location_private is required.'
            name: '- (Required) The human-readable identifier for the monitor.'
            period: '- (Required) The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.'
            period_in_minutes: '- The interval in minutes at which Synthetic monitor should run.'
            runtime_type: '- (Optional) The runtime type that the monitor will run.'
            runtime_type_version: '- (Optional) The runtime type that the monitor will run.'
            script_language: '- (Optional) The programing language that should execute the script.'
            status: '- (Required) The run state of the monitor. (ENABLED or DISABLED).'
            tag: '- (Optional) The tags that will be associated with the monitor. See Nested tag blocks below for details.'
            tag.key: '- (Required) Name of the tag key.'
            tag.values: '- (Required) Values associated with the tag key.'
            treat_redirect_as_failure: '- (Optional) Categorize redirects during a monitor job as a failure.'
            type: '- (Required) The monitor type. Valid values are SIMPLE and BROWSER.'
            uri: '- (Required) The URI the monitor runs against.'
            validation_string: '- (Optional) Validation text for monitor to search for at given URI.'
            verify_ssl: '- (Optional) Monitor should validate SSL certificate chain.'
        importStatements: []
    newrelic_synthetics_multilocation_alert_condition:
        subCategory: ""
        description: Create and manage a New Relic Synthetics Location Alerts.
        name: newrelic_synthetics_multilocation_alert_condition
        title: newrelic_synthetics_multilocation_alert_condition
        examples:
            - name: example
              manifest: |-
                {
                  "critical": [
                    {
                      "threshold": 2
                    }
                  ],
                  "enabled": true,
                  "entities": [
                    "${newrelic_synthetics_monitor.monitor.id}"
                  ],
                  "name": "Example condition",
                  "policy_id": "${newrelic_alert_policy.policy.id}",
                  "runbook_url": "https://example.com",
                  "violation_time_limit_seconds": 3600,
                  "warning": [
                    {
                      "threshold": 1
                    }
                  ]
                }
              references:
                policy_id: newrelic_alert_policy.policy.id
              dependencies:
                newrelic_alert_policy.policy: |-
                    {
                      "name": "my-policy"
                    }
                newrelic_synthetics_monitor.monitor: |-
                    {
                      "locations_public": [
                        "US_WEST_1"
                      ],
                      "name": "my-monitor",
                      "period": "EVERY_10_MINUTES",
                      "status": "DISABLED",
                      "type": "SIMPLE",
                      "uri": "https://www.one.newrelic.com"
                    }
            - name: foo
              manifest: |-
                {
                  "critical": [
                    {
                      "threshold": 2
                    }
                  ],
                  "enabled": true,
                  "entities": [
                    "${newrelic_synthetics_monitor.foo.id}"
                  ],
                  "name": "foo condition",
                  "policy_id": "${newrelic_alert_policy.foo.id}",
                  "runbook_url": "https://example.com",
                  "violation_time_limit_seconds": 3600,
                  "warning": [
                    {
                      "threshold": 1
                    }
                  ]
                }
              references:
                policy_id: newrelic_alert_policy.foo.id
              dependencies:
                newrelic_alert_policy.foo: |-
                    {
                      "name": "foo policy"
                    }
                newrelic_entity_tags.my_condition_entity_tags: |-
                    {
                      "guid": "${newrelic_synthetics_multilocation_alert_condition.foo.entity_guid}",
                      "tag": [
                        {
                          "key": "my-key",
                          "values": [
                            "my-value",
                            "my-other-value"
                          ]
                        },
                        {
                          "key": "my-key-2",
                          "values": [
                            "my-value-2"
                          ]
                        }
                      ]
                    }
                newrelic_synthetics_monitor.foo: |-
                    {
                      "bypass_head_request": true,
                      "custom_header": [
                        {
                          "name": "some_name",
                          "value": "some_value"
                        }
                      ],
                      "locations_public": [
                        "AP_EAST_1"
                      ],
                      "name": "foo monitor",
                      "period": "EVERY_MINUTE",
                      "status": "ENABLED",
                      "tag": [
                        {
                          "key": "some_key",
                          "values": [
                            "some_value"
                          ]
                        }
                      ],
                      "treat_redirect_as_failure": true,
                      "type": "SIMPLE",
                      "uri": "https://www.one.newrelic.com",
                      "validation_string": "success",
                      "verify_ssl": true
                    }
        argumentDocs:
            critical: '- (Required) A condition term with the priority set to critical.'
            enabled: '- (Optional) Set whether to enable the alert condition.  Defaults to true.'
            entities: '- (Required) The Monitor GUID''s of the Synthetics monitors to alert on.'
            entity_guid: '- The unique entity identifier of the condition in New Relic.'
            name: '- (Required) The title of the condition.'
            policy_id: '- (Required) The ID of the policy where this condition will be used.'
            runbook_url: '- (Optional) Runbook URL to display in notifications.'
            violation_time_limit_seconds: '- (Optional) The maximum number of seconds a violation can remain open before being closed by the system. The value must be between 300 seconds (5 minutes) to 2592000 seconds (30 days), both inclusive. Defaults to 259200 seconds (3 days) if this argument is not specified in the configuration, in accordance with the characteristics of this field in NerdGraph, as specified in the docs.'
            warning: '- (Optional) A condition term with the priority set to warning.'
        importStatements: []
    newrelic_synthetics_private_location:
        subCategory: ""
        description: Create and manage Synthetics private location in New Relic.
        name: newrelic_synthetics_private_location
        title: newrelic_synthetics_private_location
        examples:
            - name: location
              manifest: |-
                {
                  "description": "The private location description",
                  "name": "The name of the private location"
                }
        argumentDocs:
            account_id: '- (Optional) The account in which the private location will be created.'
            description: '- (Required) The private location description.'
            domain_id: '- The private location globally unique identifier.'
            guid: '- The unique client identifier for the private location in New Relic. Same as id.'
            id: '- The ID of the private location. Same as guid.'
            key: '- The private locations key.'
            location_id: '- An alternate identifier based on name.'
            name: '- (Required) The name of the private location.'
            verified_script_execution: '- (Optional) The private location requires a password to edit if value is true. Defaults to false'
        importStatements: []
    newrelic_synthetics_script_monitor:
        subCategory: ""
        description: Create and manage a Synthetics script monitor in New Relic.
        name: newrelic_synthetics_script_monitor
        title: newrelic_synthetics_script_monitor
        examples:
            - name: monitor
              manifest: |-
                {
                  "locations_public": [
                    "AP_SOUTH_1",
                    "AP_EAST_1"
                  ],
                  "name": "script_monitor",
                  "period": "EVERY_6_HOURS",
                  "runtime_type": "NODE_API",
                  "runtime_type_version": "16.10",
                  "script": "console.log('it works!')",
                  "script_language": "JAVASCRIPT",
                  "status": "ENABLED",
                  "tag": [
                    {
                      "key": "some_key",
                      "values": [
                        "some_value"
                      ]
                    }
                  ],
                  "type": "SCRIPT_API"
                }
            - name: monitor
              manifest: |-
                {
                  "enable_screenshot_on_failure_and_script": false,
                  "locations_public": [
                    "AP_SOUTH_1",
                    "AP_EAST_1"
                  ],
                  "name": "script_monitor",
                  "period": "EVERY_HOUR",
                  "runtime_type": "CHROME_BROWSER",
                  "runtime_type_version": "100",
                  "script": "$browser.get('https://one.newrelic.com')",
                  "script_language": "JAVASCRIPT",
                  "status": "ENABLED",
                  "tag": [
                    {
                      "key": "some_key",
                      "values": [
                        "some_value"
                      ]
                    }
                  ],
                  "type": "SCRIPT_BROWSER"
                }
            - name: monitor
              manifest: |-
                {
                  "location_private": [
                    {
                      "guid": "${newrelic_synthetics_private_location.location.id}",
                      "vse_password": "secret"
                    }
                  ],
                  "name": "script_monitor",
                  "period": "EVERY_6_HOURS",
                  "runtime_type": "NODE_API",
                  "runtime_type_version": "16.10",
                  "script": "console.log('terraform integration test updated')",
                  "script_language": "JAVASCRIPT",
                  "status": "ENABLED",
                  "tag": [
                    {
                      "key": "some_key",
                      "values": [
                        "some_value"
                      ]
                    }
                  ],
                  "type": "SCRIPT_API"
                }
              references:
                location_private.guid: newrelic_synthetics_private_location.location.id
              dependencies:
                newrelic_synthetics_private_location.location: |-
                    {
                      "description": "Example private location",
                      "name": "private_location",
                      "verified_script_execution": true
                    }
            - name: monitor
              manifest: |-
                {
                  "enable_screenshot_on_failure_and_script": false,
                  "location_private": [
                    {
                      "guid": "${newrelic_synthetics_private_location.location.id}",
                      "vse_password": "secret"
                    }
                  ],
                  "name": "script_monitor",
                  "period": "EVERY_HOUR",
                  "runtime_type": "CHROME_BROWSER",
                  "runtime_type_version": "100",
                  "script": "$browser.get('https://one.newrelic.com')",
                  "script_language": "JAVASCRIPT",
                  "status": "ENABLED",
                  "tag": [
                    {
                      "key": "some_key",
                      "values": [
                        "some_value"
                      ]
                    }
                  ],
                  "type": "SCRIPT_BROWSER"
                }
              references:
                location_private.guid: newrelic_synthetics_private_location.location.id
              dependencies:
                newrelic_synthetics_private_location.location: |-
                    {
                      "description": "Test Description",
                      "name": "private_location",
                      "verified_script_execution": true
                    }
        argumentDocs:
            account_id: '- (Optional) The account in which the Synthetics monitor will be created.'
            device_orientation: '- (Optional) Device emulation orientation field. Valid values are LANDSCAPE and PORTRAIT.'
            device_type: '- (Optional) Device emulation type field. Valid values are MOBILE and TABLET.'
            enable_screenshot_on_failure_and_script: '- (Optional) Capture a screenshot during job execution.'
            id: '- The ID of the Synthetics script monitor.'
            location_private: '- (Optional) The location the monitor will run from. See Nested location_private blocks below for details. At least one of either locations_public or location_private is required.'
            location_private.guid: '- (Required) The unique identifier for the Synthetics private location in New Relic.'
            location_private.vse_password: '- (Optional) The location''s Verified Script Execution password, Only necessary if Verified Script Execution is enabled for the location.'
            locations_public: '- (Optional) The location the monitor will run from. Check out this page for a list of valid public locations. The AWS_ prefix is not needed, as the provider uses NerdGraph. At least one of either locations_public or location_private is required.'
            name: '- (Required) The name for the monitor.'
            period: '- (Required) The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.'
            period_in_minutes: '- The interval in minutes at which Synthetic monitor should run.'
            runtime_type: '- (Optional) The runtime that the monitor will use to run jobs.'
            runtime_type_version: '- (Optional) The specific version of the runtime type selected.'
            script: '- (Required) The script that the monitor runs.'
            script_language: '- (Optional) The programing language that should execute the script.'
            status: '- (Required) The run state of the monitor. (ENABLED or DISABLED).'
            tag: '- (Optional) The tags that will be associated with the monitor. See Nested tag blocks below for details.'
            tag.key: '- (Required) Name of the tag key.'
            tag.values: '- (Required) Values associated with the tag key.'
            type: '- (Required) The plaintext representing the monitor script. Valid values are SCRIPT_BROWSER or SCRIPT_API'
        importStatements: []
    newrelic_synthetics_secure_credential:
        subCategory: ""
        description: Create and manage Synthetics secure credentials in New Relic.
        name: newrelic_synthetics_secure_credential
        title: newrelic_synthetics_secure_credential
        examples:
            - name: foo
              manifest: |-
                {
                  "description": "My description",
                  "key": "MY_KEY",
                  "value": "My value"
                }
        argumentDocs:
            account_id: '- (Optional) Determines the New Relic account where the secure credential will be created. Defaults to the account associated with the API key used.'
            description: '- (Optional) The secure credential''s description.'
            key: '- (Required) The secure credential''s key name.  Regardless of the case used in the configuration, the provider will provide an upcased key to the underlying API.'
            last_updated: '- The time the secure credential was last updated.'
            value: '- (Required) The secure credential''s value.'
        importStatements: []
    newrelic_synthetics_step_monitor:
        subCategory: ""
        description: Create and manage a Synthetics Step monitor in New Relic.
        name: newrelic_synthetics_step_monitor
        title: newrelic_synthetics_step_monitor
        examples:
            - name: foo
              manifest: |-
                {
                  "enable_screenshot_on_failure_and_script": true,
                  "locations_public": [
                    "US_EAST_1",
                    "US_EAST_2"
                  ],
                  "name": "Sample Step Monitor",
                  "period": "EVERY_6_HOURS",
                  "runtime_type": "CHROME_BROWSER",
                  "runtime_type_version": "100",
                  "status": "ENABLED",
                  "steps": [
                    {
                      "ordinal": 0,
                      "type": "NAVIGATE",
                      "values": [
                        "https://www.newrelic.com"
                      ]
                    }
                  ],
                  "tag": [
                    {
                      "key": "some_key",
                      "values": [
                        "some_value"
                      ]
                    }
                  ]
                }
            - name: foo
              manifest: |-
                {
                  "location_private": [
                    {
                      "guid": "${newrelic_synthetics_private_location.foo.id}",
                      "vse_password": "secret"
                    }
                  ],
                  "name": "Sample Step Monitor",
                  "period": "EVERY_6_HOURS",
                  "status": "ENABLED",
                  "steps": [
                    {
                      "ordinal": 0,
                      "type": "NAVIGATE",
                      "values": [
                        "https://google.com"
                      ]
                    }
                  ],
                  "tag": [
                    {
                      "key": "some_key",
                      "values": [
                        "some_value"
                      ]
                    }
                  ]
                }
              references:
                location_private.guid: newrelic_synthetics_private_location.foo.id
              dependencies:
                newrelic_synthetics_private_location.foo: |-
                    {
                      "description": "Sample Private Location Description",
                      "name": "Sample Private Location",
                      "verified_script_execution": true
                    }
        argumentDocs:
            account_id: '- (Optional) The account in which the Synthetics monitor will be created.'
            id: '- The ID (GUID) of the synthetics step monitor.'
            location_private: '- (Required) The location the monitor will run from. At least one of locations_public or location_private is required. See Nested locations_private blocks below for details.'
            location_private.guid: '- (Required) The unique identifier for the Synthetics private location in New Relic.'
            location_private.vse_password: '- (Optional) The location''s Verified Script Execution password, only necessary if Verified Script Execution is enabled for the location.'
            locations_public: '- (Required) The location the monitor will run from. Valid public locations are https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/administration/synthetic-public-minion-ips/. You don''t need the AWS_ prefix as the provider uses NerdGraph. At least one of either locations_public or location_private is required.'
            name: '- (Required) The name for the monitor.'
            period: '- (Required) The interval at which this monitor should run. Valid values are EVERY_MINUTE, EVERY_5_MINUTES, EVERY_10_MINUTES, EVERY_15_MINUTES, EVERY_30_MINUTES, EVERY_HOUR, EVERY_6_HOURS, EVERY_12_HOURS, or EVERY_DAY.'
            period_in_minutes: '- The interval in minutes at which Synthetic monitor should run.'
            runtime_type: '- (Optional) The runtime that the monitor will use to run jobs.'
            runtime_type_version: '- (Optional) The specific version of the runtime type selected.'
            status: '- (Required) The run state of the monitor. (ENABLED or DISABLED).'
            steps: '- (Required) The steps that make up the script the monitor will run. See Nested steps blocks below for details.'
            steps.ordinal: '- (Required) The position of the step within the script ranging from 0-100.'
            steps.type: '- (Required) Name of the tag key. Valid values are ASSERT_ELEMENT, ASSERT_MODAL, ASSERT_TEXT, ASSERT_TITLE, CLICK_ELEMENT, DISMISS_MODAL, DOUBLE_CLICK_ELEMENT, HOVER_ELEMENT, NAVIGATE, SECURE_TEXT_ENTRY, SELECT_ELEMENT, TEXT_ENTRY.'
            steps.values: '- (Optional) The metadata values related to the step.'
            tag: '- (Optional) The tags that will be associated with the monitor. See Nested tag blocks below for details.'
            tag.key: '- (Required) Name of the tag key.'
            tag.values: '- (Required) Values associated with the tag key.'
        importStatements: []
    newrelic_user:
        subCategory: ""
        description: Create and manage users in New Relic.
        name: newrelic_user
        title: newrelic_user'
        examples:
            - name: foo
              manifest: |-
                {
                  "authentication_domain_id": "${data.newrelic_authentication_domain.foo.id}",
                  "email_id": "test_user@test.com",
                  "name": "Test New User",
                  "user_type": "CORE_USER_TIER"
                }
              references:
                authentication_domain_id: data.newrelic_authentication_domain.foo.id
        argumentDocs:
            authentication_domain_id: '- (Required) The ID of the authentication domain to which the user to be created would belong.'
            email_id: '- (Required) The email ID of the user to be created.'
            id: '- The ID of the created user.'
            name: '- (Required) The name of the user to be created.'
            user_type: '- (Optional) The tier to which the user to be created would belong. Accepted values for this argument are BASIC_USER_TIER, CORE_USER_TIER, or FULL_USER_TIER. If not specified in the configuration, the argument would default to BASIC_USER_TIER.'
        importStatements:
            - $ terraform import newrelic_user.foo 1999999999
    newrelic_workflow:
        subCategory: ""
        description: Create and manage a workflow in New Relic.
        name: newrelic_workflow
        title: newrelic_workflow
        examples:
            - name: foo
              manifest: |-
                {
                  "destination": [
                    {
                      "channel_id": "${newrelic_notification_channel.some_channel.id}"
                    }
                  ],
                  "issues_filter": [
                    {
                      "name": "filter-name",
                      "predicate": [
                        {
                          "attribute": "accumulations.tag.team",
                          "operator": "EXACTLY_MATCHES",
                          "values": [
                            "growth"
                          ]
                        }
                      ],
                      "type": "FILTER"
                    }
                  ],
                  "muting_rules_handling": "NOTIFY_ALL_ISSUES",
                  "name": "workflow-example"
                }
              references:
                destination.channel_id: newrelic_notification_channel.some_channel.id
            - name: workflow-example
              manifest: |-
                {
                  "destination": [
                    {
                      "channel_id": "${newrelic_notification_channel.webhook-channel.id}"
                    }
                  ],
                  "issues_filter": [
                    {
                      "name": "Filter-name",
                      "predicate": [
                        {
                          "attribute": "labels.policyIds",
                          "operator": "EXACTLY_MATCHES",
                          "values": [
                            "${newrelic_alert_policy.my-policy.id}"
                          ]
                        }
                      ],
                      "type": "FILTER"
                    }
                  ],
                  "muting_rules_handling": "NOTIFY_ALL_ISSUES",
                  "name": "workflow-example"
                }
              references:
                destination.channel_id: newrelic_notification_channel.webhook-channel.id
              dependencies:
                newrelic_alert_policy.my-policy: |-
                    {
                      "name": "my_policy"
                    }
                newrelic_notification_channel.webhook-channel: |-
                    {
                      "destination_id": "${newrelic_notification_destination.webhook-destination.id}",
                      "name": "channel-webhook",
                      "product": "IINT",
                      "property": [
                        {
                          "key": "payload",
                          "label": "Payload Template",
                          "value": "{}"
                        }
                      ],
                      "type": "WEBHOOK"
                    }
                newrelic_notification_destination.webhook-destination: |-
                    {
                      "auth_basic": [
                        {
                          "password": "password",
                          "user": "username"
                        }
                      ],
                      "name": "destination-webhook",
                      "property": [
                        {
                          "key": "url",
                          "value": "https://example.com"
                        }
                      ],
                      "type": "WEBHOOK"
                    }
            - name: workflow-example
              manifest: |-
                {
                  "destination": [
                    {
                      "channel_id": "${newrelic_notification_channel.webhook-channel.id}"
                    }
                  ],
                  "enrichments": [
                    {
                      "nrql": [
                        {
                          "configuration": [
                            {
                              "query": "SELECT count(*) FROM Log WHERE message like '%error%' since 10 minutes ago"
                            }
                          ],
                          "name": "Log Count"
                        }
                      ]
                    }
                  ],
                  "issues_filter": [
                    {
                      "name": "Filter-name",
                      "predicate": [
                        {
                          "attribute": "accumulations.tag.team",
                          "operator": "EXACTLY_MATCHES",
                          "values": [
                            "my_team"
                          ]
                        }
                      ],
                      "type": "FILTER"
                    }
                  ],
                  "muting_rules_handling": "NOTIFY_ALL_ISSUES",
                  "name": "workflow-enrichment-example"
                }
              references:
                destination.channel_id: newrelic_notification_channel.webhook-channel.id
            - name: workflow-example
              manifest: |-
                {
                  "destination": [
                    {
                      "channel_id": "${newrelic_notification_channel.webhook-channel.id}",
                      "notification_triggers": [
                        "ACTIVATED"
                      ]
                    }
                  ],
                  "issues_filter": [
                    {
                      "name": "Filter-name",
                      "predicate": [
                        {
                          "attribute": "accumulations.tag.team",
                          "operator": "EXACTLY_MATCHES",
                          "values": [
                            "my_team"
                          ]
                        }
                      ],
                      "type": "FILTER"
                    }
                  ],
                  "muting_rules_handling": "NOTIFY_ALL_ISSUES",
                  "name": "workflow-enrichment-example"
                }
              references:
                destination.channel_id: newrelic_notification_channel.webhook-channel.id
        argumentDocs:
            '["Aa","Bb"]': would "exactly match" Aa
            ACKNOWLEDGED: '- Send a notification when an issue is acknowledged'
            ACTIVATED: '- Send a notification when an issue is activated'
            CLOSED: '- Send a notification when an issue is closed'
            CONTAINS: ', DOES_NOT_CONTAIN - check if the value contains one of the given strings'
            DOES_NOT_EXACTLY_MATCH: ', EXACTLY_MATCHES - check if the array contains one of the given items'
            DONT_NOTIFY_FULLY_MUTED_ISSUES: '- Do not send notifications for fully muted issues, do send notifications for partially muted issues'
            DONT_NOTIFY_FULLY_OR_PARTIALLY_MUTED_ISSUES: '- Do not send notifications for fully or partially muted issues.'
            ENDS_WITH: '- check if the value starts from one of the given strings'
            EQUAL: ', DOES_NOT_EQUAL - check if the value is equal to one of the given strings'
            Enrichments.nrql: '- a wrapper block'
            IS: ', IS_NOT - [please avoid] check if something is NULL or not. Should only be used with NULL value'
            NOTIFY_ALL_ISSUES: '- Always send notifications, no matter whether the issue is muted or not'
            OTHER_UPDATES: '- Send a notification on other updates on the issue. These updates include:'
            PRIORITY_CHANGED: '- Send a notification when an issue''s priority has been changed'
            STARTS_WITH: '- check if the value starts from one of the given strings'
            account_id: '- (Optional) Determines the New Relic account in which the workflow is created. Defaults to the account defined in the provider section.'
            accumulations.tags.X: '- a list of values of a tag X collected from all incidents in the issue'
            attribute: '- (Required) Issue event attribute to check'
            channel_id: |-
                - (Required) Id of a notification_channel to use for notifications. Please note that you have to use a
                notification channel, not an alert_channel.
            configuration: '- Another wrapper block'
            configurations: changed to configuration.
            destination: '- (Required) Notification configuration. See Nested destination blocks below for details.'
            destination.basic: credentials, Slack's OAuth credentials, PagerDuty API key, etc)
            destination_configuration: changed to destination.
            destinations_enabled: |-
                - (Optional) DEPRECATED Whether destinations are enabled. Please use enabled instead:
                these two are different flags, but they are functionally identical. Defaults to true.
            enabled: '- (Optional) Whether workflow is enabled. Defaults to true.'
            enrichments: '- (Optional) Workflow''s enrichments. See Nested enrichments blocks below for details.'
            enrichments_enabled: '- (Optional) Whether enrichments are enabled. Defaults to true.'
            id: '- The ID of the workflow.'
            issues_filter: '- (Required) A filter used to identify issues handled by this workflow. See Nested issues_filter blocks below for details.'
            issues_filter.labels.policyIds EXACTLY_MATCHES 123: meaning "the issue includes an incident triggered by an alert policy with id = 123"
            issues_filter.name: '- (Required) The name of the filter. The name only serves a cosmetic purpose and can only be seen through Terraform and GraphQL API. It can''t be empty.'
            issues_filter.predicate: (Required) A condition an issue event should satisfy to be processed by the workflow
            issues_filter.tag.team EXACTLY_MATCHES my_team: meaning "the issue has a tag called team and the tag value is set to 'my_team'"
            issues_filter.type: '- (Required) Type of the filter. Please just set this field to FILTER. The field is likely to be deprecated/removed in the near future.'
            labels.policyIds: '- a list of IDs of alert policies that triggered the incidents included in the issue'
            muting_rules_handling: '- (Required) How to handle muted issues. See Muting Rules below for details.'
            name: '- (Required) The name of the workflow.'
            notification_triggers: '- (Optional) Issue events to notify on. The value is a list of possible issue events. See Notification Triggers below for details.'
            "null": ', you can try checking a different issue'
            operator: '- (Required) An operator to use to compare the attribute with the provided values, see supported operators below'
            predicates: changed to predicate.
            query: '- An NRQL query to run'
            state: ', priority'
            timestamp: ', acknowledgedAt'
            values: '- (Required) The attribute must match any of the values in this list'
            workflow_enabled: changed to enabled.
        importStatements: []
    newrelic_workload:
        subCategory: ""
        description: Create and manage a New Relic One workload.
        name: newrelic_workload
        title: newrelic_workload
        examples:
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "entity_guids": [
                    "MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1"
                  ],
                  "entity_search_query": [
                    {
                      "query": "name like '%Example application%'"
                    }
                  ],
                  "name": "Example workload",
                  "scope_account_ids": [
                    12345678
                  ]
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "entity_guids": [
                    "MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1"
                  ],
                  "entity_search_query": [
                    {
                      "query": "tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'"
                    }
                  ],
                  "name": "Example workload with tags",
                  "scope_account_ids": [
                    12345678
                  ]
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "entity_guids": [
                    "MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1"
                  ],
                  "entity_search_query": [
                    {
                      "query": "tags.accountId = '12345678' AND tags.environment='production' AND tags.language='java'"
                    }
                  ],
                  "name": "Example workload with tags",
                  "scope_account_ids": [
                    12345678
                  ]
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "description": "Description",
                  "entity_guids": [
                    "MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1"
                  ],
                  "entity_search_query": [
                    {
                      "query": "name like '%Example application%'"
                    }
                  ],
                  "name": "Example workload",
                  "scope_account_ids": [
                    12345678
                  ],
                  "status_config_automatic": [
                    {
                      "enabled": true,
                      "remaining_entities_rule": [
                        {
                          "remaining_entities_rule_rollup": [
                            {
                              "group_by": "ENTITY_TYPE",
                              "strategy": "BEST_STATUS_WINS",
                              "threshold_type": "FIXED",
                              "threshold_value": 100
                            }
                          ]
                        }
                      ],
                      "rule": [
                        {
                          "entity_guids": [
                            "MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1"
                          ],
                          "nrql_query": [
                            {
                              "query": "name like '%Example application2%'"
                            }
                          ],
                          "rollup": [
                            {
                              "strategy": "BEST_STATUS_WINS",
                              "threshold_type": "FIXED",
                              "threshold_value": 100
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
            - name: foo
              manifest: |-
                {
                  "account_id": 12345678,
                  "description": "Description",
                  "entity_guids": [
                    "MjUyMDUyOHxBUE18QVBQTElDQVRJT058MjE1MDM3Nzk1"
                  ],
                  "entity_search_query": [
                    {
                      "query": "name like '%Example application%'"
                    }
                  ],
                  "name": "Example workload",
                  "scope_account_ids": [
                    12345678
                  ],
                  "status_config_static": [
                    {
                      "description": "test",
                      "enabled": true,
                      "status": "OPERATIONAL",
                      "summary": "summary of the status"
                    }
                  ]
                }
        argumentDocs:
            account_id: '- (Required) The New Relic account ID where you want to create the workload.'
            composite_entity_search_query: '- The composite query used to compose a dynamic workload.'
            description: '- (Optional) Relevant information about the workload.'
            entity_guids: '- (Optional) A list of entity GUIDs manually assigned to this workload. At least one of either entity_guids or entity_search_query is required.'
            entity_search_query: '- (Optional) A list of search queries that define a dynamic workload. At least one of either entity_guids or entity_search_query is required. See Nested entity_search_query blocks below for details.'
            entity_search_query.query: '- (Required) A valid entity search query; empty, and null values are considered invalid.'
            guid: '- The unique entity identifier of the workload in New Relic.'
            name: '- (Required) The workload''s name.'
            nrql_query.query: '- The entity search query that is used to perform the search of a group of entities.'
            permalink: '- The URL of the workload.'
            remaining_entities_rule_rollup: '- (Required) The input object used to represent a rollup strategy. See Nested remaining_entities_rule_rollup blocks below for details.'
            remaining_entities_rule_rollup.group_by: '- (Required) The grouping to be applied to the remaining entities.'
            remaining_entities_rule_rollup.strategy: '- (Required) The rollup strategy that is applied to a group of entities.'
            remaining_entities_rule_rollup.threshold_type: '- (Optional) Type of threshold defined for the rule. This is an optional field that only applies when strategy is WORST_STATUS_WINS. Use a threshold to roll up the worst status only after a certain amount of entities are not operational.'
            remaining_entities_rule_rollup.threshold_value: '- (Optional) Threshold value defined for the rule. This optional field is used in combination with thresholdType. If the threshold type is null, the threshold value will be ignored.'
            rule.entity_guids: '- (Optional) A list of entity GUIDs composing the rule. At least one of entity_guids or nrql_query must be defined.'
            rule.nrql_query: '- (Optional) A list of entity search queries used to retrieve the entities that compose the rule. See Nested nrql_query blocks below for details. At least one of entity_guids or nrql_query must be defined.'
            rule.rollup: '- (Required) The input object used to represent a rollup strategy. See Nested rollup blocks below for details.'
            scope_account_ids: '- (Optional) A list of account IDs that will be used to get entities from.'
            status_config_automatic: '- (Optional) An input object used to represent an automatic status configuration.See Nested status_config_automatic blocks below for details.'
            status_config_automatic.enabled: '- (Required) Whether the automatic status configuration is enabled or not.'
            status_config_automatic.remaining_entities_rule: '- (Optional) An additional meta-rule that can consider all entities that haven''t been evaluated by any other rule. See Nested remaining_entities_rule blocks below for details.'
            status_config_automatic.rule: '- (Optional) The input object used to represent a rollup strategy. See Nested rule blocks below for details.'
            status_config_static: '- (Optional) A list of static status configurations. You can only configure one static status for a workload.See Nested status_config_static blocks below for details.'
            status_config_static.description: '- (Optional) A description that provides additional details about the status of the workload.'
            status_config_static.enabled: '- (Required) Whether the static status configuration is enabled or not.'
            status_config_static.status: '- (Required) The status of the workload.'
            status_config_static.summary: '- (Optional) A short description of the status of the workload.'
            strategy: '- (Required) The rollup strategy that is applied to a group of entities.'
            threshold_type: '- (Optional) Type of threshold defined for the rule. This is an optional field that only applies when strategy is WORST_STATUS_WINS. Use a threshold to roll up the worst status only after a certain amount of entities are not operational.'
            threshold_value: '- (Optional) Threshold value defined for the rule. This optional field is used in combination with thresholdType. If the threshold type is null, the threshold value will be ignored.'
            workload_id: '- The unique entity identifier of the workload.'
        importStatements: []
